/*
    browser.js - simulates web browser like environment
*/

util_log("Preparing sandbox to emulate Browser environment (default = IE11).");
_browser_documents = [];
_setInterval_calls = [];
_setTimeout_calls = [];

const { atob, btoa } = require("abab");
const fs = require("fs");

// https://developer.mozilla.org/en-US/docs/Web/API/Response
Response = function (text) {
    this.text = text;
    this.json = function () {
        return JSON.parse(this.text);
    }
}


// https://developer.mozilla.org/en-US/docs/Web/API/fetch
fetch = function (url) {
    util_log("fetch("+url+")");
    var ret = _proxy(new XMLHttpRequest());
    ret.open("get", url);
    ret.send();
    if (is_domain_geo(url)) {
        var response = new Response(JSON.stringify(domain_geo_response));
        return response;
    }
}


// https://developer.mozilla.org/en-US/docs/Web/API/Location
location = _proxy({
    _name: "location",

    // https://developer.mozilla.org/en-US/docs/Web/API/Location#instance_properties

    _props: {
        "hash": "#Example",
        "host": "example.com",
        "hostname": "example.com",
        "href": "http://example.com/?search",
        "origin": "http://example.com/?search",
        "pathname": "C:/script.js",
        "port": "80",
        "protocol": "http:",
        "search": "?search",
    },

    // https://developer.mozilla.org/en-US/docs/Web/API/Location#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/Location/assign
    assign: async function (n) {
        util_log(this._name + ".assign(" + n + ")");
        // In our sample, it is a promise
        // It would be better to handle it, but promises break everything
        // this._props["href"] = n;
    },

    // https://developer.mozilla.org/en-US/docs/Web/API/Location/reload
    reload: function () {
        util_log(this._name + ".reload()");
    },

    // https://developer.mozilla.org/en-US/docs/Web/API/Location/replace
    replace: function (url) {
        util_log(this._name + ".replace(" + url + ")");
        this._props["href"] = url;
    },
})
location.toString = () => { return "location" }
for (let k in location._props) {
    _defineProperty(location, k, location._props);
}


// https://developer.mozilla.org/en-US/docs/Web/API/Screen
screen = _proxy({
    availHeight: 1080,
    availLeft: 78,
    availTop: 0,
    availWidth: 1842,
    colorDepth: 24,
    height: 1080,
    left: 78,
    mozBrightness: 0.5,
    mozEnabled: true,
    // https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation
    orientation: {
        angle: 0,
        onchange: null,
        type: "landscape-primary"
    },
    pixelDepth: 24,
    top: 0,
    width: 1920,
})
screen.toString = () => { return "screen" }


// https://developer.mozilla.org/en-US/docs/Web/API/Window
window = _proxy(new function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "window[" + this.id + "]";

    // Useful private properties
    this._location = location;
    this._events = [];

    // Instance methods first, then properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Window#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/alert
    this.alert = function (message) {
        util_log(this._name + ".alert(" + message + ")");
    }

    this.back = function () {
        util_log(this._name + ".back(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.blur = function () {
        util_log(this._name + ".blur(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.cancelAnimationFrame = function () {
        util_log(this._name + ".cancelAnimationFrame(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.cancelIdleCallback = function () {
        util_log(this._name + ".cancelIdleCallback(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.captureEvents = function () {
        util_log(this._name + ".captureEvents(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.clearImmediate = function () {
        util_log(this._name + ".clearImmediate(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.close = function () {
        util_log(this._name + ".close(" + Array.prototype.slice.call(arguments, 0).join(",") + ")")
    }
    this.confirm = function () {
        util_log(this._name + ".confirm(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.convertPointFromNodeToPage = function () {
        util_log(this._name + ".convertPointFromNodeToPage(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.convertPointFromPageToNode = function () {
        util_log(this._name + ".convertPointFromPageToNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.dump = function () {
        util_log(this._name + ".dump(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.find = function () {
        util_log(this._name + ".find(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.focus = function () {
        util_log(this._name + ".focus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.forward = function () {
        util_log(this._name + ".forward(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getComputedStyle = function () {
        util_log(this._name + ".getComputedStyle(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getDefaultComputedStyle = function () {
        util_log(this._name + ".getDefaultComputedStyle(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getSelection = function () {
        util_log(this._name + ".getSelection(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.matchMedia = function () {
        util_log(this._name + ".matchMedia(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.moveBy = function () {
        util_log(this._name + ".moveBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.moveTo = function () {
        util_log(this._name + ".moveTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.open = function () {
        util_log(this._name + ".open(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
    this.postMessage = function () {
        const message = arguments[0];
        const targetOrigin = arguments[1];
        util_log(this._name + ".postMessage(" + _truncateOutput(message) + ", " + targetOrigin + ")");
        if (this.document._events.length == 1) {
            util_log("Setting the data of Event[" + document._events[0]._id + "]")
            this.document._events[0].data = message;
        }
    }

    this.print = function () {
        util_log(this._name + ".print(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.prompt = function () {
        util_log(this._name + ".prompt(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryLocalFonts = function () {
        util_log(this._name + ".queryLocalFonts(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.releaseEvents = function () {
        util_log(this._name + ".releaseEvents(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestAnimationFrame = function () {
        util_log(this._name + ".requestAnimationFrame(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestFileSystem = function () {
        util_log(this._name + ".requestFileSystem(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestIdleCallback = function () {
        util_log(this._name + ".requestIdleCallback(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.resizeBy = function () {
        util_log(this._name + ".resizeBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.resizeTo = function () {
        util_log(this._name + ".resizeTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scroll = function () {
        util_log(this._name + ".scroll(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollBy = function () {
        util_log(this._name + ".scrollBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollByLines = function () {
        util_log(this._name + ".scrollByLines(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollByPages = function () {
        util_log(this._name + ".scrollByPages(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollTo = function () {
        util_log(this._name + ".scrollTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setImmediate = function () {
        util_log(this._name + ".setImmediate(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showDirectoryPicker = function () {
        util_log(this._name + ".showDirectoryPicker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showModalDialog = function () {
        util_log(this._name + ".showModalDialog(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showOpenFilePicker = function () {
        util_log(this._name + ".showOpenFilePicker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showSaveFilePicker = function () {
        util_log(this._name + ".showSaveFilePicker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.sizeToContent = function () {
        util_log(this._name + ".sizeToContent(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.stop = function () {
        util_log(this._name + ".stop(" + Array.prototype.slice.call(arguments, 0).join(",") + ")")
    }
    this.updateCommands = function () {
        util_log(this._name + ".updateCommands(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Window#instance_properties

    _defineSingleProperty(this, "applicationCache");
    _defineSingleProperty(this, "closed");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/console
    this.console = function () { }

    _defineSingleProperty(this, "content");
    _defineSingleProperty(this, "credentialless");
    _defineSingleProperty(this, "customElements");
    _defineSingleProperty(this, "defaultStatus");
    _defineSingleProperty(this, "devicePixelRatio");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/document
    // This is assigned after the Document object instance is created
    // _defineSingleProperty(this, "document");

    _defineSingleProperty(this, "event");
    _defineSingleProperty(this, "external");
    _defineSingleProperty(this, "frameElement");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/frames
    this.frames = function () {
        this.odbFrame = "";
    }

    _defineSingleProperty(this, "fullScreen");
    _defineSingleProperty(this, "history");
    _defineSingleProperty(this, "innerHeight");
    _defineSingleProperty(this, "innerWidth");
    _defineSingleProperty(this, "launchQueue");
    _defineSingleProperty(this, "length");
    _defineSingleProperty(this, "localStorage");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/location
    Object.defineProperty(this, "location", {
        get: function () {
            util_log("window.location.get()");
            return this._location;
        },
        set: function (n) {
            util_log("window.location.set(" + n + ")");
            this._location.href = n;
        }
    })

    _defineSingleProperty(this, "locationbar");
    _defineSingleProperty(this, "menubar");
    _defineSingleProperty(this, "mozInnerScreenX");
    _defineSingleProperty(this, "mozInnerScreenY");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/name
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "name");

    _defineSingleProperty(this, "navigation");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator
    this.navigator = this;

    _defineSingleProperty(this, "ondragdrop");
    _defineSingleProperty(this, "opener");
    _defineSingleProperty(this, "orientation");
    _defineSingleProperty(this, "outerHeight");
    _defineSingleProperty(this, "outerWidth");
    _defineSingleProperty(this, "pageXOffset");
    _defineSingleProperty(this, "pageYOffset");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/parent
    this.parent = this;

    _defineSingleProperty(this, "personalbar");
    _defineSingleProperty(this, "scheduler");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/screen
    this.screen = screen;

    _defineSingleProperty(this, "screenLeft");
    _defineSingleProperty(this, "screenTop");
    _defineSingleProperty(this, "screenX");
    _defineSingleProperty(this, "screenY");
    _defineSingleProperty(this, "scrollbars");
    _defineSingleProperty(this, "scrollMaxX");
    _defineSingleProperty(this, "scrollMaxY");
    _defineSingleProperty(this, "scrollX");
    _defineSingleProperty(this, "scrollY");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/self
    this.self = function () {
        this.location = function () {
            util_log("get location" + arguments)
        }
    }

    _defineSingleProperty(this, "sessionStorage");
    _defineSingleProperty(this, "sidebar");
    _defineSingleProperty(this, "speechSynthesis");
    _defineSingleProperty(this, "status");
    _defineSingleProperty(this, "statusbar");
    _defineSingleProperty(this, "toolbar");
    _defineSingleProperty(this, "top");
    _defineSingleProperty(this, "visualViewport");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/window
    this.window = this;

    // Globals
    // https://developer.mozilla.org/en-US/docs/Web/API#interfaces

    // https://developer.mozilla.org/en-US/docs/Web/API/atob
    this.atob = atob;

    // https://developer.mozilla.org/en-US/docs/Web/API/btoa
    this.btoa = btoa;

    // https://developer.mozilla.org/en-US/docs/Web/API/clearInterval
    this.clearInterval = function () {
        util_log(this._name + ".clearInterval(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        _clearInterval.apply(this, Array.prototype.slice.call(arguments, 0));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout
    this.clearTimeout = function () {
        util_log(this._name + ".clearTimeout(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        _clearTimeout.apply(this, Array.prototype.slice.call(arguments, 0));
    }

    this.createImageBitmap = function () {
        util_log(this._name + ".createImageBitmap(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/crypto_property
    this.crypto = function () {
        util_log(this._name + ".crypto(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/fetch
    this.fetch = fetch;

    this.queueMicrotask = function () {
        util_log(this._name + ".queueMicrotask(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.reportError = function () {
        util_log(this._name + ".reportError(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/setInterval
    this.setInterval = function () {
        const func = arguments[0];
        const delay = arguments[1];

        util_log(this._name + ".setInterval(" + _truncateOutput(func) + ", " + delay + ")");
        _setInterval_calls[_setInterval_calls.length] = arguments[0].toString();

        // We wait for no one!
        arguments[1] = 0;

        return _setInterval.apply(this, Array.prototype.slice.call(arguments, 0));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/setTimeout
    this.setTimeout = function () {

        let code = undefined;

        if (typeof arguments[0] === "string") {
            code = arguments[0];
        }

        const delay = arguments[1];

        util_log(this._name + ".setTimeout(" + _truncateOutput(arguments[0]) + ", " + delay + ")");
        _setTimeout_calls[_setTimeout_calls.length] = arguments[0].toString();

        // We wait for no one!
        arguments[1] = 0;

        // Node's setTimeout expects a function reference every time, not a string representing code.
        let result = undefined;
        if (code) {
            result = eval(code);
        } else {
            result = _setTimeout.apply(this, Array.prototype.slice.call(arguments, 0));
        }

        // We don't want to repeat this timeout
        this.clearTimeout(result)
        return result;
    }

    this.structuredClone = function () {
        util_log(this._name + ".structuredClone(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    this.addEventListener = function (type, listener) {
        this.document.addEventListener(type, listener);
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
    this.XMLHttpRequest = XMLHttpRequest;


    // Overriding these methods from third-party libs

    // https://www.skypack.dev/view/set-timeout-sync
    this.settimeoutsync = function () {
        util_log(this._name + ".setTimeoutSync(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        _setTimeout_calls[_setTimeout_calls.length] = arguments[0].toString();
        return arguments[0].apply(this, Array.prototype.slice.call(arguments, 1));
    }

    // https://support.spinetix.com/wiki/JSignage_utilities_methods#jSignage.setIntervalSync.28.29
    this.setintervalsync = function () {
        util_log(this._name + ".setIntervalSync(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        _setInterval_calls[_setInterval_calls.length] = arguments[0].toString();
        return arguments[0].apply(this, Array.prototype.slice.call(arguments, 1));
    }

    // Not sure where this is from...
    this.clearintervalsync = function () {
        util_log(this._name + ".clearIntervalSync(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Events
    // https://developer.mozilla.org/en-US/docs/Web/API/Window#events

    this.onafterprint = function (listener) {
        this.addEventListener("afterprint", listener);
    }
    this.onappinstalled = function (listener) {
        this.addEventListener("appinstalled", listener);
    }
    this.onbeforeinstallprompt = function (listener) {
        this.addEventListener("beforeinstallprompt", listener);
    }
    this.onbeforeprint = function (listener) {
        this.addEventListener("beforeprint", listener);
    }
    this.onbeforeunload = function (listener) {
        this.addEventListener("beforeunload", listener);
    }
    this.onblur = function (listener) {
        this.addEventListener("blur", listener);
    }
    this.oncopy = function (listener) {
        this.addEventListener("copy", listener);
    }
    this.oncut = function (listener) {
        this.addEventListener("cut", listener);
    }
    this.ondevicemotion = function (listener) {
        this.addEventListener("devicemotion", listener);
    }
    this.ondeviceorientation = function (listener) {
        this.addEventListener("deviceorientation", listener);
    }
    this.ondeviceorientationabsolute = function (listener) {
        this.addEventListener("deviceorientationabsolute", listener);
    }
    this.onDOMContentLoaded = function (listener) {
        this.addEventListener("DOMContentLoaded", listener);
    }
    this.onerror = function (listener) {
        this.addEventListener("error", listener);
    }
    this.onfocus = function (listener) {
        this.addEventListener("focus", listener);
    }
    this.ongamepadconnected = function (listener) {
        this.addEventListener("gamepadconnected", listener);
    }
    this.ongamepaddisconnected = function (listener) {
        this.addEventListener("gamepaddisconnected", listener);
    }
    this.onhashchange = function (listener) {
        this.addEventListener("hashchange", listener);
    }
    this.onlanguagechange = function (listener) {
        this.addEventListener("languagechange", listener);
    }
    this.onload = function (listener) {
        this.addEventListener("load", listener);
    }
    this.onmessage = function (listener) {
        this.addEventListener("message", listener);
    }
    this.onmessageerror = function (listener) {
        this.addEventListener("messageerror", listener);
    }
    this.onoffline = function (listener) {
        this.addEventListener("offline", listener);
    }
    this.ononline = function (listener) {
        this.addEventListener("online", listener);
    }
    this.onorientationchange = function (listener) {
        this.addEventListener("orientationchange", listener);
    }
    this.onpagehide = function (listener) {
        this.addEventListener("pagehide", listener);
    }
    this.onpageshow = function (listener) {
        this.addEventListener("pageshow", listener);
    }
    this.onpaste = function (listener) {
        this.addEventListener("paste", listener);
    }
    this.onpopstate = function (listener) {
        this.addEventListener("popstate", listener);
    }
    this.onrejectionhandled = function (listener) {
        this.addEventListener("rejectionhandled", listener);
    }
    this.onresize = function (listener) {
        this.addEventListener("resize", listener);
    }
    this.onstorage = function (listener) {
        this.addEventListener("storage", listener);
    }
    this.onunhandledrejection = function (listener) {
        this.addEventListener("unhandledrejection", listener);
    }
    this.onunload = function (listener) {
        this.addEventListener("unload", listener);
    }
    this.onvrdisplayactivate = function (listener) {
        this.addEventListener("vrdisplayactivate", listener);
    }
    this.onvrdisplayconnect = function (listener) {
        this.addEventListener("vrdisplayconnect", listener);
    }
    this.onvrdisplaydeactivate = function (listener) {
        this.addEventListener("vrdisplaydeactivate", listener);
    }
    this.onvrdisplaydisconnect = function (listener) {
        this.addEventListener("vrdisplaydisconnect", listener);
    }
    this.onvrdisplaypresentchange = function (listener) {
        this.addEventListener("vrdisplaypresentchange", listener);
    }


    // This section of properties & methods are not documented
    //  in https://developer.mozilla.org/en-US/docs/Web/API/Document but have been seen in the wild

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event
    Object.defineProperty(this, "online", {
        set: function (fn) {
            if (fn.constructor.name === "Function") {
                var function_name = fn.prototype.name;
                if (function_name === undefined) {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                    function_name = "anonymous";
                }
                util_log(this._name + ".online(" + function_name + ")")
                var e = null;
                if (this._events.length == 1) {
                    e = this._events[0]
                } else {
                    e = new Event("online");
                    this._events.push(e);
                }
                util_log("Running function " + function_name + "(" + e + ")");
                fn(e);
            }
            else {
                util_log("That's weird, a non-function was passed to window.online...")
            }
        }
    });

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
    this.load = function (fn) {
        this.onload = fn;
    }

    this.jstiming = function () { }
    this.jstiming.load = function () { }
    this.jstiming.load.tick = function () { }
    this.gapi = function () { }
    this.gapi_onload = function () { }
    this.__GOOGLEAPIS = function () { }
    this.___gu = function () { }
    this.___jsl = function () { }
    this.___gcfg = function () { }
    this.ga = function () { }
    this.ip = "127.0.0.1";

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator#instance_properties

    _defineSingleProperty(this, "activeVRDisplays");
    _defineSingleProperty(this, "appCodeName");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/appName
    _defineSingleProperty(this, "appName");
    this.appName = "Microsoft";

    // This is set in agents.js
    // _defineSingleProperty(this, "appVersion");

    _defineSingleProperty(this, "buildID");
    _defineSingleProperty(this, "clipboard");
    _defineSingleProperty(this, "connection");
    _defineSingleProperty(this, "contacts");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled
    _defineSingleProperty(this, "cookieEnabled");
    this.cookieEnabled = true;

    _defineSingleProperty(this, "credentials");
    _defineSingleProperty(this, "deviceMemory");
    _defineSingleProperty(this, "doNotTrack");
    _defineSingleProperty(this, "geolocation");
    _defineSingleProperty(this, "globalPrivacyControl");
    _defineSingleProperty(this, "hardwareConcurrency");
    _defineSingleProperty(this, "hid");
    _defineSingleProperty(this, "ink");
    _defineSingleProperty(this, "keyboard");
    _defineSingleProperty(this, "language");
    _defineSingleProperty(this, "languages");
    _defineSingleProperty(this, "locks");
    _defineSingleProperty(this, "maxTouchPoints");
    _defineSingleProperty(this, "mediaCapabilities");
    _defineSingleProperty(this, "mediaDevices");
    _defineSingleProperty(this, "mediaSession");
    _defineSingleProperty(this, "mimeTypes");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine
    // Cannot override the window.online property
    // _defineSingleProperty(this, "onLine");

    _defineSingleProperty(this, "oscpu");
    _defineSingleProperty(this, "pdfViewerEnabled");
    _defineSingleProperty(this, "permissions");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform
    _defineSingleProperty(this, "platform");
    this.platform = "Windows";

    _defineSingleProperty(this, "plugins");
    _defineSingleProperty(this, "presentation");
    _defineSingleProperty(this, "product");
    _defineSingleProperty(this, "productSub");
    _defineSingleProperty(this, "serial");
    _defineSingleProperty(this, "serviceWorker");
    _defineSingleProperty(this, "storage");
    _defineSingleProperty(this, "userActivation");

    // This is set in agents.js
    // _defineSingleProperty(this, "userAgent");

    _defineSingleProperty(this, "userAgentData");

    // This is set in agents.js
    // _defineSingleProperty(this, "vendor");

    _defineSingleProperty(this, "vendorSub");
    _defineSingleProperty(this, "virtualKeyboard");
    _defineSingleProperty(this, "wakeLock");
    _defineSingleProperty(this, "webdriver");
    _defineSingleProperty(this, "windowControlsOverlay");
    _defineSingleProperty(this, "xr");

    // Internet Explorer-specific methods
    // https://learn.microsoft.com/en-us/previous-versions/hh772332(v=vs.85)
    this.msSaveOrOpenBlob = async function (content, filename) {
        util_log("msSaveOrOpenBlob(" + content + ", " + filename + ")")
        if (content.constructor.name == "Blob") {
            content = Buffer.from(await content.arrayBuffer())
        }
        _wscript_saved_files[filename] = content;
    }
});

window.toString = () => { return "window" }

// _browser_api is defined in jailme.js
for (let k in _browser_api) {
    if (_browser_api.hasOwnProperty(k))
        if (typeof _browser_api[k] !== 'undefined') {
            window[k] = _browser_api[k];
        }
}

// Defining these properties after window has been created
window.Element = Element;
window.HTMLElement = HTMLElement;
window.Node = Node;

// Defining these globals after window has been created
setTimeout = window.setTimeout.bind(window);
setInterval = window.setInterval.bind(window);
clearInterval = window.clearInterval.bind(window);
clearTimeout = window.clearInterval.bind(window);
addEventListener = window.addEventListener;
parent = window.parent;
alert = window.alert;
navigator = window;

// https://developer.mozilla.org/en-US/docs/Web/API/Document
Document = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "document[" + this.id + "]";

    // TODO: Not sure what the benefit of maintaining a dictionary of these values is, and using
    // _defineProperty to facilitate their manipulation
    this._props = {
        "body": undefined,
        "referrer": "http://example.com/",
        "cookie": "",
        "namespaces": undefined
    };
    for (let k in this._props) {
        _defineProperty(this, k, this._props);
    }

    // Useful private properties
    this._location = location;
    this._content = "";
    this._elements = [];
    this._events = [];

    // Instance methods first, then properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Document#instance_methods

    this.adoptNode = function () {
        util_log(this._name + ".adoptNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.append = function () {
        util_log(this._name + ".append(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.caretPositionFromPoint = function () {
        util_log(this._name + ".caretPositionFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.caretRangeFromPoint = function () {
        util_log(this._name + ".caretRangeFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.clear = function () {
        util_log(this._name + ".clear(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/close
    this.close = function () {
        util_log(this._name + ".close()");
    }

    this.createAttribute = function () {
        util_log(this._name + ".createAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createAttributeNS = function () {
        util_log(this._name + ".createAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createCDATASection = function () {
        util_log(this._name + ".createCDATASection(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createComment = function () {
        util_log(this._name + ".createComment(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createDocumentFragment = function () {
        util_log(this._name + ".createDocumentFragment(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
    this.createElement = function (n) {
        util_log(this._name + ".createElement(" + n + ")");
        let e;
        // If we need to create a custom element with certain attributes, add it's case here
        if (n.toLowerCase() === "iframe") {
            e = new HTMLIFrameElement();
        } else if (n.toLowerCase() === "style") {
            e = new Style();
        } else if (n.toLowerCase() === "button") {
            e = new Button();
        } else if (n.toLowerCase() === "input") {
            e = new Input();
        } else if (n.toLowerCase() === "form") {
            e = new Form();
        } else if (n.toLowerCase() === "script") {
            e = new Script();
        } else {
            e = new Element(n);
        }
        this._elements[this._elements.length] = e;
        return e;
    };

    this.createElementNS = function () {
        util_log(this._name + ".createElementNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createEvent = function () {
        util_log(this._name + ".createEvent(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createExpression = function () {
        util_log(this._name + ".createExpression(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createNodeIterator = function () {
        util_log(this._name + ".createNodeIterator(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createNSResolver = function () {
        util_log(this._name + ".createNSResolver(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createProcessingInstruction = function () {
        util_log(this._name + ".createProcessingInstruction(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createRange = function () {
        util_log(this._name + ".createRange(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode
    this.createtextnode = function (n) {
        util_log(this._name + ".createTextNode(" + n + ")");
        return new Element(n);
    };

    this.createTouch = function () {
        util_log(this._name + ".createTouch(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createTouchList = function () {
        util_log(this._name + ".createTouchList(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createTreeWalker = function () {
        util_log(this._name + ".createTreeWalker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.elementFromPoint = function () {
        util_log(this._name + ".elementFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.elementsFromPoint = function () {
        util_log(this._name + ".elementsFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.enableStyleSheetsForSet = function () {
        util_log(this._name + ".enableStyleSheetsForSet(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate
    this.evaluate = function (n) {
        util_log(this._name + ".evaluate(" + n + ")");
    }

    this.execCommand = function () {
        util_log(this._name + ".execCommand(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.exitFullscreen = function () {
        util_log(this._name + ".exitFullscreen(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.exitPictureInPicture = function () {
        util_log(this._name + ".exitPictureInPicture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.exitPointerLock = function () {
        util_log(this._name + ".exitPointerLock(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAnimations = function () {
        util_log(this._name + ".getAnimations(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById
    this.getElementById = function (n) {
        util_log(this._name + ".getElementById(" + n + ")");
        if (n === undefined) {
            return this._elements[0];
        } else if (n === this) {
            return this;
        } else if (n === window) {
            return window;
        } else if (n.startsWith("#")) {
            n = n.slice(1,);
        }

        // We're going to loop through this three times, based on priority...
        // _nodename is a better representation of ID than _id
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("_nodename" in e && ("" + e._nodename).toLowerCase() === n.toLowerCase()) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _nodename");
                return e;
            }
        }

        // If "id" is in attributes, we should try that
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("id" in e._attributes && e._attributes["id"].toLowerCase() == n.toLowerCase()) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _attributes['id']");
                return e;
            }
        }

        // If "class" is in attributes, we should try that too
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("class" in e._attributes && e._attributes["class"].toLowerCase().includes(n.toLowerCase())) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _attributes['class']");
                return e;
            }
        }

        // Heck, let's just look for interesting elements
        elements_of_interest = [];
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("download" in e._attributes || "href" in e._attributes || "src" in e._attributes || "text" in e._attributes) {
                elements_of_interest.push(e);
            }
        }

        if (elements_of_interest.length > 0) {
            util_log(this._name + ".getElementById(" + n + ") => first interesting element (" + elements_of_interest[0] + ")");
            return elements_of_interest[0];
        }
        util_log(this._name + ".getElementById(" + n + ") => null");
        // Bad hack here because it doesn't really matter
        return this._elements[0];
    };

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
    this.getElementsByClassName = function (n) {
        let ret = []
        util_log(this._name + ".getElementsByClassName(" + n + ")");
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if (e.class.toLowerCase() === n.toLowerCase()) {
                ret[ret.length] = e;
            }
        }
        util_log(this._name + ".getElementsByClassName(" + n + ") ... " + ret.length + " found");
        return ret;
    };

    this.getElementsByName = function () {
        util_log(this._name + ".getElementsByName(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName
    this.getElementsByTagName = function (n) {
        let ret = []
        util_log(this._name + ".getElementsByTagName(" + n + ")");
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if (e.elementName.toLowerCase() === n.toLowerCase()) {
                ret[ret.length] = e;
            }
        }
        util_log(this._name + ".getElementsByTagName(" + n + ") ... " + ret.length + " found");
        return ret;
    };

    this.getElementsByTagNameNS = function () {
        util_log(this._name + ".getElementsByTagNameNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getSelection = function () {
        util_log(this._name + ".getSelection(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasFocus = function () {
        util_log(this._name + ".hasFocus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasStorageAccess = function () {
        util_log(this._name + ".hasStorageAccess(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.importNode = function () {
        util_log(this._name + ".importNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.mozSetImageElement = function () {
        util_log(this._name + ".mozSetImageElement(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/open
    this.open = function () {
        util_log(this._name + ".open()");
        return this;
    }

    this.prepend = function () {
        util_log(this._name + ".prepend(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryCommandEnabled = function () {
        util_log(this._name + ".queryCommandEnabled(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryCommandState = function () {
        util_log(this._name + ".queryCommandState(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryCommandSupported = function () {
        util_log(this._name + ".queryCommandSupported(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
    this.queryselector = function (n) {
        util_log(this._name + ".querySelector(" + n + ")");
        if (n === undefined) {
            return this._elements[0];
        }
        else if (n[0] === "#") {
            return this.getElementById(n.slice(1,));
        }
        else if (n[0] === ".") {
            return this.getElementById(n.slice(1,));
        }
        else {
            return this.getElementById(n);
        }
    };

    this.querySelectorAll = function () {
        util_log(this._name + ".querySelectorAll(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.releaseCapture = function () {
        util_log(this._name + ".releaseCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.replaceChildren = function () {
        util_log(this._name + ".replaceChildren(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestStorageAccess = function () {
        util_log(this._name + ".requestStorageAccess(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/write
    this.write = function (c) {
        if (c === null) {
            util_log(this._name + ".write(null)");
            return;
        }
        util_log(this._name + ".write(content) " + c.length + " bytes");
        util_log("=> '" + c + "'");
        _content = c;
        _browser_documents[_browser_documents.length] = c;
    };

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln
    this.writeln = function (c) {
        util_log(this._name + ".writeln(content) " + c.length + " bytes");
        util_log("=> '" + c + "'");
        _content = c;
        _browser_documents[_browser_documents.length] = c;
    };

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Document#instance_properties

    _defineSingleProperty(this, "activeElement")
    _defineSingleProperty(this, "adoptedStyleSheets")
    _defineSingleProperty(this, "alinkColor");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/all
    this.all = this._elements;

    _defineSingleProperty(this, "anchors");
    _defineSingleProperty(this, "applets");
    _defineSingleProperty(this, "bgColor");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/body
    this.body = this.createElement("body");

    _defineSingleProperty(this, "characterSet");
    _defineSingleProperty(this, "childElementCount");
    _defineSingleProperty(this, "children");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode
    this.compatMode = function () { }

    _defineSingleProperty(this, "contentType");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript
    this.currentScript = this.createElement("script");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-src
    this.currentScript.src = _script_name;

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView
    this.defaultView = this.window;

    _defineSingleProperty(this, "designMode");
    _defineSingleProperty(this, "dir");
    _defineSingleProperty(this, "doctype");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement
    this.documentElement = this.createElement("html");

    _defineSingleProperty(this, "documentURI");
    _defineSingleProperty(this, "domain");
    _defineSingleProperty(this, "embeds");
    _defineSingleProperty(this, "featurePolicy");
    _defineSingleProperty(this, "fgColor");
    _defineSingleProperty(this, "firstElementChild");
    _defineSingleProperty(this, "fonts");
    _defineSingleProperty(this, "forms");
    _defineSingleProperty(this, "fragmentDirective");
    _defineSingleProperty(this, "fullscreen");
    _defineSingleProperty(this, "fullscreenElement");
    _defineSingleProperty(this, "fullscreenEnabled");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/head
    this.head = this.createElement("head");
    // Append the head first, then the body
    this.documentElement.appendchild(this.head);
    this.documentElement.appendchild(this.body);

    _defineSingleProperty(this, "hidden");
    _defineSingleProperty(this, "images");
    _defineSingleProperty(this, "implementation");
    _defineSingleProperty(this, "lastElementChild");
    _defineSingleProperty(this, "lastModified");
    _defineSingleProperty(this, "lastStyleSheetSet");
    _defineSingleProperty(this, "linkColor");
    _defineSingleProperty(this, "links");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/location
    Object.defineProperty(this, "location", {
        get: function () {
            util_log("document.location.get()");
            return this._location;
        },
        set: function (n) {
            util_log("document.location.set(" + n + ")");
            this._location.href = n;
        }
    })

    _defineSingleProperty(this, "msCapsLockWarningOff");
    _defineSingleProperty(this, "pictureInPictureElement");
    _defineSingleProperty(this, "pictureInPictureEnabled");
    _defineSingleProperty(this, "plugins");
    _defineSingleProperty(this, "pointerLockElement");
    _defineSingleProperty(this, "preferredStyleSheetSet");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState
    this.readyState = function (n) {
        util_log("readyState(" + n + ")");
    }

    _defineSingleProperty(this, "rootElement");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts
    this.scripts = function (n) {
        util_log("Script: " + n);
    }

    _defineSingleProperty(this, "scrollingElement");
    _defineSingleProperty(this, "selectedStyleSheetSet");
    _defineSingleProperty(this, "styleSheets");
    _defineSingleProperty(this, "styleSheetSets");
    _defineSingleProperty(this, "timeline");
    _defineSingleProperty(this, "title");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/URL
    this.URL = location;

    _defineSingleProperty(this, "visibilityState");
    _defineSingleProperty(this, "vlinkColor");
    _defineSingleProperty(this, "xmlEncoding");
    _defineSingleProperty(this, "xmlVersion");

    // This section of properties & methods are not documented
    //  in https://developer.mozilla.org/en-US/docs/Web/API/Document but have been seen in the wild

    this.namespaces = new Collection();

    this._addElementById = function (id, content) {
        let e = new Element("div");
        e.id = _object_id;
        e.innerHTML = content;
        this._elements[this._elements.length] = e;
    };

    this._addElementByClass = function (cls, content) {
        let e = new Element("div");
        e.class = cls;
        e.innerHTML = content;
        this._elements[this._elements.length] = e;
    };

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes

    this.onabort = function (listener) {
        this.addEventListener("abort", listener);
    }
    this.onautocomplete = function (listener) {
        this.addEventListener("autocomplete", listener);
    }
    this.onautocompleteerror = function (listener) {
        this.addEventListener("autocompleteerror", listener);
    }
    this.onblur = function (listener) {
        this.addEventListener("blur", listener);
    }
    this.oncancel = function (listener) {
        this.addEventListener("cancel", listener);
    }
    this.oncanplay = function (listener) {
        this.addEventListener("canplay", listener);
    }
    this.oncanplaythrough = function (listener) {
        this.addEventListener("canplaythrough", listener);
    }
    this.onchange = function (listener) {
        this.addEventListener("change", listener);
    }
    this.onclick = function (listener) {
        this.addEventListener("click", listener);
    }
    this.onclose = function (listener) {
        this.addEventListener("close", listener);
    }
    this.oncontextmenu = function (listener) {
        this.addEventListener("contextmenu", listener);
    }
    this.oncuechange = function (listener) {
        this.addEventListener("cuechange", listener);
    }
    this.ondblclick = function (listener) {
        this.addEventListener("dblclick", listener);
    }
    this.ondrag = function (listener) {
        this.addEventListener("drag", listener);
    }
    this.ondragend = function (listener) {
        this.addEventListener("dragend", listener);
    }
    this.ondragenter = function (listener) {
        this.addEventListener("dragenter", listener);
    }
    this.ondragleave = function (listener) {
        this.addEventListener("dragleave", listener);
    }
    this.ondragover = function (listener) {
        this.addEventListener("dragover", listener);
    }
    this.ondragstart = function (listener) {
        this.addEventListener("dragstart", listener);
    }
    this.ondrop = function (listener) {
        this.addEventListener("drop", listener);
    }
    this.ondurationchange = function (listener) {
        this.addEventListener("durationchange", listener);
    }
    this.onemptied = function (listener) {
        this.addEventListener("emptied", listener);
    }
    this.onended = function (listener) {
        this.addEventListener("ended", listener);
    }
    this.onerror = function (listener) {
        this.addEventListener("error", listener);
    }
    this.onfocus = function (listener) {
        this.addEventListener("focus", listener);
    }
    this.oninput = function (listener) {
        this.addEventListener("input", listener);
    }
    this.oninvalid = function (listener) {
        this.addEventListener("invalid", listener);
    }
    this.onkeydown = function (listener) {
        this.addEventListener("keydown", listener);
    }
    this.onkeypress = function (listener) {
        this.addEventListener("keypress", listener);
    }
    this.onkeyup = function (listener) {
        this.addEventListener("keyup", listener);
    }
    this.onload = function (listener) {
        this.addEventListener("load", listener);
    }
    this.onloadeddata = function (listener) {
        this.addEventListener("loadeddata", listener);
    }
    this.onloadedmetadata = function (listener) {
        this.addEventListener("loadedmetadata", listener);
    }
    this.onloadstart = function (listener) {
        this.addEventListener("loadstart", listener);
    }
    this.onmousedown = function (listener) {
        this.addEventListener("mousedown", listener);
    }
    this.onmouseenter = function (listener) {
        this.addEventListener("mouseenter", listener);
    }
    this.onmouseleave = function (listener) {
        this.addEventListener("mouseleave", listener);
    }
    this.onmousemove = function (listener) {
        this.addEventListener("mousemove", listener);
    }
    this.onmouseout = function (listener) {
        this.addEventListener("mouseout", listener);
    }
    this.onmouseover = function (listener) {
        this.addEventListener("mouseover", listener);
    }
    this.onmouseup = function (listener) {
        this.addEventListener("mouseup", listener);
    }
    this.onmousewheel = function (listener) {
        this.addEventListener("mousewheel", listener);
    }
    this.onpause = function (listener) {
        this.addEventListener("pause", listener);
    }
    this.onplay = function (listener) {
        this.addEventListener("play", listener);
    }
    this.onplaying = function (listener) {
        this.addEventListener("playing", listener);
    }
    this.onprogress = function (listener) {
        this.addEventListener("progress", listener);
    }
    this.onratechange = function (listener) {
        this.addEventListener("ratechange", listener);
    }
    this.onreset = function (listener) {
        this.addEventListener("reset", listener);
    }
    this.onresize = function (listener) {
        this.addEventListener("resize", listener);
    }
    this.onscroll = function (listener) {
        this.addEventListener("scroll", listener);
    }
    this.onseeked = function (listener) {
        this.addEventListener("seeked", listener);
    }
    this.onseeking = function (listener) {
        this.addEventListener("seeking", listener);
    }
    this.onselect = function (listener) {
        this.addEventListener("select", listener);
    }
    this.onshow = function (listener) {
        this.addEventListener("show", listener);
    }
    this.onsort = function (listener) {
        this.addEventListener("sort", listener);
    }
    this.onstalled = function (listener) {
        this.addEventListener("stalled", listener);
    }
    this.onsubmit = function (listener) {
        this.addEventListener("submit", listener);
    }
    this.onsuspend = function (listener) {
        this.addEventListener("suspend", listener);
    }
    this.ontimeupdate = function (listener) {
        this.addEventListener("timeupdate", listener);
    }
    this.ontoggle = function (listener) {
        this.addEventListener("toggle", listener);
    }
    this.onvolumechange = function (listener) {
        this.addEventListener("volumechange", listener);
    }
    this.onwaiting = function (listener) {
        this.addEventListener("waiting", listener);
    }

    // InternetExplorer-specific methods

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/dn255470(v=vs.85)
    this.documentMode = function () { }

    // https://learn.microsoft.com/en-us/previous-versions/hh771792(v=vs.85)
    this.createstylesheet = function (n) {
        util_log(this._name + ".createStyleSheet(" + n + ")");
        style_element = this.createElement("style");
        style_element._attributes["styleSheet"]["cssText"] = n;
        return style_element;
    };

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752535(v=vs.85)
    this.attachEvent = function (n) {
        util_log("attachEvent(" + n + ")");
    }

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752539(v=vs.85)
    this.detachEvent = function (n) {
        util_log("detachEvent(" + n + ")");
    }

    // https://learn.microsoft.com/en-us/previous-versions/hh771931(v=vs.85)
    this.fireEvent = function (n) {
        util_log("fireEvent(" + n + ")");
    }

    // EventTarget

    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#instance_methods
    this.addEventListener = function (type, listener) {
        if (["Function", "AsyncFunction"].includes(listener.constructor.name)) {
            if (listener.prototype == undefined) {
                function_name = "anonymous";
            } else {
                var function_name = listener.prototype.name;
                if (function_name === undefined) {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                    function_name = "anonymous";
                }
            }
            util_log(this._name + ".addEventListener(" + type + ", " + function_name + ")")
            var e = null;
            if (this._events.length == 1) {
                e = this._events[0]
            } else {
                e = new Event(type);
                this._events.push(e);
            }
            util_log("Running function " + function_name + "(" + e + ")");
            listener(e);
        } else {
            util_log(this._name + ".addEventListener(" + type + ", " + _truncateOutput(listener) + ")")
        }
    }
    this.removeEventListener = function () { }
    this.dispatchEvent = function () { }

    // Deprecated

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event
    this.keypress = function (listener) {
        return this.addEventListener("keypress", listener);
    }

    // jQuery specific
    // https://learn.jquery.com/using-jquery-core/document-ready/
    this.ready = function (fn) {
        util_log(this._name + ".ready(" + _truncateOutput(fn) + ")");
        if (fn.constructor.name === "Function") {
            var function_name = fn.prototype.name;
            if (function_name === undefined) {
                function_name = "anonymous";
            }
            util_log("Running function " + function_name + "()");
            fn();
        }
    }
});
Document.prototype = Object.create(Node.prototype);
Document.prototype.constructor = Document;
Document.toString = Document.toJSON = () => { return "Document" }

document = _proxy(new Document());

// create a stylesheet element with the contents from the extracted CSS in the HTML
try {
    stylesheet_contents = fs.readFileSync(_stylesheet, "utf8");
}
catch(err) {
    stylesheet_contents = "";
}
document.createstylesheet(stylesheet_contents)

document.toString = () => { return "document" }

// Set the document property after the Document object instance has been created
window.document = document;

window.URL = URL;

// https://api.jquery.com/Jquery/#jQuery1
$ = function (thing) {
    util_log("$(" + thing + ")");
    if (thing == this) {
        thing = this.id;
    }
    return document.getElementById(thing);
};

// https://api.jquery.com/Jquery.ajax/
$.ajax = function (url, settings) {
    util_log("$.ajax(" + JSON.stringify(url) + ")");
    ret = _proxy(new XMLHttpRequest(url));
    ret.open(url.type, url.url);
    // See "jqXHR.done(function( data, textStatus, jqXHR ) {});" in https://api.jquery.com/Jquery.ajax/
    ret.done = function (fn) {
        util_log("$.ajax(" + JSON.stringify(url) + ").done(" + _truncateOutput(fn) + ")");
        if (fn.constructor.name === "Function") {
            var function_name = fn.prototype.name;
            if (function_name === undefined) {
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                function_name = "anonymous";
            }
            util_log("Running function " + function_name + "()");
            // window == data
            fn(window);
        }
    }
    return ret;
};

// https://api.jquery.com/jquery.getJSON/
$.getJSON = function (url, data, success) {
    util_log("$.getJSON(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")")
    if (data !== undefined && data.constructor.name === "Function") {
        var function_name = data.prototype.name;
        if (function_name === undefined) {
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
            function_name = "anonymous";
        }
        util_log("Running function " + function_name + "()");
        var ret = _proxy(new XMLHttpRequest());
        ret.open("get", url);
        ret.send();
        if (is_domain_geo(url)) {
            data(domain_geo_response);
        } else {
            data();
        }
    }
};

// https://api.jquery.com/jQuery.post/
$.post = function (url, data, success, dataType) {
    util_log("$.post(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")")
    var ret = _proxy(new XMLHttpRequest());
    ret.open("post", url);
    ret.onreadystatechange = success;
    ret.send(data);
};

// https://stackoverflow.com/questions/4083351/what-does-jquery-fn-mean
$.fn = function () {
    util_log("$.fn(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")")
    return this;
}

// https://api.jquery.com/jQuery.support/
// https://www.w3schools.com/jquery/prop_jquery_support.asp
$.support = {
    "ajax": false,
    "boxModel": false,
    "changeBubbles": false,
    "checkClone": false,
    "checkOn": false,
    "cors": false,
    "cssFloat": false,
    "hrefNormalized": false,
    "htmlSerialize": false,
    "leadingWhitespace": false,
    "noCloneChecked": false,
    "noCloneEvent": false,
    "opacity": false,
    "optDisabled": false,
    "optSelected": false,
    "scriptEval": false,
    "style": false,
    "submitBubbles": false,
    "tbody": false,
}

$.toString = () => { return "jQuery" }
jQuery = $;

let Image = function (w, h) {
    Element.call(this, "Image");
    util_log("Image(" + w + ", " + h + ")");

    this._width = w;
    this._height = h;
    _defineSingleProperty(this, "width", "_width");
    _defineSingleProperty(this, "height", "_height");
}
Image.prototype = Object.create(Element.prototype);
Image.prototype.constructor = Image;

// https://developer.mozilla.org/en-US/docs/Web/API/Event
Event = function () {
    this._id = _object_id++;
    this._name = "Event[" + this._id + "]";
    this.origin = "null";
    this.data = "get";
    this.source = window;
    util_log("new " + this._name + "(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))

    // https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
    this.preventDefault = function () {
        util_log(this._name + ".preventDefault(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    }
};

is_domain_geo = function (url) {
    let domain = new URL(url);
    domain = domain.hostname;
    if (domain.includes("ip") || domain.includes("geo")) {
        util_log("Domain '" + domain + "' is for a GeoIP service.")
        return true;
    }
    return false;
}

const domain_geo_response = {
    "ip": "127.0.0.1",
    "continent_code": "NA",
    "country": "Canada",
    "country_code": "CA",
    "region": "Ottawa",
    "region_code": "OW",
    "city": "Ottawa",
    "org": "organization",
    "postal": "1A1 A1A"
};

// top must be assigned at the bottom of this file, otherwise everything becomes a reference to it;
// top is actually the sandbox environment itself. Mind blown.
top = this;
