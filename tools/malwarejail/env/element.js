/*
    element.js contains the basic building blocks for the HTMLElement -> Element -> Node -> EventTarget relationship
*/

util_log("Preparing sandbox to emulate Element-related interfaces.");

// Useful constants

// This regular expression is used for finding base64-encoded blobs
const encoded_base64_regex = new RegExp("data:(?:[^;]+;)+base64,(.*)");

// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget
EventTarget = _proxy(function () {
    // Key properties for MalwareJail
    this._id = _object_id++;
    this._name = "EventTarget[" + this._id + "]";
    util_log("new " + this._name + "()");

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    this.addEventListener = function (type, listener) {
        document.addEventListener(type, listener);
    }
    this.dispatchEvent = function () {
        util_log(this._name + ".dispatchEvent(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeEventListener = function () {
        util_log(this._name + ".removeEventListener(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
});
EventTarget.toString = EventTarget.toJSON = () => {
    return "EventTarget"
}

// https://developer.mozilla.org/en-US/docs/Web/API/Node
// Node must be declared before Element since Element inherits Node
Node = _proxy(function () {
    // Inherit EventTarget
    EventTarget.call(this);

    // Key properties for MalwareJail
    this._name = "Node[" + this._id + "]";
    this._attributes = {};
    this._children = [];
    util_log("new " + this._name + "()");

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/Node#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild
    this.appendChild = function (e) {
        util_log(this._name + ".appendChild(" + e._name + ")");
        if (this._children.length === 0) {
            this.firstChild = e;
        }
        this._children[this._children.length] = e;
        e.parentNode = this;
        e.parentElement = this;
        if (e._attributes["src"]) {
            match = e._attributes["src"].match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding...");
                _wscript_saved_files[e._name] = Buffer.from(match[1], 'base64');
            }
            else
                _wscript_saved_files[e._name] = e._attributes["src"];
        }
        return e;
    }

    this.cloneNode = function () {
        util_log(this._name + ".cloneNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.compareDocumentPosition = function () {
        util_log(this._name + ".compareDocumentPosition(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.contains = function () {
        util_log(this._name + ".contains(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getRootNode = function () {
        util_log(this._name + ".getRootNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasChildNodes = function () {
        util_log(this._name + ".hasChildNodes(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
    this.insertBefore = function (newNode, referenceNode) {
        util_log(this._name + ".insertBefore(" + newNode + ", " + referenceNode + ")");
    }

    this.isDefaultNamespace = function () {
        util_log(this._name + ".isDefaultNamespace(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.isEqualNode = function () {
        util_log(this._name + ".isEqualNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.isSameNode = function () {
        util_log(this._name + ".isSameNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.lookupNamespaceURI = function () {
        util_log(this._name + ".lookupNamespaceURI(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.lookupPrefix = function () {
        util_log(this._name + ".lookupPrefix(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.normalize = function () {
        util_log(this._name + ".normalize(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild
    this.removeChild = function (e) {
        util_log(this._name + ".removeChild(" + e._name + ")");
        return e;
    }

    this.replaceChild = function () {
        util_log(this._name + ".replaceChild(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Node#instance_properties

    _defineSingleProperty(this, "baseURI");

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes
    // _defineSingleProperty(this, "childNodes");
    // Point at the _children property
    this.childNodes = this._children;

    _defineSingleProperty(this, "firstChild");
    _defineSingleProperty(this, "isConnected");
    _defineSingleProperty(this, "lastChild");
    _defineSingleProperty(this, "nextSibling");
    _defineSingleProperty(this, "nodeName");

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
    // If this is called, it is always an Element
    // _defineSingleProperty(this, "nodeType");
    this.nodeType = 1

    _defineSingleProperty(this, "nodeValue");
    _defineSingleProperty(this, "ownerDocument");
    _defineSingleProperty(this, "parentElement");

    // Setting the parent node to itself because we're wild like that
    _defineSingleProperty(this, "parentNode");
    this._parentNode = this;

    _defineSingleProperty(this, "previousSibling");

    // https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent
    Object.defineProperty(this, "textContent", {
        get: function () {
            item_to_return = undefined;
            if (this.text) {
                item_to_return = this.text
            } else if (this.href) {
                item_to_return = this.href
            } else if (this.innerHTML) {
                item_to_return = this.innerHTML
            } else if (this._attributes["text"]) {
                item_to_return = this._attributes["text"]
            } else if (this._attributes["href"]) {
                item_to_return = this._attributes["href"]
            }
            util_log(this._name + ".textContent returns '" + item_to_return + "'");
            if (item_to_return && typeof item_to_return !== "function") {
                match = item_to_return.match(encoded_base64_regex);
                if (match) {
                    util_log("Base64 match, decoding...");
                    _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
                }
            }
            return item_to_return;
        },
        set: function (v) {
            util_log(this._name + ".textContent = '" + v + "'");
            this._text = v;
            match = this._text.match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding...");
                _wscript_saved_files[this._name] = Buffer.from(match[1], 'base64');
            }
            return this._text;
        }
    });

    // Attr interface usage

    // https://developer.mozilla.org/en-US/docs/Web/API/Attr
    this.attr = function (name, value) {
        util_log(this._name + ".attr(" + name + ", " + value + ")");
        this._attributes[name] = value;
    }
});
Node.prototype = Object.create(EventTarget.prototype);
Node.prototype.constructor = Node;
Node.toString = Node.toJSON = () => {
    return "Node"
}


// https://developer.mozilla.org/en-US/docs/Web/API/element
Element = _proxy(function (n) {
    // Inherit Node
    Node.call(this);

    // Key properties for MalwareJail
    this._name = "Element[" + this._id + "]<" + n + ">";
    this._innerHTML = "";
    this._outerHTML = "";
    this._text = "";
    util_log("new " + this._name + "()");

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/element#instance_methods

    this.after = function () {
        util_log(this._name + ".after(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/animate
    this.animate = function (keyframes, options) {
        util_log(this._name + ".animate(" + JSON.stringify(keyframes) + ", " + options + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/append
    this.append = function () {
        for (param of arguments) {
           this._children.push(param);
           util_log(this._name + ".append(" + param + ")");
       }
   }

    this.attachShadow = function () {
        util_log(this._name + ".attachShadow(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.before = function () {
        util_log(this._name + ".before(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.closest = function () {
        util_log(this._name + ".closest(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.computedStyleMap = function () {
        util_log(this._name + ".computedStyleMap(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations
    this.getAnimations = function (options) {
        document.getAnimations(options);
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute
    this.getAttribute = function (attributeName) {
        let attributeValue;
        if (attributeName in this) {
            attributeValue = this[attributeName];
        } else {
            attributeValue = this._attributes[attributeName];
        }
        util_log(this._name + ".getAttribute(" + attributeName + ") => (" + typeof attributeValue + ") '" + attributeValue + "'");
        return attributeValue;
    }

    this.getAttributeNames = function () {
        util_log(this._name + ".getAttributeNames(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAttributeNode = function () {
        util_log(this._name + ".getAttributeNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAttributeNodeNS = function () {
        util_log(this._name + ".getAttributeNodeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAttributeNS = function () {
        util_log(this._name + ".getAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getBoundingClientRect = function () {
        util_log(this._name + ".getBoundingClientRect(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getClientRects = function () {
        util_log(this._name + ".getClientRects(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName
    this.getElementsByClassName = function (names) {
        let ret = []
        util_log(this._name + ".getElementsByClassName(" + n + ")");
        for (i = 0; i < this._children.length; i++) {
            let e = this._children[i];
            if (e.class.toLowerCase() === n.toLowerCase()) {
                ret[ret.length] = e;
            }
        }
        util_log(this._name + ".getElementsByClassName(" + n + ") ... " + ret.length + " found");
        return ret;
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName
    this.getElementsByTagName = function (tagName) {
        let ret = []
        util_log(this._name + ".getElementsByTagName(" + tagName + ")");
        for (i = 0; i < this._children.length; i++) {
            let e = this._children[i];
            if (e.elementName.toLowerCase() === tagName.toLowerCase()) {
                ret[ret.length] = e;
            }
        }
        util_log(this._name + ".getElementsByTagName(" + tagName + ") ... " + ret.length + " found");
        return ret;
    };

    this.getElementsByTagNameNS = function () {
        util_log(this._name + ".getElementsByTagNameNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasAttribute = function () {
        util_log(this._name + ".hasAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasAttributeNS = function () {
        util_log(this._name + ".hasAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasAttributes = function () {
        util_log(this._name + ".hasAttributes(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasPointerCapture = function () {
        util_log(this._name + ".hasPointerCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.insertAdjacentElement = function () {
        util_log(this._name + ".insertAdjacentElement(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
    this.insertAdjacentHTML = function (position, text) {
        util_log(this._name + ".insertAdjacentHTML(" + position + ", " + text + ")");
        // Since this method is the equivalent of writing to the DOM, we need to do the following:
        document.write(text);
    }

    this.insertAdjacentText = function () {
        util_log(this._name + ".insertAdjacentText(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.matches = function () {
        util_log(this._name + ".matches(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.msZoomTo = function () {
        util_log(this._name + ".msZoomTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.prepend = function () {
        util_log(this._name + ".prepend(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.querySelector = function () {
        util_log(this._name + ".querySelector(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.querySelectorAll = function () {
        util_log(this._name + ".querySelectorAll(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.releasePointerCapture = function () {
        util_log(this._name + ".releasePointerCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.remove = function () {
        util_log(this._name + ".remove(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeAttribute = function () {
        util_log(this._name + ".removeAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeAttributeNode = function () {
        util_log(this._name + ".removeAttributeNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.removeAttributeNS = function () {
        util_log(this._name + ".removeAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.replaceChildren = function () {
        util_log(this._name + ".replaceChildren(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.replaceWith = function () {
        util_log(this._name + ".replaceWith(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestFullscreen = function () {
        util_log(this._name + ".requestFullscreen(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestPointerLock = function () {
        util_log(this._name + ".requestPointerLock(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scroll = function () {
        util_log(this._name + ".scroll(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollBy = function () {
        util_log(this._name + ".scrollBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollIntoView = function () {
        util_log(this._name + ".scrollIntoView(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollIntoViewIfNeeded = function () {
        util_log(this._name + ".scrollIntoViewIfNeeded(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollTo = function () {
        util_log(this._name + ".scrollTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute
    this.setAttribute = function (n, v) {
        if (n.slice(0,5) === "data-") {
            var key = n.slice(5,);
            this._dataset = {};
            this._dataset[key] = v;
            util_log(this._name + "._dataset[" + key + "] = " + _truncateOutput(this._dataset[key]))
        } else if (n in this) {
            this[n] = v;
        } else {
            util_log(">>> FIXME: " + this._name + "." + n + " is not defined");
            util_log(this._name + "._attributes[" + n + "] = '" + _truncateOutput(v) + "'");
            this._attributes[n] = v;
        }
    }

    this.setAttributeNode = function () {
        util_log(this._name + ".setAttributeNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setAttributeNodeNS = function () {
        util_log(this._name + ".setAttributeNodeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setAttributeNS = function () {
        util_log(this._name + ".setAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setCapture = function () {
        util_log(this._name + ".setCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setHTML = function () {
        util_log(this._name + ".setHTML(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setPointerCapture = function () {
        util_log(this._name + ".setPointerCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.toggleAttribute = function () {
        util_log(this._name + ".toggleAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/element#instance_properties

    _defineSingleProperty(this, "ariaAtomic");
    _defineSingleProperty(this, "ariaAutoComplete");
    _defineSingleProperty(this, "ariaBusy");
    _defineSingleProperty(this, "ariaChecked");
    _defineSingleProperty(this, "ariaColCount");
    _defineSingleProperty(this, "ariaColIndex");
    _defineSingleProperty(this, "ariaColSpan");
    _defineSingleProperty(this, "ariaCurrent");
    _defineSingleProperty(this, "ariaDescription");
    _defineSingleProperty(this, "ariaDisabled");
    _defineSingleProperty(this, "ariaExpanded");
    _defineSingleProperty(this, "ariaHasPopup");
    _defineSingleProperty(this, "ariaHidden");
    _defineSingleProperty(this, "ariaKeyShortcuts");
    _defineSingleProperty(this, "ariaLabel");
    _defineSingleProperty(this, "ariaLevel");
    _defineSingleProperty(this, "ariaLive");
    _defineSingleProperty(this, "ariaModal");
    _defineSingleProperty(this, "ariaMultiLine");
    _defineSingleProperty(this, "ariaMultiSelectable");
    _defineSingleProperty(this, "ariaOrientation");
    _defineSingleProperty(this, "ariaPlaceholder");
    _defineSingleProperty(this, "ariaPosInSet");
    _defineSingleProperty(this, "ariaPressed");
    _defineSingleProperty(this, "ariaReadOnly");
    _defineSingleProperty(this, "ariaRelevant");
    _defineSingleProperty(this, "ariaRequired");
    _defineSingleProperty(this, "ariaRoleDescription");
    _defineSingleProperty(this, "ariaRowCount");
    _defineSingleProperty(this, "ariaRowIndex");
    _defineSingleProperty(this, "ariaRowSpan");
    _defineSingleProperty(this, "ariaSelected");
    _defineSingleProperty(this, "ariaSetSize");
    _defineSingleProperty(this, "ariaSort");
    _defineSingleProperty(this, "ariaValueMax");
    _defineSingleProperty(this, "ariaValueMin");
    _defineSingleProperty(this, "ariaValueNow");
    _defineSingleProperty(this, "ariaValueText");
    _defineSingleProperty(this, "assignedSlot");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "attributes");
    this.attributes = this._attributes;

    _defineSingleProperty(this, "childElementCount");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/children
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "children");
    this.children = this._children;

    _defineSingleProperty(this, "classList");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/className
    Object.defineProperty(this, "className", {
        get: function () {
            var classname = undefined;

            if ("class" in this._attributes) {
                classname = this._attributes["class"];
            } else if (this.class) {
                classname = this.class;
            }

            if (classname) {
                util_log(this._name + ".className() => (" + typeof classname + ") => " + classname);
                return classname;
            }
        },
        set: function (value) {
            this.class = value;
        }
    });

    _defineSingleProperty(this, "clientHeight");
    _defineSingleProperty(this, "clientLeft");
    _defineSingleProperty(this, "clientTop");
    _defineSingleProperty(this, "clientWidth");
    _defineSingleProperty(this, "elementTiming");
    _defineSingleProperty(this, "firstElementChild");

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/id
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "id");
    this.id = this._id;

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML
    Object.defineProperty(this, "innerHTML", {
        get: function () {
            let innerHTML = "";
            if (this._innerHTML) {
                util_log(this._name + ".innerHTML returns '" + _truncateOutput(this._innerHTML) + "'");
                innerHTML = this._innerHTML;
            } else if (this._text) {
                util_log(this._name + ".innerHTML returns '" + _truncateOutput(this._text) + "'");
                innerHTML = this._text;
            }
            return innerHTML;
        },
        set: function (v) {
            util_log(this._name + ".innerHTML = '" + v + "'");
            this._innerHTML = _decodeHTML(v);
            document.write(this._innerHTML);
        }
    });

    _defineSingleProperty(this, "lastElementChild");
    _defineSingleProperty(this, "localName");
    _defineSingleProperty(this, "msRegionOverflow");
    _defineSingleProperty(this, "namespaceURI");
    _defineSingleProperty(this, "nextElementSibling");

    // Point to _outerHTML property
    // _defineSingleProperty(this, "outerhtml");
    this.outerhtml = this._outerHTML;

    _defineSingleProperty(this, "part");
    _defineSingleProperty(this, "prefix");
    _defineSingleProperty(this, "previousElementSibling");
    _defineSingleProperty(this, "scrollHeight");
    _defineSingleProperty(this, "scrollLeft");
    _defineSingleProperty(this, "scrollLeftMax");
    _defineSingleProperty(this, "scrollTop");
    _defineSingleProperty(this, "scrollTopMax");
    _defineSingleProperty(this, "scrollWidth");
    _defineSingleProperty(this, "shadowRoot");
    _defineSingleProperty(this, "slot");

    // Point tagName to _nodename property
    _defineSingleProperty(this, "tagName", "_nodename");
    this.tagname = n;

    // XML DOM

    // https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms762308(v=vs.85)
    Object.defineProperty(this, "nodetypedvalue", {
        get: function () {
            util_log(this._name + ".nodeTypedValue");
            if (this.dataType === "bin.base64") {
                //return new Buffer(this.text, 'base64').toString('binary');
                return Buffer.from(this._text, "base64");
            } else {
                return this._text;
            }
        }
    });

    // Helpful methods
    this.toString = function () {
        return this._name;
    }

    // Global attributes

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#style
    // _defineSingleProperty(this, "style", "_style");
    this.style = new HTMLStyleElement();

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is
    this.is = function (attr) {
        util_log(this._name + ".is(" + attr + ")");
        return true;
    };

    // HTMLCanvasElement

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
    this.getContext = function () {
        util_log(this._name + ".getContext(" + arguments + ")");
    }

    // Internet Explorer API

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa703983(v=vs.85)
    this.doScroll = function () {
        util_log(this._name + ".doScroll(" + arguments + ")");
    }

    // jQuery

    // https://api.jquery.com/hide/
    this.hide = function () {
        util_log(this._name + ".hide()");
    }

    // https://api.jquery.com/show/
    this.show = function () {
        util_log(this._name + ".show()");
    }

    // https://api.jquery.com/toggle/
    this.toggle = function () {
        util_log(this._name + ".toggle()");
    }

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes

    this.onabort = function (listener) {
        this.addEventListener("abort", listener);
    }
    this.onautocomplete = function (listener) {
        this.addEventListener("autocomplete", listener);
    }
    this.onautocompleteerror = function (listener) {
        this.addEventListener("autocompleteerror", listener);
    }
    this.onblur = function (listener) {
        this.addEventListener("blur", listener);
    }
    this.oncancel = function (listener) {
        this.addEventListener("cancel", listener);
    }
    this.oncanplay = function (listener) {
        this.addEventListener("canplay", listener);
    }
    this.oncanplaythrough = function (listener) {
        this.addEventListener("canplaythrough", listener);
    }
    this.onchange = function (listener) {
        this.addEventListener("change", listener);
    }
    this.onclick = function (listener) {
        this.addEventListener("click", listener);
    }
    this.onclose = function (listener) {
        this.addEventListener("close", listener);
    }
    this.oncontextmenu = function (listener) {
        this.addEventListener("contextmenu", listener);
    }
    this.oncuechange = function (listener) {
        this.addEventListener("cuechange", listener);
    }
    this.ondblclick = function (listener) {
        this.addEventListener("dblclick", listener);
    }
    this.ondrag = function (listener) {
        this.addEventListener("drag", listener);
    }
    this.ondragend = function (listener) {
        this.addEventListener("dragend", listener);
    }
    this.ondragenter = function (listener) {
        this.addEventListener("dragenter", listener);
    }
    this.ondragleave = function (listener) {
        this.addEventListener("dragleave", listener);
    }
    this.ondragover = function (listener) {
        this.addEventListener("dragover", listener);
    }
    this.ondragstart = function (listener) {
        this.addEventListener("dragstart", listener);
    }
    this.ondrop = function (listener) {
        this.addEventListener("drop", listener);
    }
    this.ondurationchange = function (listener) {
        this.addEventListener("durationchange", listener);
    }
    this.onemptied = function (listener) {
        this.addEventListener("emptied", listener);
    }
    this.onended = function (listener) {
        this.addEventListener("ended", listener);
    }
    this.onerror = function (listener) {
        this.addEventListener("error", listener);
    }
    this.onfocus = function (listener) {
        this.addEventListener("focus", listener);
    }
    this.oninput = function (listener) {
        this.addEventListener("input", listener);
    }
    this.oninvalid = function (listener) {
        this.addEventListener("invalid", listener);
    }

    Object.defineProperty(this, "onkeydown", {
        get: function (listener) {
            this.addEventListener("keydown", listener);
        },
        set: function (listener) {
            util_log("onkeydown = " + _truncateOutput(listener));
            this.addEventListener("keydown", listener);
        }
    });

    this.onkeypress = function (listener) {
        this.addEventListener("keypress", listener);
    }
    this.onkeyup = function (listener) {
        this.addEventListener("keyup", listener);
    }
    this.onload = function (listener) {
        this.addEventListener("load", listener);
    }
    this.onloadeddata = function (listener) {
        this.addEventListener("loadeddata", listener);
    }
    this.onloadedmetadata = function (listener) {
        this.addEventListener("loadedmetadata", listener);
    }
    this.onloadstart = function (listener) {
        this.addEventListener("loadstart", listener);
    }
    this.onmousedown = function (listener) {
        this.addEventListener("mousedown", listener);
    }
    this.onmouseenter = function (listener) {
        this.addEventListener("mouseenter", listener);
    }
    this.onmouseleave = function (listener) {
        this.addEventListener("mouseleave", listener);
    }
    this.onmousemove = function (listener) {
        this.addEventListener("mousemove", listener);
    }
    this.onmouseout = function (listener) {
        this.addEventListener("mouseout", listener);
    }
    this.onmouseover = function (listener) {
        this.addEventListener("mouseover", listener);
    }
    this.onmouseup = function (listener) {
        this.addEventListener("mouseup", listener);
    }
    this.onmousewheel = function (listener) {
        this.addEventListener("mousewheel", listener);
    }
    this.onpause = function (listener) {
        this.addEventListener("pause", listener);
    }
    this.onplay = function (listener) {
        this.addEventListener("play", listener);
    }
    this.onplaying = function (listener) {
        this.addEventListener("playing", listener);
    }
    this.onprogress = function (listener) {
        this.addEventListener("progress", listener);
    }
    this.onratechange = function (listener) {
        this.addEventListener("ratechange", listener);
    }
    this.onreset = function (listener) {
        this.addEventListener("reset", listener);
    }
    this.onresize = function (listener) {
        this.addEventListener("resize", listener);
    }
    this.onscroll = function (listener) {
        this.addEventListener("scroll", listener);
    }
    this.onseeked = function (listener) {
        this.addEventListener("seeked", listener);
    }
    this.onseeking = function (listener) {
        this.addEventListener("seeking", listener);
    }
    this.onselect = function (listener) {
        this.addEventListener("select", listener);
    }
    this.onshow = function (listener) {
        this.addEventListener("show", listener);
    }
    this.onsort = function (listener) {
        this.addEventListener("sort", listener);
    }
    this.onstalled = function (listener) {
        this.addEventListener("stalled", listener);
    }
    this.onsubmit = function (listener) {
        this.addEventListener("submit", listener);
    }
    this.onsuspend = function (listener) {
        this.addEventListener("suspend", listener);
    }
    this.ontimeupdate = function (listener) {
        this.addEventListener("timeupdate", listener);
    }
    this.ontoggle = function (listener) {
        this.addEventListener("toggle", listener);
    }
    this.onvolumechange = function (listener) {
        this.addEventListener("volumechange", listener);
    }
    this.onwaiting = function (listener) {
        this.addEventListener("waiting", listener);
    }

    // The global style attribute has already been defined
    // _defineSingleProperty(this, "style");

    _defineSingleProperty(this, "tabIndex");
    _defineSingleProperty(this, "title");

    // Other...
    // Not sure what these properties are
    _defineSingleProperty(this, "elementname", "_nodename");
    _defineSingleProperty(this, "class");
    _defineSingleProperty(this, "_vgRuntimeStyle");

    Object.defineProperty(this, "text", {
        // I have no idea why text is a callable method... but hey it works!
        get: function () {
            util_log(this._name + ".text() => () => " + this._text);
            return function () {
                return this._text;
            }
        },
        set: function (v) {
            util_log(this._name + ".text = '" + v + "'");
            this._text = v;
        }
    });
    Object.defineProperty(this, "css", {
        // I have no idea why text is a callable method... but hey it works!
        get: function () {
            util_log(this._name + ".css()");
            return function () {
                util_log(this._name + ".css(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
            }
        },
        set: function (v) {
            util_log(this._name + ".css = '" + v + "'");
            util_log(arguments);
        }
    });

    // Not sure what these methods are
    this.html = function () {
        util_log(this._name + ".html(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    };

    // This method is related to Input elements, but is undocumented
    this.val = function () {
        val = this.value;
        if (val === undefined) {
            // Look for an input element where the value is defined
            for (e of document._elements) {
                if ("value" in e && e.value) {
                    util_log("Found an Input element with a 'value'...");
                    val = e.value;
                    break;
                }
            }
        }
        util_log(this._name + ".val() => " + val);
        return val;
    }
});
Element.prototype = Object.create(Node.prototype);
Element.prototype.constructor = Element;
Element.toString = Element.toJSON = () => {
    return "Element"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement
HTMLElement = _proxy(function (n) {
    // Inherit Element
    Element.call(this, n);

    // Key properties for MalwareJail
    this._name = "HTMLElement[" + this._id + "]<" + n + ">";

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement#instance_methods

    this.attachInternals = function () {
        util_log(this._name + ".attachInternals(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.blur = function () {
        util_log(this._name + ".blur(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click
    this.click = function (fn) {
        util_log(this._name + ".click(" + fn + ")");
        if (fn) {
            e = _proxy(new Event("click"));
            document._events.push(e);
            fn(e);
        }
        else if (this.href || this._attributes["href"]) {
            // If there was no function passed to the click method and an href exists,
            // then we should click the href
            if (this.href) {
                href = this.href;
            } else {
                href = this._attributes["href"];
            }

            if (this.download || this._attributes["download"]) {
                if (this.download) {
                    file_name = this.download;
                } else {
                    file_name = this._attributes["download"];
                }
            } else {
                file_name = this._name;
            }

            match = href.match(encoded_base64_regex);
            if (match) {
                util_log("Base64 match, decoding to " + file_name + " ...");
                _wscript_saved_files[file_name] = Buffer.from(match[1], 'base64');
            } else {
                util_log(">>> FIXME: Possible href '" + href + "' to be clicked that wasn't base64-encoded");
            }
        }
        else util_log(">>> FIXME: Missed opportunity in .click()");
    }

    this.focus = function () {
        util_log(this._name + ".focus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement#instance_properties
    _defineSingleProperty(this, "accessKey");
    _defineSingleProperty(this, "accessKeyLabel");
    _defineSingleProperty(this, "contentEditable");
    _defineSingleProperty(this, "contextMenu");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
    _defineSingleProperty(this, "dataset");

    _defineSingleProperty(this, "dir");
    _defineSingleProperty(this, "enterKeyHint");
    _defineSingleProperty(this, "hidden");
    _defineSingleProperty(this, "inert");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText
    _defineSingleProperty(this, "innerText", "_text");

    _defineSingleProperty(this, "inputMode");
    _defineSingleProperty(this, "isContentEditable");
    _defineSingleProperty(this, "lang");
    _defineSingleProperty(this, "nonce");
    _defineSingleProperty(this, "offsetHeight");
    _defineSingleProperty(this, "offsetLeft");
    _defineSingleProperty(this, "offsetParent");
    _defineSingleProperty(this, "offsetTop");
    _defineSingleProperty(this, "offsetWidth");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText
    _defineSingleProperty(this, "outerText", "_text");
});
HTMLElement.prototype = Object.create(Element.prototype);
HTMLElement.prototype.constructor = HTMLElement;
HTMLElement.toString = HTMLElement.toJSON = () => {
    return "HTMLElement"
}