// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval
util_log("Preparing sandbox to intercept eval calls.");

// WARNING: This method causes eval to be indirect rather than direct,
// which has the potential to have serious interpretation issues for accessing locally-scoped variables (as in, it can't anymore).
// For more information, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#direct_and_indirect_eva

// This is the method that overrides the native eval method
eval = function () {

    var _eval_calls = [];
    // Here is the indirect linkage
    var _eval = eval;

    // _data["eval_calls"] -> sandbox._data dict
    _data["eval_calls"] = _eval_calls;

    var _eval_mod = function (s) {
        /**
         * This function is used to insert util_log methods into any "catch" clauses
         * s: string -> the JavaScript to be run in the eval function
         */

        // This _t object will be used to store certain aspects of the JavaScript to be run in the eval function
        var _t = {};
        _t["orig"] = s;

        // Insert util_log methods into any "catch" clauses
        var script_with_reported_catches = s.replace(/\bcatch\b\s*\((.*?)\)\s*{/g, 'catch($1) { util_log(">>> Silencing catch " + _inspect($1));');
        _t["report_catch"] = script_with_reported_catches;

        // https://github.com/defconhaya proposal:
        var script_with_reported_catches_and_safe_functions = script_with_reported_catches.replace(/function ([^ (]*)/g, "$1 = function");
        _t["safe_funcs"] = script_with_reported_catches_and_safe_functions;

        _eval_calls[_eval_calls.length] = _t;

        util_log("Calling eval('" + script_with_reported_catches + "')");
        return _eval(script_with_reported_catches);
    }
    // If eval is called, this will pass the JavaScript to our _eval_mod function and return
    return function(s) {
        /* [native code ] */
        return _eval_mod(s)
    }
}();
