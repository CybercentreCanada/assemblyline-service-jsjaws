/*
    browser.js - simulates web browser like environment
*/

util_log("Preparing sandbox to emulate Browser environment (default = IE11).");

// Globals used for MalwareJail
_browser_documents = [];
_setInterval_calls = [];
_setTimeout_calls = [];

// jQuery

// This method checks if an AJAX web request was used for getting a resource, and if so, will run the
// given function if it exists. It will also simulate the server response based on the URL
function run_data_function(url, data) {
    if (data !== undefined && data.constructor.name === "Function") {
        var function_name = undefined;
        if (data.prototype && data.prototype.name) {
            function_name = data.prototype.name;
        } else if (data.name) {
            function_name = data.name;
        }
        if (function_name === undefined) {
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
            function_name = "anonymous";
        }
        util_log("Running function " + function_name + "()");
        try {
            if (is_domain_geo(url)) {
                data(domain_geo_response);
            } else if (url.indexOf("proxy") !== -1) {
                data("http://example.com/");
            } else {
                data();
            }
        } catch (err) {
            util_log("Could not execute function due to: '" + err.message + "'");
        }
    }
}

// https://api.jquery.com/category/deferred-object/
Deferred = _proxy(function () {
    this._id = _object_id++;
    this._name = "Deferred[" + this._id + "]";
    util_log("new " + this._name + "()");

    this.fail = function (fn) {
        util_log(this._name + ".fail(" + _truncateOutput(fn) + ")");
        fn(window);
    }
});
Deferred.toString = Deferred.toJSON = () => {
    return "Deferred"
}

// https://api.jquery.com/jQuery.get/#jqxhr-object
jqXHR = _proxy(function () {

    let ret = new XMLHttpRequest();
    this.id = ret.id;
    this._name = "jqXHR[" + this.id + "]";
    util_log("new " + this._name);

    function run_function_and_return_deferred(fn) {
        if (fn && fn.constructor.name === "Function") {
            var function_name = undefined;
            if (fn.prototype && fn.prototype.name) {
                function_name = fn.prototype.name;
            } else if (fn.name) {
                function_name = fn.name;
            }
            if (function_name === undefined) {
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                function_name = "anonymous";
            }
            util_log("Running function " + function_name + "()");
            // window == data
            try {
                fn(window);
            } catch (err) {
                util_log("Could not execute function due to: '" + err.message + "'");
            }
            return new Deferred();
        }
    }

    ret.done = function (fn) {
        util_log(this._name + ".done(" + _truncateOutput(fn) + ")");
        return run_function_and_return_deferred(fn);
    }

    ret.fail = function (fn) {
        util_log(this._name + ".fail(" + _truncateOutput(fn) + ")");
        return run_function_and_return_deferred(fn);
    }

    ret.always = function (fn) {
        util_log(this._name + ".always(" + _truncateOutput(fn) + ")");
        return run_function_and_return_deferred(fn);
    }

    ret.then = function (fn) {
        util_log(this._name + ".then(" + _truncateOutput(fn) + ")");
        return run_function_and_return_deferred(fn);
    }

    // The following are deprecated callback methods
    ret.success = function (fn) {
        util_log(this._name + ".success(" + _truncateOutput(fn) + ")");
        return run_function_and_return_deferred(fn);
    }

    ret.error = function (fn) {
        util_log(this._name + ".error(" + _truncateOutput(fn) + ")");
        return run_function_and_return_deferred(fn);
    }

    ret.complete = function (fn) {
        util_log(this._name + ".complete(" + _truncateOutput(fn) + ")");
        return run_function_and_return_deferred(fn);
    }

    return ret;
});
jqXHR.toString = jqXHR.toJSON = () => {
    return "jqXHR"
}

// https://api.jquery.com/Jquery/#jQuery1
$ = function (thing) {
    util_log("$(" + thing + ")");
    if (thing == this) {
        thing = this.id;
    } else if (typeof thing === "function") {
        util_log("$(...) was called where ... is a function, running function!");
        let id = thing();
        util_log("$(...) => '" + id + "'");
        return document.getElementById(id);
    } else if (typeof thing === "string" && thing.indexOf("#") !== -1 && thing.indexOf("#") > 1) {
        // This is a getter for element AND attribute!
        let split_selector = thing.split("#");
        let id = split_selector[0];
        let attribute = split_selector[1];
        let element = document.getElementById(id);
        return element;
    } else if (typeof thing === "string" && thing.indexOf(".") === 0) {
        // This is a getter for the class!
        let class_name = thing.replace(".", "");
        let element = document.getElementById(class_name);
        return element;
    }
    return document.getElementById(thing);
};

// https://api.jquery.com/Jquery.ajax/
$.ajax = function (url, settings) {
    util_log("$.ajax(" + JSON.stringify(url) + ")");
    let ret = new jqXHR();
    // Default to GET
    var url_type = "get";
    if (url.type) {
        url_type = url.type;
    } else if (url.method) {
        url_type = url.method;
    }
    ret.open(url_type, url.url);
    ret.send(url.data);
    return ret;
};

// https://api.jquery.com/jquery.getJSON/
$.getJSON = function (url, data, success) {
    util_log("$.getJSON(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")")
    let ret = new jqXHR();
    ret.open("get", url);
    ret.onreadystatechange = success;
    ret.send();
    run_data_function(url, data);
    return ret;
};

// https://api.jquery.com/jQuery.post/
$.post = function (url, data, success, dataType) {
    util_log("$.post(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")")
    let ret = new jqXHR();
    ret.open("post", url);
    ret.onreadystatechange = success;
    ret.send(data);
    return ret;
};

// https://stackoverflow.com/questions/4083351/what-does-jquery-fn-mean
$.fn = function () {
    util_log("$.fn(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")")
    return this;
}

// https://api.jquery.com/jQuery.get/
$.get = function (url, data, success, dataType) {
    util_log("$.get(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")")
    let ret = new jqXHR();
    ret.open("get", url);
    ret.onreadystatechange = success;
    ret.send();
    run_data_function(url, data);
    return ret;
};

// https://api.jquery.com/jQuery.support/
// https://www.w3schools.com/jquery/prop_jquery_support.asp
$.support = {
    "ajax": false,
    "boxModel": false,
    "changeBubbles": false,
    "checkClone": false,
    "checkOn": false,
    "cors": false,
    "cssFloat": false,
    "hrefNormalized": false,
    "htmlSerialize": false,
    "leadingWhitespace": false,
    "noCloneChecked": false,
    "noCloneEvent": false,
    "opacity": false,
    "optDisabled": false,
    "optSelected": false,
    "scriptEval": false,
    "style": false,
    "submitBubbles": false,
    "tbody": false,
}

// https://api.jquery.com/jquery.extend/
$.extend = function () {
    util_log("$.extend(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    for (let obj of arguments) {
        Object.assign($, obj);
    }
}

// https://api.jquery.com/on/
$.on = function (element, events, selector, handler) {
    util_log(element._name + ".on(" + events + ", " + _truncateOutput(selector) + ", " + _truncateOutput(handler) + ")");

    // If the selector is a function, then this is actually the handler
    if (!handler && typeof selector === "function") {
        handler = selector;
    }

    if (handler.constructor.name === "Function") {
        // Determine the function name
        var function_name = undefined;
        if (handler.prototype && handler.prototype.name) {
            function_name = handler.prototype.name;
        } else if (handler.name) {
            function_name = handler.name;
        }
        if (function_name === undefined) {
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
            function_name = "anonymous";
        }

        // Check if we have declared a specific "on" method for this event type
        let method_name = "on" + events;
        if (method_name in element) {
            element[method_name](handler);
        }
    }
    else {
        util_log("That's weird, a non-function was passed to $.on...")
    }
}

// https://api.jquery.com/jQuery.getScript/
$.getScript = function (url, success) {
    util_log("$.getScript(" + url + ")");
    let ret = new jqXHR();
    // Default to GET
    ret.open("get", url);
    return ret;
}

// https://api.jquery.com/jQuery.parseJSON/#jQuery-parseJSON-json
$.parseJSON = JSON.parse;

$.toString = $.toJSON = () => { return "jQuery" }
jQuery = $;

// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
KEYBOARD_EVENT_KEYCODE_MAP = {
    // 13 is the "Enter" button
    "keyup": 13,
    "keypress": undefined,
    "keydown": 13,
}

is_domain_geo = function (url) {
    let domain = new URL(url);
    domain = domain.hostname;
    if (domain.includes("ip") || domain.includes("geo")) {
        util_log("Domain '" + domain + "' is for a GeoIP service.")
        return true;
    }
    return false;
}

const domain_geo_response = {
    "ip": "127.0.0.1",
    "continent_code": "NA",
    "country": "Canada",
    "country_code": "CA",
    "region": "Ottawa",
    "region_code": "OW",
    "city": "Ottawa",
    "org": "organization",
    "postal": "1A1 A1A"
};

// Overriding these methods from third-party libs

// Basic implementation of https://github.com/eligrey/FileSaver.js
saveAs = async function (content, filename) {
    util_log("saveAs(" + content + ", " + filename + ")")

    // Assign the blob contents to the _wscript_saved_files global which will be
    // written to disk after execution
    if (content.constructor.name == "Blob") {
        content = Buffer.from(await content.arrayBuffer());
    }
    _wscript_saved_files[filename] = content;
}


// Google Analytics somehow
ga = function () {
    util_log("ga(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}

// top must be assigned at the bottom of this file, otherwise everything becomes a reference to it;
// top is actually the sandbox environment itself. Mind blown.
top = this;
