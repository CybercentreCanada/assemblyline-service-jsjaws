/*
    document.js contains the Document object
    https://developer.mozilla.org/en-US/docs/Web/API/Document
*/

util_log("Preparing sandbox to emulate Document interface.");

// https://developer.mozilla.org/en-US/docs/Web/API/Document
Document = _proxy(function () {
    // Inheriting Node
    Node.call(this);

    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "document[" + this.id + "]";

    // TODO: Not sure what the benefit of maintaining a dictionary of these values is, and using
    // _defineProperty to facilitate their manipulation
    this._props = {
        "body": undefined,
        "referrer": "http://example.com/",
        "cookie": "",
        "namespaces": undefined
    };
    for (let k in this._props) {
        _defineProperty(this, k, this._props);
    }

    // Useful private properties
    this._location = Location;
    this._content = "";
    this._elements = [];
    this._events = [];
    this._event_listeners = {};

    // Instance methods first, then properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Document#instance_methods

    this.adoptNode = function () {
        util_log(this._name + ".adoptNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.append = function () {
        util_log(this._name + ".append(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.caretPositionFromPoint = function () {
        util_log(this._name + ".caretPositionFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.caretRangeFromPoint = function () {
        util_log(this._name + ".caretRangeFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.clear = function () {
        util_log(this._name + ".clear(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/close
    this.close = function () {
        util_log(this._name + ".close()");
    }

    this.createAttribute = function () {
        util_log(this._name + ".createAttribute(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createAttributeNS = function () {
        util_log(this._name + ".createAttributeNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createCDATASection = function () {
        util_log(this._name + ".createCDATASection(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createComment = function () {
        util_log(this._name + ".createComment(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createDocumentFragment = function () {
        util_log(this._name + ".createDocumentFragment(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
    this.createElement = function (n) {
        util_log(this._name + ".createElement(" + n + ")");
        let e;
        // If we need to create a custom element with certain attributes, add it's case here
        switch (n.toLowerCase()) {
            case "a":
                e = _proxy(new HTMLAnchorElement());
                break;
            case "audio":
                e = _proxy(new HTMLAudioElement());
                break;
            case "body":
                e = _proxy(new HTMLBodyElement());
                break;
            case "button":
                e = _proxy(new HTMLButtonElement());
                break;
            case "caption":
                e = _proxy(new HTMLTableCaptionElement());
                break;
            case "center":
                e = _proxy(new HTMLCenterElement());
                break;
            case "circle":
                e = _proxy(new SVGCircleElement());
                break;
            case "clippath":
                e = _proxy(new SVGClipPathElement());
                break;
            case "content":
                e = _proxy(new HTMLSlotElement());
                break;
            case "div":
                e = _proxy(new HTMLDivElement());
                break;
            case "embed":
                e = _proxy(new HTMLEmbedElement());
                break;
            case "font":
                e = _proxy(new HTMLFontElement());
                break;
            case "form":
                e = _proxy(new HTMLFormElement());
                break;
            case "g":
                e = _proxy(new SVGGElement());
                break;
            case "head":
                e = _proxy(new HTMLHeadElement());
                break;
            case "hr":
                e = _proxy(new HTMLHRElement());
                break;
            case "html":
                e = _proxy(new HTMLHtmlElement());
                break;
            case "iframe":
                e = _proxy(new HTMLIFrameElement());
                break;
            case "img":
                e = _proxy(new Image());
                break;
            case "input":
                e = _proxy(new HTMLInputElement());
                break;
            case "label":
                e = _proxy(new HTMLLabelElement());
                break;
            case "li":
                e = _proxy(new HTMLLIElement());
                break;
            case "link":
                e = _proxy(new HTMLLinkElement());
                break;
            case "main":
                e = _proxy(new HTMLMainElement());
                break;
            case "marquee":
                e = _proxy(new HTMLMarqueeElement());
                break;
            case "mask":
                e = _proxy(new SVGMaskElement());
                break;
            case "meta":
                e = _proxy(new HTMLMetaElement());
                break;
            case "object":
                e = _proxy(new HTMLObjectElement());
                break;
            case "ol":
                e = _proxy(new HTMLOListElement());
                break;
            case "p":
                e = _proxy(new HTMLParagraphElement());
                break;
            case "path":
                e = _proxy(new SVGPathElement());
                break;
            case "rect":
                e = _proxy(new SVGRectElement());
                break;
            case "script":
                e = _proxy(new HTMLScriptElement());
                break;
            case "span":
                e = _proxy(new HTMLSpanElement());
                break;
            case "source":
                e = _proxy(new HTMLSourceElement());
                break;
            case "style":
                e = _proxy(new HTMLStyleElement());
                break;
            case "svg":
                e = _proxy(new SVGElement());
                break;
            case "table":
                e = _proxy(new HTMLTableElement());
                break;
            case "tbody":
                e = _proxy(new HTMLTableSectionElement());
                break;
            case "td":
                e = _proxy(new HTMLTableCellElement());
                break;
            case "title":
                e = _proxy(new HTMLTitleElement());
                break;
            case "tr":
                e = _proxy(new HTMLTableRowElement());
                break;
            case "track":
                e = _proxy(new HTMLTrackElement());
                break;
            case "ul":
                e = _proxy(new HTMLUListElement());
                break;
            case "video":
                e = _proxy(new HTMLVideoElement());
                break;

            // The following have no specific HTML Element representation
            case "aside":
            case "b":
            case "br":
            case "ddue:steps":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
            case "header":
            case "i":
            case "linktext":
            case "main":
            case "s":
            case "small":
                e = _proxy(new HTMLElement(n));
                break;

            default:
                util_log(">>> FIXME: Document.CreateElement of type '" + n.toLowerCase() + "' defaults to HTMLElement");
                e = _proxy(new HTMLElement(n));
        }
        this._elements[this._elements.length] = e;
        return e;
    };

    this.createElementNS = function () {
        util_log(this._name + ".createElementNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createEvent = function () {
        util_log(this._name + ".createEvent(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createExpression = function () {
        util_log(this._name + ".createExpression(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createNodeIterator = function () {
        util_log(this._name + ".createNodeIterator(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createNSResolver = function () {
        util_log(this._name + ".createNSResolver(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createProcessingInstruction = function () {
        util_log(this._name + ".createProcessingInstruction(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createRange = function () {
        util_log(this._name + ".createRange(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode
    this.createtextnode = function (n) {
        util_log(this._name + ".createTextNode(" + n + ")");
        return new Text(n);
    };

    this.createTouch = function () {
        util_log(this._name + ".createTouch(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createTouchList = function () {
        util_log(this._name + ".createTouchList(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.createTreeWalker = function () {
        util_log(this._name + ".createTreeWalker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.elementFromPoint = function () {
        util_log(this._name + ".elementFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.elementsFromPoint = function () {
        util_log(this._name + ".elementsFromPoint(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.enableStyleSheetsForSet = function () {
        util_log(this._name + ".enableStyleSheetsForSet(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate
    this.evaluate = function (n) {
        util_log(this._name + ".evaluate(" + n + ")");
    }

    this.execCommand = function () {
        util_log(this._name + ".execCommand(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.exitFullscreen = function () {
        util_log(this._name + ".exitFullscreen(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.exitPictureInPicture = function () {
        util_log(this._name + ".exitPictureInPicture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.exitPointerLock = function () {
        util_log(this._name + ".exitPointerLock(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getAnimations = function () {
        util_log(this._name + ".getAnimations(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById
    this.getElementById = function (n) {
        if (typeof n === "number") {
            n = n.toString();
        } else if (typeof n === "function") {
            util_log(this._name + ".getElementById(...) was called where ... is a function, running function!");
            n = n();
            util_log("...() => '" + n + "'");
        }
        util_log(this._name + ".getElementById(" + n + ")");
        if (n === undefined) {
            return this._elements[0];
        } else if (n === this) {
            return this;
        } else if (n === window) {
            return window;
        } else if (n.startsWith("#")) {
            n = n.slice(1,);
        }
        // For elementtype[attribute_name=attribute_value]
        else if (n.indexOf("[") !== -1 && n.endsWith("]")) {
            let split_selector = n.split("[");
            // let element_type = split_selector[0];
            let attribute = split_selector[1].slice(0, -1);
            if (attribute.indexOf("=") !== -1) {
                let split_attribute = attribute.split("=");
                // let attribute_name = split_attribute[0];
                let attribute_value = split_attribute[1];
                n = attribute_value;
            }
        }

        // We're going to loop through this three times, based on priority...
        // _nodename is a better representation of ID than _id
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("_nodename" in e && ("" + e._nodename).toLowerCase() === n.toLowerCase()) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _nodename");
                return e;
            }
        }

        // If "id" is in properties, we should try that
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("id" in e && e["id"].toString().toLowerCase() == n.toLowerCase()) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via 'id'");
                return e;
            }
        }

        // If "id" is in attributes, we should try that
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("id" in e._attributes && e._attributes["id"].toLowerCase() == n.toLowerCase()) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _attributes['id']");
                return e;
            }
        }

        // If "class" is in properties, we should try that too
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("class" in e && e["class"].toLowerCase().includes(n.toLowerCase())) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via 'class'");
                return e;
            }
        }

        // If "class" is in attributes, we should try that too
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("class" in e._attributes && e._attributes["class"].toLowerCase().includes(n.toLowerCase())) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _attributes['class']");
                return e;
            }
        }

        // If "name" is in properties, we should try that too
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("name" in e && e["name"] && e["name"].toLowerCase().includes(n.toLowerCase())) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via 'name'");
                return e;
            }
        }

        // If "name" is in attributes, we should try that too
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("name" in e._attributes && e._attributes["name"] && e._attributes["name"].toLowerCase().includes(n.toLowerCase())) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _attributes['name']");
                return e;
            }
        }

        // Look for if any attributes match the ID that we are looking for
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if (n in e._attributes && e._attributes[n]) {
                util_log(this._name + ".getElementById(" + n + ") => " + e._name + " via _attributes['" + n + "']");
                return e;
            }
        }

        // Let's try tag names next
        let elements = this.getElementsByTagName(n);
        if (elements.length > 0) {
            return elements[0];
        }

        // Heck, let's just look for interesting elements
        elements_of_interest = [];
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if ("download" in e._attributes || "href" in e._attributes || "src" in e._attributes || "text" in e._attributes) {
                elements_of_interest.push(e);
            }
        }

        if (elements_of_interest.length > 0) {
            util_log(this._name + ".getElementById(" + n + ") => first interesting element (" + elements_of_interest[0] + ")");
            return elements_of_interest[0];
        }
        util_log(this._name + ".getElementById(" + n + ") => null");
        // Bad hack here because it doesn't really matter
        return this._elements[0];
    };

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
    this.getElementsByClassName = function (n) {
        let ret = []
        util_log(this._name + ".getElementsByClassName(" + n + ")");
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if (e.class.toLowerCase() === n.toLowerCase()) {
                ret[ret.length] = e;
            }
        }
        util_log(this._name + ".getElementsByClassName(" + n + ") ... " + ret.length + " found");
        if (ret.length === 0) {
            util_log("0 elements returned for class name '" + n + "'. Let's return a fake div element and see what happens...");
            ret.push(document.createElement("div"));
        }
        return ret;
    };

    this.getElementsByName = function () {
        util_log(this._name + ".getElementsByName(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName
    this.getElementsByTagName = function (name) {
        let ret = []
        util_log(this._name + ".getElementsByTagName(" + name + ")");
        for (i = 0; i < this._elements.length; i++) {
            let e = this._elements[i];
            if (e.elementName.toLowerCase() === name.toLowerCase()) {
                ret.push(e);
            }
        }
        util_log(this._name + ".getElementsByTagName(" + name + ") ... " + ret.length + " found");
        return ret;
    };

    this.getElementsByTagNameNS = function () {
        util_log(this._name + ".getElementsByTagNameNS(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getSelection = function () {
        util_log(this._name + ".getSelection(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasFocus = function () {
        util_log(this._name + ".hasFocus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.hasStorageAccess = function () {
        util_log(this._name + ".hasStorageAccess(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.importNode = function () {
        util_log(this._name + ".importNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.mozSetImageElement = function () {
        util_log(this._name + ".mozSetImageElement(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/open
    this.open = function () {
        util_log(this._name + ".open()");
        return this;
    }

    this.prepend = function () {
        util_log(this._name + ".prepend(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryCommandEnabled = function () {
        util_log(this._name + ".queryCommandEnabled(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryCommandState = function () {
        util_log(this._name + ".queryCommandState(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryCommandSupported = function () {
        util_log(this._name + ".queryCommandSupported(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
    this.queryselector = function (n) {
        util_log(this._name + ".querySelector(" + n + ")");
        if (n === undefined) {
            return this._elements[0];
        }
        else if (n[0] === "#" || n[0] === ".") {
            return this.getElementById(n.slice(1,));
        }
        // For elementtype[attribute_name=attribute_value]
        else if (n.indexOf("[") !== -1 && n.endsWith("]")) {
            let split_selector = n.split("[");
            // let element_type = split_selector[0];
            let attribute = split_selector[1].slice(0, -1);
            if (attribute.indexOf("=") !== -1) {
                let split_attribute = attribute.split("=");
                // let attribute_name = split_attribute[0];
                let attribute_value = split_attribute[1];
                return this.getElementById(attribute_value)
            }
            return this.getElementById(attribute);
        }
        else {
            return this.getElementById(n);
        }
    };

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
    this.querySelectorAll = function (selectors) {
        util_log(this._name + ".querySelectorAll(" + selectors + ")");
        let elements_to_return = [];
        // A non-eval method of handling lists as strings
        if (selectors.startsWith("[") && selectors.endsWith("]")) {
            selectors_list = selectors.slice(1, -1).split(",");

            for (selector of selectors_list) {
                element_with_selector = this.querySelector(selector);
                elements_to_return.push(element_with_selector);
            }
        }
        return elements_to_return;
    }

    this.releaseCapture = function () {
        util_log(this._name + ".releaseCapture(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.replaceChildren = function () {
        util_log(this._name + ".replaceChildren(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestStorageAccess = function () {
        util_log(this._name + ".requestStorageAccess(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/write
    this.write = function (c) {
        if (c === null) {
            util_log(this._name + ".write(null)");
            return;
        }
        util_log(this._name + ".write(content) " + c.length + " bytes");
        util_log("=> '" + c + "'");
        _content = c;
        _browser_documents[_browser_documents.length] = c;
    };

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln
    this.writeln = function (c) {
        util_log(this._name + ".writeln(content) " + c.length + " bytes");
        // Add a trailing newline here
        util_log("=> '" + c + "\n'");
        _content = c;
        _browser_documents[_browser_documents.length] = c;
    };

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Document#instance_properties

    _defineSingleProperty(this, "activeElement")
    _defineSingleProperty(this, "adoptedStyleSheets")
    _defineSingleProperty(this, "alinkColor");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/all
    this.all = this._elements;

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/anchors
    Object.defineProperty(this, "anchors", {
        get: function () {
            util_log("document.anchors.get()");
            let items = this.getElementsByTagName("anchor");
            return HTMLCollection(items);
        },
    });

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/applets
    Object.defineProperty(this, "applets", {
        get: function () {
            util_log("document.applets.get()");
            let items = this.getElementsByTagName("applet");
            return HTMLCollection(items);
        },
    });

    _defineSingleProperty(this, "bgColor");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/body
    this.body = this.createElement("body");

    _defineSingleProperty(this, "characterSet");
    _defineSingleProperty(this, "childElementCount");
    _defineSingleProperty(this, "children");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode
    this.compatMode = function () { }

    _defineSingleProperty(this, "contentType");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript
    this.currentScript = this.createElement("script");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-src
    this.currentScript.src = _script_name;

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView
    this.defaultView = this.window;

    _defineSingleProperty(this, "designMode");
    _defineSingleProperty(this, "dir");
    _defineSingleProperty(this, "doctype");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement
    this.documentElement = this.createElement("html");

    _defineSingleProperty(this, "documentURI");
    _defineSingleProperty(this, "domain");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds
    Object.defineProperty(this, "embeds", {
        get: function () {
            util_log("document.embeds.get()");
            let items = this.getElementsByTagName("embed");
            return HTMLCollection(items);
        },
    });

    _defineSingleProperty(this, "featurePolicy");
    _defineSingleProperty(this, "fgColor");
    _defineSingleProperty(this, "firstElementChild");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts
    Object.defineProperty(this, "fonts", {
        get: function () {
            util_log("document.fonts.get()");
            let items = this.getElementsByTagName("font");
            return HTMLCollection(items);
        },
    });

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/forms
    Object.defineProperty(this, "forms", {
        get: function () {
            util_log("document.forms.get()");
            let items = this.getElementsByTagName("form");
            return HTMLCollection(items);
        },
    });

    _defineSingleProperty(this, "fragmentDirective");
    _defineSingleProperty(this, "fullscreen");
    _defineSingleProperty(this, "fullscreenElement");
    _defineSingleProperty(this, "fullscreenEnabled");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/head
    this.head = this.createElement("head");
    // Append the head first, then the body
    this.documentElement.appendChild(this.head);
    this.documentElement.appendChild(this.body);

    _defineSingleProperty(this, "hidden");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/images
    Object.defineProperty(this, "images", {
        get: function () {
            util_log("document.images.get()");
            let items = this.getElementsByTagName("image");
            return HTMLCollection(items);
        },
    });

    _defineSingleProperty(this, "implementation");
    _defineSingleProperty(this, "lastElementChild");
    _defineSingleProperty(this, "lastModified");
    _defineSingleProperty(this, "lastStyleSheetSet");
    _defineSingleProperty(this, "linkColor");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/links
    Object.defineProperty(this, "links", {
        get: function () {
            util_log("document.links.get()");
            let items = this.getElementsByTagName("link");
            return HTMLCollection(items);
        },
    });

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/location
    Object.defineProperty(this, "location", {
        get: function () {
            util_log("document.location.get()");
            return this._location;
        },
        set: function (n) {
            util_log("document.location.set(" + n + ")");
            this._location.href = n;
        }
    });

    _defineSingleProperty(this, "msCapsLockWarningOff");
    _defineSingleProperty(this, "pictureInPictureElement");
    _defineSingleProperty(this, "pictureInPictureEnabled");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins
    Object.defineProperty(this, "plugins", {
        get: function () {
            util_log("document.plugins.get()");
            let items = this.getElementsByTagName("plugin");
            return HTMLCollection(items);
        },
    });

    _defineSingleProperty(this, "pointerLockElement");
    _defineSingleProperty(this, "preferredStyleSheetSet");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState
    this.readyState = function (n) {
        util_log("readyState(" + n + ")");
    }

    _defineSingleProperty(this, "rootElement");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts
    this.scripts = function (n) {
        util_log("Script: " + n);
    }

    _defineSingleProperty(this, "scrollingElement");
    _defineSingleProperty(this, "selectedStyleSheetSet");
    _defineSingleProperty(this, "styleSheets");
    _defineSingleProperty(this, "styleSheetSets");
    _defineSingleProperty(this, "timeline");
    _defineSingleProperty(this, "title");

    // https://developer.mozilla.org/en-US/docs/Web/API/Document/URL
    // https://developer.mozilla.org/en-US/docs/Web/API/Location/href
    this.URL = Location.href;

    _defineSingleProperty(this, "visibilityState");
    _defineSingleProperty(this, "vlinkColor");
    _defineSingleProperty(this, "xmlEncoding");
    _defineSingleProperty(this, "xmlVersion");

    // This section of properties & methods are not documented
    //  in https://developer.mozilla.org/en-US/docs/Web/API/Document but have been seen in the wild

    this.namespaces = new Collection();

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes

    this.onabort = function (listener) {
        this.addEventListener("abort", listener);
    }
    this.onautocomplete = function (listener) {
        this.addEventListener("autocomplete", listener);
    }
    this.onautocompleteerror = function (listener) {
        this.addEventListener("autocompleteerror", listener);
    }
    this.onblur = function (listener) {
        this.addEventListener("blur", listener);
    }
    this.oncancel = function (listener) {
        this.addEventListener("cancel", listener);
    }
    this.oncanplay = function (listener) {
        this.addEventListener("canplay", listener);
    }
    this.oncanplaythrough = function (listener) {
        this.addEventListener("canplaythrough", listener);
    }
    this.onchange = function (listener) {
        this.addEventListener("change", listener);
    }
    this.onclick = function (listener) {
        this.addEventListener("click", listener);
    }
    this.onclose = function (listener) {
        this.addEventListener("close", listener);
    }
    this.oncontextmenu = function (listener) {
        this.addEventListener("contextmenu", listener);
    }
    this.oncuechange = function (listener) {
        this.addEventListener("cuechange", listener);
    }
    this.ondblclick = function (listener) {
        this.addEventListener("dblclick", listener);
    }
    this.onDOMContentLoaded = function (listener) {
        this.addEventListener("DOMCOntentLoaded", listener);
    }
    this.ondrag = function (listener) {
        this.addEventListener("drag", listener);
    }
    this.ondragend = function (listener) {
        this.addEventListener("dragend", listener);
    }
    this.ondragenter = function (listener) {
        this.addEventListener("dragenter", listener);
    }
    this.ondragleave = function (listener) {
        this.addEventListener("dragleave", listener);
    }
    this.ondragover = function (listener) {
        this.addEventListener("dragover", listener);
    }
    this.ondragstart = function (listener) {
        this.addEventListener("dragstart", listener);
    }
    this.ondrop = function (listener) {
        this.addEventListener("drop", listener);
    }
    this.ondurationchange = function (listener) {
        this.addEventListener("durationchange", listener);
    }
    this.onemptied = function (listener) {
        this.addEventListener("emptied", listener);
    }
    this.onended = function (listener) {
        this.addEventListener("ended", listener);
    }
    this.onerror = function (listener) {
        this.addEventListener("error", listener);
    }
    this.onfocus = function (listener) {
        this.addEventListener("focus", listener);
    }
    this.oninput = function (listener) {
        this.addEventListener("input", listener);
    }
    this.oninvalid = function (listener) {
        this.addEventListener("invalid", listener);
    }
    this.onkeydown = function (listener) {
        this.addEventListener("keydown", listener);
    }
    this.onkeypress = function (listener) {
        this.addEventListener("keypress", listener);
    }
    this.onkeyup = function (listener) {
        this.addEventListener("keyup", listener);
    }
    this.onload = function (listener) {
        this.addEventListener("load", listener);
    }
    this.onloadeddata = function (listener) {
        this.addEventListener("loadeddata", listener);
    }
    this.onloadedmetadata = function (listener) {
        this.addEventListener("loadedmetadata", listener);
    }
    this.onloadstart = function (listener) {
        this.addEventListener("loadstart", listener);
    }
    this.onmousedown = function (listener) {
        this.addEventListener("mousedown", listener);
    }
    this.onmouseenter = function (listener) {
        this.addEventListener("mouseenter", listener);
    }
    this.onmouseleave = function (listener) {
        this.addEventListener("mouseleave", listener);
    }
    this.onmousemove = function (listener) {
        this.addEventListener("mousemove", listener);
    }
    this.onmouseout = function (listener) {
        this.addEventListener("mouseout", listener);
    }
    this.onmouseover = function (listener) {
        this.addEventListener("mouseover", listener);
    }
    this.onmouseup = function (listener) {
        this.addEventListener("mouseup", listener);
    }
    this.onmousewheel = function (listener) {
        this.addEventListener("mousewheel", listener);
    }
    this.onpause = function (listener) {
        this.addEventListener("pause", listener);
    }
    this.onplay = function (listener) {
        this.addEventListener("play", listener);
    }
    this.onplaying = function (listener) {
        this.addEventListener("playing", listener);
    }
    this.onprogress = function (listener) {
        this.addEventListener("progress", listener);
    }
    this.onratechange = function (listener) {
        this.addEventListener("ratechange", listener);
    }
    this.onreset = function (listener) {
        this.addEventListener("reset", listener);
    }
    this.onresize = function (listener) {
        this.addEventListener("resize", listener);
    }
    this.onscroll = function (listener) {
        this.addEventListener("scroll", listener);
    }
    this.onseeked = function (listener) {
        this.addEventListener("seeked", listener);
    }
    this.onseeking = function (listener) {
        this.addEventListener("seeking", listener);
    }
    this.onselect = function (listener) {
        this.addEventListener("select", listener);
    }
    this.onshow = function (listener) {
        this.addEventListener("show", listener);
    }
    this.onsort = function (listener) {
        this.addEventListener("sort", listener);
    }
    this.onstalled = function (listener) {
        this.addEventListener("stalled", listener);
    }
    this.onsubmit = function (listener) {
        this.addEventListener("submit", listener);
    }
    this.onsuspend = function (listener) {
        this.addEventListener("suspend", listener);
    }
    this.ontimeupdate = function (listener) {
        this.addEventListener("timeupdate", listener);
    }
    this.ontoggle = function (listener) {
        this.addEventListener("toggle", listener);
    }
    this.onvolumechange = function (listener) {
        this.addEventListener("volumechange", listener);
    }
    this.onwaiting = function (listener) {
        this.addEventListener("waiting", listener);
    }

    // InternetExplorer-specific methods

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/dn255470(v=vs.85)
    this.documentMode = function () { }

    // https://learn.microsoft.com/en-us/previous-versions/hh771792(v=vs.85)
    this.createstylesheet = function (n) {
        util_log(this._name + ".createStyleSheet(" + n + ")");
        style_element = this.createElement("style");
        style_element._attributes["styleSheet"]["cssText"] = n;
        return style_element;
    };

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752535(v=vs.85)
    this.attachEvent = function (n) {
        util_log("attachEvent(" + n + ")");
    }

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752539(v=vs.85)
    this.detachEvent = function (n) {
        util_log("detachEvent(" + n + ")");
    }

    // https://learn.microsoft.com/en-us/previous-versions/hh771931(v=vs.85)
    this.fireEvent = function (n) {
        util_log("fireEvent(" + n + ")");
    }

    // EventTarget

    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#instance_methods
    this.addEventListener = function (type, listener) {
        if (listener && ["Function", "AsyncFunction"].includes(listener.constructor.name)) {
            if (listener.prototype == undefined) {
                function_name = "anonymous";
            } else {
                var function_name = undefined;
                if (listener.prototype && listener.prototype.name) {
                    function_name = listener.prototype.name;
                } else if (listener.name) {
                    function_name = listener.name;
                }
                if (function_name === undefined) {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                    function_name = "anonymous";
                }
            }
            util_log(this._name + ".addEventListener(" + type + ", " + function_name + ")")
            var e = null;

            for (ev of this._events) {
                if (ev.type === type) {
                    e = ev;
                }
            }

            if (e === null) {
                switch (type) {
                    case "click":
                    case "contextmenu":
                    case "mousemove":
                        e = new MouseEvent(type);
                        break;
                    case "message":
                        e = new MessageEvent(type);
                        break;
                    case "keyup":
                    case "keydown":
                    case "keypress":
                        e = new KeyboardEvent(type);
                        break;
                    case "DOMContentLoaded":
                    case "load":
                        e = _proxy(new Event(type));
                        break;
                    default:
                        util_log(">>> FIXME: Document.addEventListener of type '" + type + "' defaults to Event");
                        e = _proxy(new Event(type));
                }
                this._events.push(e);
            }
            util_log("Running function " + function_name + "(" + e + ")");
            try {
                listener(e);
            } catch (err) {
                util_log("Could not execute function due to: '" + err.message + "'");
            }
        } else {
            util_log(this._name + ".addEventListener(" + type + ", " + _truncateOutput(listener) + ")")
        }
        this._event_listeners[type] = listener;
    }
    this.removeEventListener = function () { }
    this.dispatchEvent = function () { }

    // Deprecated

    // https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event
    this.keypress = function (listener) {
        return this.addEventListener("keypress", listener);
    }

    // jQuery specific

    // https://learn.jquery.com/using-jquery-core/document-ready/
    this.ready = function (fn) {
        util_log(this._name + ".ready(" + _truncateOutput(fn) + ")");
        if (fn.constructor.name === "Function") {
            var function_name = undefined;
            if (fn.prototype && fn.prototype.name) {
                function_name = fn.prototype.name;
            } else if (fn.name) {
                function_name = fn.name;
            }
            if (function_name === undefined) {
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                function_name = "anonymous";
            }
            util_log("Running function " + function_name + "()");
            try {
                fn();
            } catch (err) {
                util_log("Could not execute function due to: '" + err.message + "'");
            }
        }
    }

    // https://api.jquery.com/on/
    this.on = function (events, selector, handler) {
        util_log(this._name + ".on(" + events + ", " + selector + ", " + _truncateOutput(handler) + ")");

        // Check if we have declared a specific "on" method for this event type
        let method_name = "on" + events;
        if (method_name in this) {
            this[method_name](handler);
        }
    }
});
Document.prototype = Object.create(Node.prototype);
Document.prototype.constructor = Document;
Document.toString = Document.toJSON = () => { return "Document" }

document = new Document();

// create a stylesheet element with the contents from the extracted CSS in the HTML
try {
    stylesheet_contents = fs.readFileSync(_stylesheet, "utf8");
}
catch (err) {
    stylesheet_contents = "";
}
document.createstylesheet(stylesheet_contents)

document.toString = () => { return "document" }

// Set the document property after the Document object instance has been created
window.document = document;
