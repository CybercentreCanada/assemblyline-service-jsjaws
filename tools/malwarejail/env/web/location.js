/*
    location.js contains the Location object
    https://developer.mozilla.org/en-US/docs/Web/API/Location
*/

util_log("Preparing sandbox to emulate Location interface.");

// https://developer.mozilla.org/en-US/docs/Web/API/Location
Location = _proxy({
    _name: "location",

    // https://developer.mozilla.org/en-US/docs/Web/API/Location#instance_properties

    _props: {
        "hash": "#YmxhaC5ibGFoQGJsYWguY29t", // Base64-encoded "blah.blah@blah.com". This usage is frequently seen in phishing.
        "host": "example.com",
        "hostname": "example.com",
        "href": "http://example.com/?search",
        "origin": "http://example.com/?search",
        "pathname": "C:/script.js",
        "port": "80",
        "protocol": "http:",
        "search": "?search",
    },

    // https://developer.mozilla.org/en-US/docs/Web/API/Location#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/Location/assign
    assign: async function (url) {
        util_log(this._name + ".assign(" + url + ")");
        // In our sample, it is a promise
        // It would be better to handle it, but promises break everything
        // this._props["href"] = n;
    },

    // https://developer.mozilla.org/en-US/docs/Web/API/Location/reload
    reload: function () {
        util_log(this._name + ".reload()");
    },

    // https://developer.mozilla.org/en-US/docs/Web/API/Location/replace
    replace: function (url) {
        util_log(this._name + ".replace(" + url + ")");
        this._props["href"] = url;
    },

    attr: function (name, value) {
        util_log(this._name + ".attr(" + name + ", " + value + ")");
        if (value) this._props[name] = value;
        else return this._props[name];
    }
})
// Do not declare a Location.toJSON method since we need the _props variable in jsjaws.py
Location.toString = () => { return "Location" }
for (let k in Location._props) {
    _defineProperty(Location, k, Location._props);
}

// Point object to lowercase variable for easy access
location = Location;
