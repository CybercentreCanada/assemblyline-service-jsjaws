/*
    Interfaces that we want visibility into
    https://developer.mozilla.org/en-US/docs/Web/API#interfaces
*/

util_log("Preparing sandbox to emulate Web API interfaces.");

AbortController = function () {
    util_log(">>> FIXME: AbortController used");
    return AbortController;
}
AbortSignal = function () {
    util_log(">>> FIXME: AbortSignal used");
    return AbortSignal;
}
AbsoluteOrientationSensor = function () {
    util_log(">>> FIXME: AbsoluteOrientationSensor used");
    return AbsoluteOrientationSensor;
}
AbstractRange = function () {
    util_log(">>> FIXME: AbstractRange used");
    return AbstractRange;
}
Accelerometer = function () {
    util_log(">>> FIXME: Accelerometer used");
    return Accelerometer;
}
AesCbcParams = function () {
    util_log(">>> FIXME: AesCbcParams used");
    return AesCbcParams;
}
AesCtrParams = function () {
    util_log(">>> FIXME: AesCtrParams used");
    return AesCtrParams;
}
AesGcmParams = function () {
    util_log(">>> FIXME: AesGcmParams used");
    return AesGcmParams;
}
AesKeyGenParams = function () {
    util_log(">>> FIXME: AesKeyGenParams used");
    return AesKeyGenParams;
}
AmbientLightSensor = function () {
    util_log(">>> FIXME: AmbientLightSensor used");
    return AmbientLightSensor;
}
AnalyserNode = function () {
    util_log(">>> FIXME: AnalyserNode used");
    return AnalyserNode;
}
ANGLE_instanced_arrays = function () {
    util_log(">>> FIXME: ANGLE_instanced_arrays used");
    return ANGLE_instanced_arrays;
}
Animation = function () {
    util_log(">>> FIXME: Animation used");
    return Animation;
}
AnimationEffect = function () {
    util_log(">>> FIXME: AnimationEffect used");
    return AnimationEffect;
}

AnimationEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "AnimationEvent[" + this.id + "]";

    util_log("new " + this._name);
}
AnimationEvent.prototype = Object.create(Event.prototype);
AnimationEvent.prototype.constructor = AnimationEvent;
AnimationEvent.toString = AnimationEvent.toJSON = () => {
    return "AnimationEvent"
}

AnimationPlaybackEvent = function () {
    util_log(">>> FIXME: AnimationPlaybackEvent used");
    return AnimationPlaybackEvent;
}
AnimationTimeline = function () {
    util_log(">>> FIXME: AnimationTimeline used");
    return AnimationTimeline;
}

// https://developer.mozilla.org/en-US/docs/Web/API/atob
// Since we are overriding the atob alias from abab via AToBAlias to allow us to log interesting values
atob = function (encodedData) {
    let decodedString = AToBAlias(encodedData);
    if (decodedString === null) {
        util_log("Weird, '" + encodedData.toString() + "' was requested to be decoded...");
        return decodedString;
    }
    match = decodedString.match(ONLY_FULL_URI);
    if (match) {
        util_log("atob was seen decoding a URI: '" + match[1] + "'");
    }
    return decodedString;
}

Attr = function () {
    util_log(">>> FIXME: Attr used");
    return Attr;
}
AudioBuffer = function () {
    util_log(">>> FIXME: AudioBuffer used");
    return AudioBuffer;
}
AudioBufferSourceNode = function () {
    util_log(">>> FIXME: AudioBufferSourceNode used");
    return AudioBufferSourceNode;
}
AudioContext = function () {
    util_log(">>> FIXME: AudioContext used");
    return AudioContext;
}
AudioData = function () {
    util_log(">>> FIXME: AudioData used");
    return AudioData;
}
AudioDecoder = function () {
    util_log(">>> FIXME: AudioDecoder used");
    return AudioDecoder;
}
AudioDestinationNode = function () {
    util_log(">>> FIXME: AudioDestinationNode used");
    return AudioDestinationNode;
}
AudioEncoder = function () {
    util_log(">>> FIXME: AudioEncoder used");
    return AudioEncoder;
}
AudioListener = function () {
    util_log(">>> FIXME: AudioListener used");
    return AudioListener;
}
AudioNode = function () {
    util_log(">>> FIXME: AudioNode used");
    return AudioNode;
}
AudioParam = function () {
    util_log(">>> FIXME: AudioParam used");
    return AudioParam;
}
AudioParamDescriptor = function () {
    util_log(">>> FIXME: AudioParamDescriptor used");
    return AudioParamDescriptor;
}
AudioParamMap = function () {
    util_log(">>> FIXME: AudioParamMap used");
    return AudioParamMap;
}

AudioProcessingEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "AudioProcessingEvent[" + this.id + "]";

    util_log("new " + this._name);
}
AudioProcessingEvent.prototype = Object.create(Event.prototype);
AudioProcessingEvent.prototype.constructor = AudioProcessingEvent;
AudioProcessingEvent.toString = AudioProcessingEvent.toJSON = () => {
    return "AudioProcessingEvent"
}

AudioScheduledSourceNode = function () {
    util_log(">>> FIXME: AudioScheduledSourceNode used");
    return AudioScheduledSourceNode;
}
AudioSinkInfo = function () {
    util_log(">>> FIXME: AudioSinkInfo used");
    return AudioSinkInfo;
}
AudioTrack = function () {
    util_log(">>> FIXME: AudioTrack used");
    return AudioTrack;
}
AudioTrackList = function () {
    util_log(">>> FIXME: AudioTrackList used");
    return AudioTrackList;
}
AudioWorklet = function () {
    util_log(">>> FIXME: AudioWorklet used");
    return AudioWorklet;
}
AudioWorkletGlobalScope = function () {
    util_log(">>> FIXME: AudioWorkletGlobalScope used");
    return AudioWorkletGlobalScope;
}
AudioWorkletNode = function () {
    util_log(">>> FIXME: AudioWorkletNode used");
    return AudioWorkletNode;
}
AudioWorkletProcessor = function () {
    util_log(">>> FIXME: AudioWorkletProcessor used");
    return AudioWorkletProcessor;
}
AuthenticatorAssertionResponse = function () {
    util_log(">>> FIXME: AuthenticatorAssertionResponse used");
    return AuthenticatorAssertionResponse;
}
AuthenticatorAttestationResponse = function () {
    util_log(">>> FIXME: AuthenticatorAttestationResponse used");
    return AuthenticatorAttestationResponse;
}
AuthenticatorResponse = function () {
    util_log(">>> FIXME: return AuthenticatorResponse used");
    return AuthenticatorResponse;
}
BackgroundFetchEvent = function () {
    util_log(">>> FIXME: return BackgroundFetchEvent used");
    return BackgroundFetchEvent;
}
BackgroundFetchManager = function () {
    util_log(">>> FIXME: BackgroundFetchManager used");
    return BackgroundFetchManager;
}
BackgroundFetchRecord = function () {
    util_log(">>> FIXME: BackgroundFetchRecord used");
    return BackgroundFetchRecord;
}
BackgroundFetchRegistration = function () {
    util_log(">>> FIXME: BackgroundFetchRegistration used");
    return BackgroundFetchRegistration;
}
BackgroundFetchUpdateUIEvent = function () {
    util_log(">>> FIXME: BackgroundFetchUpdateUIEvent used");
    return BackgroundFetchUpdateUIEvent;
}
BarcodeDetector = function () {
    util_log(">>> FIXME: BarcodeDetector used");
    return BarcodeDetector;
}
BarProp = function () {
    util_log(">>> FIXME: BarProp used");
    return BarProp;
}
BaseAudioContext = function () {
    util_log(">>> FIXME: BaseAudioContext used");
    return BaseAudioContext;
}
BatteryManager = function () {
    util_log(">>> FIXME: BatteryManager used");
    return BatteryManager;
}
BeforeInstallPromptEvent = function () {
    util_log(">>> FIXME: BeforeInstallPromptEvent used");
    return BeforeInstallPromptEvent;
}

BeforeUnloadEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "BeforeUnloadEvent[" + this.id + "]";

    util_log("new " + this._name);
}
BeforeUnloadEvent.prototype = Object.create(Event.prototype);
BeforeUnloadEvent.prototype.constructor = BeforeUnloadEvent;
BeforeUnloadEvent.toString = BeforeUnloadEvent.toJSON = () => {
    return "BeforeUnloadEvent"
}

BiquadFilterNode = function () {
    util_log(">>> FIXME: BiquadFilterNode used");
    return BiquadFilterNode;
}

// https://developer.mozilla.org/en-US/docs/Web/API/Blob
// Since we are overriding the Blob alias from node:buffer via BlobAlias to allow us to write the
//  Blob contents to disk as soon as we see it, we only need to re-implement the
// constructor
Blob = _proxy(function (array, options) {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Blob[" + this.id + "]";

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob#instance_methods
    // We don't need to implement these

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob#instance_properties
    // We don't need to implement these

    // Constructor
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob
    // Do not log "new this._name (" because this._name is Blob[] which will break the signature "creates_blob"
    if (array === undefined && options === undefined) {
        // Don't log or else a signature will hit
        null;
    } else {
        util_log("new Blob(" + _truncateOutput(array) + ", " + options + ")");
    }

    var blob_filename = "Blob[" + this.id + "]";
    if (options && "filename" in options) {
        blob_filename = options["filename"]
        delete options["filename"]
    }

    // Assign the blob contents to the _wscript_saved_files global which will be
    // written to disk after execution
    const blob = new BlobAlias(sources = array, options = options)
    blob.arrayBuffer().then(function (result) {
        _wscript_saved_files[blob_filename] = Buffer.from(result);
    })
    return blob
});
Blob.toString = Blob.toJSON = () => {
    return "Blob"
}

BlobEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "BlobEvent[" + this.id + "]";

    util_log("new " + this._name);
}
BlobEvent.prototype = Object.create(Event.prototype);
BlobEvent.prototype.constructor = BlobEvent;
BlobEvent.toString = BlobEvent.toJSON = () => {
    return "BlobEvent"
}

Bluetooth = function () {
    util_log(">>> FIXME: Bluetooth used");
    return Bluetooth;
}
BluetoothCharacteristicProperties = function () {
    util_log(">>> FIXME: BluetoothCharacteristicProperties used");
    return BluetoothCharacteristicProperties;
}
BluetoothDevice = function () {
    util_log(">>> FIXME: BluetoothDevice used");
    return BluetoothDevice;
}
BluetoothRemoteGATTCharacteristic = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTCharacteristic used");
    return BluetoothRemoteGATTCharacteristic;
}
BluetoothRemoteGATTDescriptor = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTDescriptor used");
    return BluetoothRemoteGATTDescriptor;
}
BluetoothRemoteGATTServer = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTServer used");
    return BluetoothRemoteGATTServer;
}
BluetoothRemoteGATTService = function () {
    util_log(">>> FIXME: BluetoothRemoteGATTService used");
    return BluetoothRemoteGATTService;
}
BluetoothUUID = function () {
    util_log(">>> FIXME: BluetoothUUID used");
    return BluetoothUUID;
}
BroadcastChannel = function () {
    util_log(">>> FIXME: BroadcastChannel used");
    return BroadcastChannel;
}

// https://developer.mozilla.org/en-US/docs/Web/API/btoa
// Since we are overriding the btoa alias from abab via BtoAAlias to allow us to log interesting values
btoa = function (stringToEncode) {
    if (typeof stringToEncode === "number") stringToEncode = stringToEncode.toString();
    match = stringToEncode.match(ONLY_FULL_URI);
    if (match) {
        util_log("btoa was seen encoding a URI: '" + match[1] + "'");
    }
    return BToAAlias(stringToEncode);
}

ByteLengthQueuingStrategy = function () {
    util_log(">>> FIXME: ByteLengthQueuingStrategy used");
    return ByteLengthQueuingStrategy;
}
Cache = function () {
    util_log(">>> FIXME: Cache used");
    return Cache;
}
caches = function () {
    util_log(">>> FIXME: caches used");
    return caches;
}
CacheStorage = function () {
    util_log(">>> FIXME: CacheStorage used");
    return CacheStorage;
}
CanMakePaymentEvent = function () {
    util_log(">>> FIXME: CanMakePaymentEvent used");
    return CanMakePaymentEvent;
}
CanvasCaptureMediaStreamTrack = function () {
    util_log(">>> FIXME: CanvasCaptureMediaStreamTrack used");
    return CanvasCaptureMediaStreamTrack;
}
CanvasGradient = function () {
    util_log(">>> FIXME: CanvasGradient used");
    return CanvasGradient;
}
CanvasPattern = function () {
    util_log(">>> FIXME: CanvasPattern used");
    return CanvasPattern;
}
CanvasRenderingContext2D = function () {
    util_log(">>> FIXME: CanvasRenderingContext2D used");
    return CanvasRenderingContext2D;
}
CaptureController = function () {
    util_log(">>> FIXME: CaptureController used");
    return CaptureController;
}
CaretPosition = function () {
    util_log(">>> FIXME: CaretPosition used");
    return CaretPosition;
}
CDATASection = function () {
    util_log(">>> FIXME: CDATASection used");
    return CDATASection;
}
ChannelMergerNode = function () {
    util_log(">>> FIXME: ChannelMergerNode used");
    return ChannelMergerNode;
}
ChannelSplitterNode = function () {
    util_log(">>> FIXME: ChannelSplitterNode used");
    return ChannelSplitterNode;
}
CharacterData = function () {
    util_log(">>> FIXME: CharacterData used");
    return CharacterData;
}

// https://developer.mozilla.org/en-US/docs/Web/API/clearInterval
// _clearInterval is passed in from jailme.js
clearInterval = function () {
    util_log(this._name + ".clearInterval(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    _clearInterval.apply(this, Array.prototype.slice.call(arguments, 0));
}

// https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout
// _clearTimeout is passed in from jailme.js
clearTimeout = function () {
    util_log(this._name + ".clearTimeout(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    _clearTimeout.apply(this, Array.prototype.slice.call(arguments, 0));
}

Client = function () {
    util_log(">>> FIXME: Client used");
    return Client;
}
Clients = function () {
    util_log(">>> FIXME: Clients used");
    return Clients;
}
Clipboard = function () {
    util_log(">>> FIXME: Clipboard used");
    return Clipboard;
}

ClipboardEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "ClipboardEvent[" + this.id + "]";

    util_log("new " + this._name);
}
ClipboardEvent.prototype = Object.create(Event.prototype);
ClipboardEvent.prototype.constructor = ClipboardEvent;
ClipboardEvent.toString = ClipboardEvent.toJSON = () => {
    return "ClipboardEvent"
}

ClipboardItem = function () {
    util_log(">>> FIXME: ClipboardItem used");
    return ClipboardItem;
}

CloseEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "CloseEvent[" + this.id + "]";

    util_log("new " + this._name);
}
CloseEvent.prototype = Object.create(Event.prototype);
CloseEvent.prototype.constructor = CloseEvent;
CloseEvent.toString = CloseEvent.toJSON = () => {
    return "CloseEvent"
}

Comment = function () {
    util_log(">>> FIXME: Comment used");
    return Comment;
}

CompositionEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "CompositionEvent[" + this.id + "]";

    util_log("new " + this._name);
}
CompositionEvent.prototype = Object.create(Event.prototype);
CompositionEvent.prototype.constructor = CompositionEvent;
CompositionEvent.toString = CompositionEvent.toJSON = () => {
    return "CompositionEvent"
}

CompressionStream = function () {
    util_log(">>> FIXME: CompressionStream used");
    return CompressionStream;
}

// This is defined in console.js
// console = function () { }

ConstantSourceNode = function () {
    util_log(">>> FIXME: ConstantSourceNode used");
    return ConstantSourceNode;
}
ContactAddress = function () {
    util_log(">>> FIXME: ContactAddress used");
    return ContactAddress;
}
ContactsManager = function () {
    util_log(">>> FIXME: ContactsManager used");
    return ContactsManager;
}
ContentIndex = function () {
    util_log(">>> FIXME: ContentIndex used");
    return ContentIndex;
}
ContentIndexEvent = function () {
    util_log(">>> FIXME: ContentIndexEvent used");
    return ContentIndexEvent;
}
ContentVisibilityAutoStateChangeEvent = function () {
    util_log(">>> FIXME: ContentVisibilityAutoStateChangeEvent used");
    return ContentVisibilityAutoStateChangeEvent;
}
ConvolverNode = function () {
    util_log(">>> FIXME: ConvolverNode used");
    return ConvolverNode;
}
CookieChangeEvent = function () {
    util_log(">>> FIXME: CookieChangeEvent used");
    return CookieChangeEvent;
}
CookieStore = function () {
    util_log(">>> FIXME: CookieStore used");
    return CookieStore;
}
CookieStoreManager = function () {
    util_log(">>> FIXME: CookieStoreManager used");
    return CookieStoreManager;
}
CountQueuingStrategy = function () {
    util_log(">>> FIXME: CountQueuingStrategy used");
    return CountQueuingStrategy;
}
createImageBitmap = function () {
    util_log(">>> FIXME: createImageBitmap used");
    return createImageBitmap;
}
Credential = function () {
    util_log(">>> FIXME: Credential used");
    return Credential;
}
CredentialsContainer = function () {
    util_log(">>> FIXME: CredentialsContainer used");
    return CredentialsContainer;
}
crossOriginIsolated = function () {
    util_log(">>> FIXME: crossOriginIsolated used");
    return crossOriginIsolated;
}
Crypto = function () {
    util_log(">>> FIXME: Crypto used");
    return Crypto;
}
CryptoKey = function () {
    util_log(">>> FIXME: CryptoKey used");
    return CryptoKey;
}
CryptoKeyPair = function () {
    util_log(">>> FIXME: CryptoKeyPair used");
    return CryptoKeyPair;
}
CSPViolationReportBody = function () {
    util_log(">>> FIXME: CSPViolationReportBody used");
    return CSPViolationReportBody;
}
CSS = function () {
    util_log(">>> FIXME: CSS used");
    return CSS;
}
CSSAnimation = function () {
    util_log(">>> FIXME: CSSAnimation used");
    return CSSAnimation;
}
CSSConditionRule = function () {
    util_log(">>> FIXME: CSSConditionRule used");
    return CSSConditionRule;
}
CSSCounterStyleRule = function () {
    util_log(">>> FIXME: CSSCounterStyleRule used");
    return CSSCounterStyleRule;
}
CSSFontFaceRule = function () {
    util_log(">>> FIXME: CSSFontFaceRule used");
    return CSSFontFaceRule;
}
CSSGroupingRule = function () {
    util_log(">>> FIXME: CSSGroupingRule used");
    return CSSGroupingRule;
}
CSSImageValue = function () {
    util_log(">>> FIXME: CSSImageValue used");
    return CSSImageValue;
}
CSSImportRule = function () {
    util_log(">>> FIXME: CSSImportRule used");
    return CSSImportRule;
}
CSSKeyframeRule = function () {
    util_log(">>> FIXME: CSSKeyframeRule used");
    return CSSKeyframeRule;
}
CSSKeyframesRule = function () {
    util_log(">>> FIXME: CSSKeyframesRule used");
    return CSSKeyframesRule;
}
CSSKeywordValue = function () {
    util_log(">>> FIXME: CSSKeywordValue used");
    return CSSKeywordValue;
}
CSSMathInvert = function () {
    util_log(">>> FIXME: CSSMathInvert used");
    return CSSMathInvert;
}
CSSMathMax = function () {
    util_log(">>> FIXME: CSSMathMax used");
    return CSSMathMax;
}
CSSMathMin = function () {
    util_log(">>> FIXME: CSSMathMin used");
    return CSSMathMin;
}
CSSMathNegate = function () {
    util_log(">>> FIXME: CSSMathNegate used");
    return CSSMathNegate;
}
CSSMathProduct = function () {
    util_log(">>> FIXME: CSSMathProduct used");
    return CSSMathProduct;
}
CSSMathSum = function () {
    util_log(">>> FIXME: CSSMathSum used");
    return CSSMathSum;
}
CSSMathValue = function () {
    util_log(">>> FIXME: CSSMathValue used");
    return CSSMathValue;
}
CSSMatrixComponent = function () {
    util_log(">>> FIXME: CSSMatrixComponent used");
    return CSSMatrixComponent;
}
CSSMediaRule = function () {
    util_log(">>> FIXME: CSSMediaRule used");
    return CSSMediaRule;
}
CSSNamespaceRule = function () {
    util_log(">>> FIXME: CSSNamespaceRule used");
    return CSSNamespaceRule;
}
CSSNumericArray = function () {
    util_log(">>> FIXME: CSSNumericArray used");
    return CSSNumericArray;
}
CSSNumericValue = function () {
    util_log(">>> FIXME: CSSNumericValue used");
    return CSSNumericValue;
}
CSSPageRule = function () {
    util_log(">>> FIXME: CSSPageRule used");
    return CSSPageRule;
}
CSSPerspective = function () {
    util_log(">>> FIXME: CSSPerspective used");
    return CSSPerspective;
}
CSSPositionValue = function () {
    util_log(">>> FIXME: CSSPositionValue used");
    return CSSPositionValue;
}
CSSPrimitiveValue = function () {
    util_log(">>> FIXME: CSSPrimitiveValue used");
    return CSSPrimitiveValue;
}
CSSPropertyRule = function () {
    util_log(">>> FIXME: CSSPropertyRule used");
    return CSSPropertyRule;
}
CSSPseudoElement = function () {
    util_log(">>> FIXME: CSSPseudoElement used");
    return CSSPseudoElement;
}
CSSRotate = function () {
    util_log(">>> FIXME: CSSRotate used");
    return CSSRotate;
}
CSSRule = function () {
    util_log(">>> FIXME: CSSRule used");
    return CSSRule;
}
CSSRuleList = function () {
    util_log(">>> FIXME: CSSRuleList used");
    return CSSRuleList;
}
CSSScale = function () {
    util_log(">>> FIXME: CSSScale used");
    return CSSScale;
}
CSSSkew = function () {
    util_log(">>> FIXME: CSSSkew used");
    return CSSSkew;
}
CSSSkewX = function () {
    util_log(">>> FIXME: CSSSkewX used");
    return CSSSkewX;
}
CSSSkewY = function () {
    util_log(">>> FIXME: CSSSkewY used");
    return CSSSkewY;
}
CSSStyleDeclaration = function () {
    util_log(">>> FIXME: CSSStyleDeclaration used");
    return CSSStyleDeclaration;
}
CSSStyleRule = function () {
    util_log(">>> FIXME: CSSStyleRule used");
    return CSSStyleRule;
}
CSSStyleSheet = function () {
    util_log(">>> FIXME: CSSStyleSheet used");
    return CSSStyleSheet;
}
CSSStyleValue = function () {
    util_log(">>> FIXME: CSSStyleValue used");
    return CSSStyleValue;
}
CSSSupportsRule = function () {
    util_log(">>> FIXME: CSSSupportsRule used");
    return CSSSupportsRule;
}
CSSTransformComponent = function () {
    util_log(">>> FIXME: CSSTransformComponent used");
    return CSSTransformComponent;
}
CSSTransformValue = function () {
    util_log(">>> FIXME: CSSTransformValue used");
    return CSSTransformValue;
}
CSSTransition = function () {
    util_log(">>> FIXME: CSSTransition used");
    return CSSTransition;
}
CSSTranslate = function () {
    util_log(">>> FIXME: CSSTranslate used");
    return CSSTranslate;
}
CSSUnitValue = function () {
    util_log(">>> FIXME: CSSUnitValue used");
    return CSSUnitValue;
}
CSSUnparsedValue = function () {
    util_log(">>> FIXME: CSSUnparsedValue used");
    return CSSUnparsedValue;
}
CSSValue = function () {
    util_log(">>> FIXME: CSSValue used");
    return CSSValue;
}
CSSValueList = function () {
    util_log(">>> FIXME: CSSValueList used");
    return CSSValueList;
}
CSSVariableReferenceValue = function () {
    util_log(">>> FIXME: CSSVariableReferenceValue used");
    return CSSVariableReferenceValue;
}
CustomElementRegistry = function () {
    util_log(">>> FIXME: CustomElementRegistry used");
    return CustomElementRegistry;
}

CustomEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "CustomEvent[" + this.id + "]";

    util_log("new " + this._name);
}
CustomEvent.prototype = Object.create(Event.prototype);
CustomEvent.prototype.constructor = CustomEvent;
CustomEvent.toString = CustomEvent.toJSON = () => {
    return "CustomEvent"
}

CustomStateSet = function () {
    util_log(">>> FIXME: CustomStateSet used");
    return CustomStateSet;
}
DataTransfer = function () {
    util_log(">>> FIXME: DataTransfer used");
    return DataTransfer;
}
DataTransferItem = function () {
    util_log(">>> FIXME: DataTransferItem used");
    return DataTransferItem;
}
DataTransferItemList = function () {
    util_log(">>> FIXME: DataTransferItemList used");
    return DataTransferItemList;
}
DecompressionStream = function () {
    util_log(">>> FIXME: DecompressionStream used");
    return DecompressionStream;
}
DedicatedWorkerGlobalScope = function () {
    util_log(">>> FIXME: DedicatedWorkerGlobalScope used");
    return DedicatedWorkerGlobalScope;
}
DelayNode = function () {
    util_log(">>> FIXME: DelayNode used");
    return DelayNode;
}
DeprecationReportBody = function () {
    util_log(">>> FIXME: DeprecationReportBody used");
    return DeprecationReportBody;
}

DeviceMotionEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "DeviceMotionEvent[" + this.id + "]";

    util_log("new " + this._name);
}
DeviceMotionEvent.prototype = Object.create(Event.prototype);
DeviceMotionEvent.prototype.constructor = DeviceMotionEvent;
DeviceMotionEvent.toString = DeviceMotionEvent.toJSON = () => {
    return "DeviceMotionEvent"
}

DeviceMotionEventAcceleration = function () {
    util_log(">>> FIXME: DeviceMotionEventAcceleration used");
    return DeviceMotionEventAcceleration;
}
DeviceMotionEventRotationRate = function () {
    util_log(">>> FIXME: DeviceMotionEventRotationRate used");
    return DeviceMotionEventRotationRate;
}

DeviceOrientationEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "DeviceOrientationEvent[" + this.id + "]";

    util_log("new " + this._name);
}
DeviceOrientationEvent.prototype = Object.create(Event.prototype);
DeviceOrientationEvent.prototype.constructor = DeviceOrientationEvent;
DeviceOrientationEvent.toString = DeviceOrientationEvent.toJSON = () => {
    return "DeviceOrientationEvent"
}

DeviceProximityEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "DeviceProximityEvent[" + this.id + "]";

    util_log("new " + this._name);
}
DeviceProximityEvent.prototype = Object.create(Event.prototype);
DeviceProximityEvent.prototype.constructor = DeviceProximityEvent;
DeviceProximityEvent.toString = DeviceProximityEvent.toJSON = () => {
    return "DeviceProximityEvent"
}

DirectoryEntrySync = function () {
    util_log(">>> FIXME: DirectoryEntrySync used");
    return DirectoryEntrySync;
}
DirectoryReaderSync = function () {
    util_log(">>> FIXME: DirectoryReaderSync used");
    return DirectoryReaderSync;
}

// This is defined in document.js
// Document = function () { }

DocumentFragment = function () {
    util_log(">>> FIXME: DocumentFragment used");
    return DocumentFragment;
}
DocumentTimeline = function () {
    util_log(">>> FIXME: DocumentTimeline used");
    return DocumentTimeline;
}
DocumentType = function () {
    util_log(">>> FIXME: DocumentType used");
    return DocumentType;
}
DOMError = function () {
    util_log(">>> FIXME: DOMError used");
    return DOMError;
}
DOMException = function () {
    util_log(">>> FIXME: DOMException used");
    return DOMException;
}
DOMHighResTimeStamp = function () {
    util_log(">>> FIXME: DOMHighResTimeStamp used");
    return DOMHighResTimeStamp;
}
DOMImplementation = function () {
    util_log(">>> FIXME: DOMImplementation used");
    return DOMImplementation;
}
DOMMatrix = function () {
    util_log(">>> FIXME: DOMMatrix used");
    return DOMMatrix;
}
DOMMatrixReadOnly = function () {
    util_log(">>> FIXME: DOMMatrixReadOnly used");
    return DOMMatrixReadOnly;
}
DOMParser = function () {
    util_log(">>> FIXME: DOMParser used");
    return DOMParser;
}
DOMPoint = function () {
    util_log(">>> FIXME: DOMPoint used");
    return DOMPoint;
}
DOMPointReadOnly = function () {
    util_log(">>> FIXME: DOMPointReadOnly used");
    return DOMPointReadOnly;
}
DOMQuad = function () {
    util_log(">>> FIXME: DOMQuad used");
    return DOMQuad;
}
DOMRect = function () {
    util_log(">>> FIXME: DOMRect used");
    return DOMRect;
}
DOMRectReadOnly = function () {
    util_log(">>> FIXME: DOMRectReadOnly used");
    return DOMRectReadOnly;
}
DOMStringList = function () {
    util_log(">>> FIXME: DOMStringList used");
    return DOMStringList;
}
DOMStringMap = function () {
    util_log(">>> FIXME: DOMStringMap used");
    return DOMStringMap;
}
DOMTokenList = function () {
    util_log(">>> FIXME: DOMTokenList used");
    return DOMTokenList;
}

DragEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "DragEvent[" + this.id + "]";

    util_log("new " + this._name);
}
DragEvent.prototype = Object.create(Event.prototype);
DragEvent.prototype.constructor = DragEvent;
DragEvent.toString = DragEvent.toJSON = () => {
    return "DragEvent"
}

DynamicsCompressorNode = function () {
    util_log(">>> FIXME: DynamicsCompressorNode used");
    return DynamicsCompressorNode;
}
EcdhKeyDeriveParams = function () {
    util_log(">>> FIXME: EcdhKeyDeriveParams used");
    return EcdhKeyDeriveParams;
}
EcdsaParams = function () {
    util_log(">>> FIXME: EcdsaParams used");
    return EcdsaParams;
}
EcKeyGenParams = function () {
    util_log(">>> FIXME: EcKeyGenParams used");
    return EcKeyGenParams;
}
EcKeyImportParams = function () {
    util_log(">>> FIXME: EcKeyImportParams used");
    return EcKeyImportParams;
}

// This is defined in element.js
// Element = function () { }

ElementInternals = function () {
    util_log(">>> FIXME: ElementInternals used");
    return ElementInternals;
}
EncodedAudioChunk = function () {
    util_log(">>> FIXME: EncodedAudioChunk used");
    return EncodedAudioChunk;
}
EncodedVideoChunk = function () {
    util_log(">>> FIXME: EncodedVideoChunk used");
    return EncodedVideoChunk;
}

ErrorEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "ErrorEvent[" + this.id + "]";

    util_log("new " + this._name);
}
ErrorEvent.prototype = Object.create(Event.prototype);
ErrorEvent.prototype.constructor = ErrorEvent;
ErrorEvent.toString = ErrorEvent.toJSON = () => {
    return "ErrorEvent"
}

// Defined in event.js
// Event = function () { }

EventCounts = function () {
    util_log(">>> FIXME: EventCounts used");
    return EventCounts;
}
EventSource = function () {
    util_log(">>> FIXME: EventSource used");
    return EventSource;
}

// This is defined in element.js
// EventTarget = function () { }

EXT_blend_minmax = function () {
    util_log(">>> FIXME: EXT_blend_minmax used");
    return EXT_blend_minmax;
}
EXT_color_buffer_float = function () {
    util_log(">>> FIXME: EXT_color_buffer_float used");
    return EXT_color_buffer_float;
}
EXT_color_buffer_half_float = function () {
    util_log(">>> FIXME: EXT_color_buffer_half_float used");
    return EXT_color_buffer_half_float;
}
EXT_disjoint_timer_query = function () {
    util_log(">>> FIXME: EXT_disjoint_timer_query used");
    return EXT_disjoint_timer_query;
}
EXT_float_blend = function () {
    util_log(">>> FIXME: EXT_float_blend used");
    return EXT_float_blend;
}
EXT_frag_depth = function () {
    util_log(">>> FIXME: EXT_frag_depth used");
    return EXT_frag_depth;
}
EXT_shader_texture_lod = function () {
    util_log(">>> FIXME: EXT_shader_texture_lod used");
    return EXT_shader_texture_lod;
}
EXT_sRGB = function () {
    util_log(">>> FIXME: EXT_sRGB used");
    return EXT_sRGB;
}
EXT_texture_compression_bptc = function () {
    util_log(">>> FIXME: EXT_texture_compression_bptc used");
    return EXT_texture_compression_bptc;
}
EXT_texture_compression_rgtc = function () {
    util_log(">>> FIXME: EXT_texture_compression_rgtc used");
    return EXT_texture_compression_rgtc;
}
EXT_texture_filter_anisotropic = function () {
    util_log(">>> FIXME: EXT_texture_filter_anisotropic used");
    return EXT_texture_filter_anisotropic;
}
EXT_texture_norm16 = function () {
    util_log(">>> FIXME: EXT_texture_norm16 used");
    return EXT_texture_norm16;
}
ExtendableCookieChangeEvent = function () {
    util_log(">>> FIXME: ExtendableCookieChangeEvent used");
    return ExtendableCookieChangeEvent;
}
ExtendableEvent = function () {
    util_log(">>> FIXME: ExtendableEvent used");
    return ExtendableEvent;
}
ExtendableMessageEvent = function () {
    util_log(">>> FIXME: ExtendableMessageEvent used");
    return ExtendableMessageEvent;
}
EyeDropper = function () {
    util_log(">>> FIXME: EyeDropper used");
    return EyeDropper;
}
FeaturePolicy = function () {
    util_log(">>> FIXME: FeaturePolicy used");
    return FeaturePolicy;
}
FederatedCredential = function () {
    util_log(">>> FIXME: FederatedCredential used");
    return FederatedCredential;
}

// https://developer.mozilla.org/en-US/docs/Web/API/fetch
// We need to declare this before Document
fetch = function (url) {
    util_log("fetch(" + url + ")");
    var ret = new XMLHttpRequest();
    ret.open("get", url);
    ret.send();
    if (is_domain_geo(url)) {
        var response = new Response(JSON.stringify(domain_geo_response));
        return response;
    } else {
        return new Response();
    }
}

FetchEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "FetchEvent[" + this.id + "]";

    util_log("new " + this._name);
}
FetchEvent.prototype = Object.create(Event.prototype);
FetchEvent.prototype.constructor = FetchEvent;
FetchEvent.toString = FetchEvent.toJSON = () => {
    return "FetchEvent"
}

// https://developer.mozilla.org/en-US/docs/Web/API/File
File = _proxy(function (bits, name, options = undefined) {
    Blob.call(this);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/File#instance_methods
    // All instance methods are inherited from the Blob interface

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/File#instance_properties

    _defineSingleProperty(this, "lastModified")
    _defineSingleProperty(this, "lastModifiedDate")

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    _defineSingleProperty(this, "webkitRelativePath")

    // File implements Blob, so the following properties are inherited from the Blob interface
    // _defineSingleProperty(this, "size")
    // _defineSingleProperty(this, "type")

    // Constructor
    // https://developer.mozilla.org/en-US/docs/Web/API/File/File
    util_log("new File(" + bits + ", " + name + ", " + options + ")")
    options["filename"] = name;
    const blob = new Blob(bits, options);

    // We don't need to write the contents to a _wscript_save_file because the Blob class already does that...
    return blob;
});
File.prototype = Object.create(Blob.prototype);
File.prototype.constructor = File;
File.toString = File.toJSON = () => {
    return "File"
}

FileEntrySync = function () {
    util_log(">>> FIXME: FileEntrySync used");
    return FileEntrySync;
}
FileList = function () {
    util_log(">>> FIXME: FileList used");
    return FileList;
}
FileReader = function () {
    util_log(">>> FIXME: FileReader used");
    return FileReader;
}
FileReaderSync = function () {
    util_log(">>> FIXME: FileReaderSync used");
    return FileReaderSync;
}
FileSystem = function () {
    util_log(">>> FIXME: FileSystem used");
    return FileSystem;
}
FileSystemDirectoryEntry = function () {
    util_log(">>> FIXME: FileSystemDirectoryEntry used");
    return FileSystemDirectoryEntry;
}
FileSystemDirectoryHandle = function () {
    util_log(">>> FIXME: FileSystemDirectoryHandle used");
    return FileSystemDirectoryHandle;
}
FileSystemDirectoryReader = function () {
    util_log(">>> FIXME: FileSystemDirectoryReader used");
    return FileSystemDirectoryReader;
}
FileSystemEntry = function () {
    util_log(">>> FIXME: FileSystemEntry used");
    return FileSystemEntry;
}
FileSystemFileEntry = function () {
    util_log(">>> FIXME: FileSystemFileEntry used");
    return FileSystemFileEntry;
}
FileSystemFileHandle = function () {
    util_log(">>> FIXME: FileSystemFileHandle used");
    return FileSystemFileHandle;
}
FileSystemHandle = function () {
    util_log(">>> FIXME: FileSystemHandle used");
    return FileSystemHandle;
}
FileSystemSync = function () {
    util_log(">>> FIXME: FileSystemSync used");
    return FileSystemSync;
}
FileSystemSyncAccessHandle = function () {
    util_log(">>> FIXME: FileSystemSyncAccessHandle used");
    return FileSystemSyncAccessHandle;
}
FileSystemWritableFileStream = function () {
    util_log(">>> FIXME: FileSystemWritableFileStream used");
    return FileSystemWritableFileStream;
}

FocusEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "FocusEvent[" + this.id + "]";

    util_log("new " + this._name);
}
FocusEvent.prototype = Object.create(Event.prototype);
FocusEvent.prototype.constructor = FocusEvent;
FocusEvent.toString = FocusEvent.toJSON = () => {
    return "FocusEvent"
}

FontData = function () {
    util_log(">>> FIXME: FontData used");
    return FontData;
}
FontFace = function () {
    util_log(">>> FIXME: FontFace used");
    return FontFace;
}
FontFaceSet = function () {
    util_log(">>> FIXME: FontFaceSet used");
    return FontFaceSet;
}

FontFaceSetLoadEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "FontFaceSetLoadEvent[" + this.id + "]";

    util_log("new " + this._name);
}
FontFaceSetLoadEvent.prototype = Object.create(Event.prototype);
FontFaceSetLoadEvent.prototype.constructor = FontFaceSetLoadEvent;
FontFaceSetLoadEvent.toString = FontFaceSetLoadEvent.toJSON = () => {
    return "FontFaceSetLoadEvent"
}

FormData = function () {
    util_log(">>> FIXME: FormData used");
    return FormData;
}

FormDataEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "FormDataEvent[" + this.id + "]";

    util_log("new " + this._name);
}
FormDataEvent.prototype = Object.create(Event.prototype);
FormDataEvent.prototype.constructor = FormDataEvent;
FormDataEvent.toString = FormDataEvent.toJSON = () => {
    return "FormDataEvent"
}

FragmentDirective = function () {
    util_log(">>> FIXME: FragmentDirective used");
    return FragmentDirective;
}
GainNode = function () {
    util_log(">>> FIXME: GainNode used");
    return GainNode;
}
Gamepad = function () {
    util_log(">>> FIXME: Gamepad used");
    return Gamepad;
}
GamepadButton = function () {
    util_log(">>> FIXME: GamepadButton used");
    return GamepadButton;
}

GamepadEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "GamepadEvent[" + this.id + "]";

    util_log("new " + this._name);
}
GamepadEvent.prototype = Object.create(Event.prototype);
GamepadEvent.prototype.constructor = GamepadEvent;
GamepadEvent.toString = GamepadEvent.toJSON = () => {
    return "GamepadEvent"
}

GamepadHapticActuator = function () {
    util_log(">>> FIXME: GamepadHapticActuator used");
    return GamepadHapticActuator;
}
GamepadPose = function () {
    util_log(">>> FIXME: GamepadPose used");
    return GamepadPose;
}
Geolocation = function () {
    util_log(">>> FIXME: Geolocation used");
    return Geolocation;
}
GeolocationCoordinates = function () {
    util_log(">>> FIXME: GeolocationCoordinates used");
    return GeolocationCoordinates;
}
GeolocationPosition = function () {
    util_log(">>> FIXME: GeolocationPosition used");
    return GeolocationPosition;
}
GeolocationPositionError = function () {
    util_log(">>> FIXME: GeolocationPositionError used");
    return GeolocationPositionError;
}
GestureEvent = function () {
    util_log(">>> FIXME: GestureEvent used");
    return GestureEvent;
}
GravitySensor = function () {
    util_log(">>> FIXME: GravitySensor used");
    return GravitySensor;
}
Gyroscope = function () {
    util_log(">>> FIXME: Gyroscope used");
    return Gyroscope;
}

HashChangeEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "HashChangeEvent[" + this.id + "]";

    util_log("new " + this._name);
}
HashChangeEvent.prototype = Object.create(Event.prototype);
HashChangeEvent.prototype.constructor = HashChangeEvent;
HashChangeEvent.toString = HashChangeEvent.toJSON = () => {
    return "HashChangeEvent"
}

Headers = function () {
    util_log(">>> FIXME: Headers used");
    return Headers;
}
HID = function () {
    util_log(">>> FIXME: HID used");
    return HID;
}
HIDConnectionEvent = function () {
    util_log(">>> FIXME: HIDConnectionEvent used");
    return HIDConnectionEvent;
}
HIDDevice = function () {
    util_log(">>> FIXME: HIDDevice used");
    return HIDDevice;
}

HIDInputReportEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "HIDInputReportEvent[" + this.id + "]";

    util_log("new " + this._name);
}
HIDInputReportEvent.prototype = Object.create(Event.prototype);
HIDInputReportEvent.prototype.constructor = HIDInputReportEvent;
HIDInputReportEvent.toString = HIDInputReportEvent.toJSON = () => {
    return "HIDInputReportEvent"
}

Highlight = function () {
    util_log(">>> FIXME: Highlight used");
    return Highlight;
}
HighlightRegistry = function () {
    util_log(">>> FIXME: HighlightRegistry used");
    return HighlightRegistry;
}
History = function () {
    util_log(">>> FIXME: History used");
    return History;
}
HkdfParams = function () {
    util_log(">>> FIXME: HkdfParams used");
    return HkdfParams;
}
HmacImportParams = function () {
    util_log(">>> FIXME: HmacImportParams used");
    return HmacImportParams;
}
HmacKeyGenParams = function () {
    util_log(">>> FIXME: HmacKeyGenParams used");
    return HmacKeyGenParams;
}
HMDVRDevice = function () {
    util_log(">>> FIXME: HMDVRDevice used");
    return HMDVRDevice;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
HTMLAnchorElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "a");

    // Key properties for MalwareJail
    this._name = "HTMLAnchorElement[" + this._id + "]";

    this.elementName = "a";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement#instance_properties

    _defineSingleProperty(this, "download");
    _defineSingleProperty(this, "hash");
    _defineSingleProperty(this, "host");
    _defineSingleProperty(this, "hostname");
    _defineSingleProperty(this, "href");
    _defineSingleProperty(this, "origin");
    _defineSingleProperty(this, "password");
    _defineSingleProperty(this, "pathname");
    _defineSingleProperty(this, "port");
    _defineSingleProperty(this, "protocol");
    _defineSingleProperty(this, "referrerPolicy");
    _defineSingleProperty(this, "rel");
    _defineSingleProperty(this, "relList");
    _defineSingleProperty(this, "search");
    _defineSingleProperty(this, "username");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes

    _defineSingleProperty(this, "hreflang");
    _defineSingleProperty(this, "ping");
    _defineSingleProperty(this, "target");
    _defineSingleProperty(this, "type");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#deprecated_attributes

    _defineSingleProperty(this, "charset");
    _defineSingleProperty(this, "coords");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    _defineSingleProperty(this, "rev");
    _defineSingleProperty(this, "shape");

    // Random attributes

    _defineSingleProperty(this, "alt");
});
HTMLAnchorElement.prototype = Object.create(HTMLElement.prototype);
HTMLAnchorElement.prototype.constructor = HTMLAnchorElement;
HTMLAnchorElement.toString = HTMLAnchorElement.toJSON = () => {
    return "Anchor"
}

HTMLAreaElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "area");

    // Key properties for MalwareJail
    this._name = "HTMLAreaElement[" + this._id + "]";

    this.elementName = "area";
    util_log("new " + this._name + "()");
}
HTMLAreaElement.prototype = Object.create(HTMLElement.prototype);
HTMLAreaElement.prototype.constructor = HTMLAreaElement;
HTMLAreaElement.toString = HTMLAreaElement.toJSON = () => {
    return "HTMLAreaElement"
}
HTMLAudioElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "audio");

    // Key properties for MalwareJail
    this._name = "HTMLAudioElement[" + this._id + "]";

    this.elementName = "audio";
    util_log("new " + this._name + "()");

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });
}
HTMLAudioElement.prototype = Object.create(HTMLElement.prototype);
HTMLAudioElement.prototype.constructor = HTMLAudioElement;
HTMLAudioElement.toString = HTMLAudioElement.toJSON = () => {
    return "HTMLAudioElement"
}
HTMLBaseElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "base");

    // Key properties for MalwareJail
    this._name = "HTMLBaseElement[" + this._id + "]";

    this.elementName = "base";
    util_log("new " + this._name + "()");
}
HTMLBaseElement.prototype = Object.create(HTMLElement.prototype);
HTMLBaseElement.prototype.constructor = HTMLBaseElement;
HTMLBaseElement.toString = HTMLBaseElement.toJSON = () => {
    return "HTMLBaseElement"
}

HTMLBodyElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "body");

    // Key properties for MalwareJail
    this._name = "HTMLBodyElement[" + this._id + "]";

    this.elementName = "body";
    util_log("new " + this._name + "()");
}
HTMLBodyElement.prototype = Object.create(HTMLElement.prototype);
HTMLBodyElement.prototype.constructor = HTMLBodyElement;
HTMLBodyElement.toString = HTMLBodyElement.toJSON = () => {
    return "HTMLBodyElement"
}

HTMLBRElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "br");

    // Key properties for MalwareJail
    this._name = "HTMLBRElement[" + this._id + "]";

    this.elementName = "br";
    util_log("new " + this._name + "()");
}
HTMLBRElement.prototype = Object.create(HTMLElement.prototype);
HTMLBRElement.prototype.constructor = HTMLBRElement;
HTMLBRElement.toString = HTMLBRElement.toJSON = () => {
    return "HTMLBRElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement
HTMLButtonElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "button");

    // Key properties for MalwareJail
    this._name = "HTMLButtonElement[" + this._id + "]";

    this.elementName = "button";
    util_log("new " + this._name + "()");

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement#instance_methods

    // Not sure where this method came from

    this.on = function (action, fn) {
        if (fn.constructor.name === "Function") {
            var function_name = fn.prototype.name;
            if (function_name === undefined) {
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                function_name = "anonymous";
            }
            util_log(this._name + "." + action + "(" + function_name + ")")
            util_log("Running function " + function_name + "()");
            fn();
        }
        else {
            util_log("That's weird, a non-function was passed to button.on...")
        }
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement#instance_properties

    // This property is defined in element.js
    // _defineSingleProperty(this, "accessKey");

    _defineSingleProperty(this, "autofocus");
    _defineSingleProperty(this, "disabled");
    _defineSingleProperty(this, "form");
    _defineSingleProperty(this, "formAction");
    _defineSingleProperty(this, "formEnctype");
    _defineSingleProperty(this, "formMethod");
    _defineSingleProperty(this, "formNoValidate");
    _defineSingleProperty(this, "formTarget");
    _defineSingleProperty(this, "labels");
    _defineSingleProperty(this, "menu");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    // This property is defined in element.js
    // _defineSingleProperty(this, "tabIndex");

    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "willValidate");
    _defineSingleProperty(this, "validationMessage");
    _defineSingleProperty(this, "validity");
    _defineSingleProperty(this, "value");
});
HTMLButtonElement.prototype = Object.create(HTMLElement.prototype);
HTMLButtonElement.prototype.constructor = HTMLButtonElement;
HTMLButtonElement.toString = HTMLButtonElement.toJSON = () => {
    return "HTMLButtonElement"
}

HTMLCanvasElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "canvas");

    // Key properties for MalwareJail
    this._name = "HTMLCanvasElement[" + this._id + "]";

    this.elementName = "canvas";
    util_log("new " + this._name + "()");
}
HTMLCanvasElement.prototype = Object.create(HTMLElement.prototype);
HTMLCanvasElement.prototype.constructor = HTMLCanvasElement;
HTMLCanvasElement.toString = HTMLCanvasElement.toJSON = () => {
    return "HTMLCanvasElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection
HTMLCollection = function (items) {
    // Key properties for MalwareJail
    this._id = _object_id++;
    this._name = "HTMLCollection[" + this._id + "]";

    this.elementName = "collection";
    util_log("new " + this._name + "()");


    // Convert list to dict so that we can do namedItem gets
    let collection = {};

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection#instance_properties
    for (item of items) {
        // By default if an element doesn't have an ID, we create one for it of the format element<number>
        if ("id" in item && !item.id.startsWith("element") && item.id) {
            collection[item.id] = item
        } else if ("name" in item && item.name) {
            collection[item.name] = item
        }
    }
    return collection;
}
HTMLCollection.toString = HTMLCollection.toJSON = () => {
    return "HTMLCollection"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement
HTMLContentElement = function () {
    // Point it at the HTMLSlotElement
    return HTMLSlotElement;
}

HTMLDataElement = function () {
    util_log(">>> FIXME: HTMLDataElement used");
    return HTMLDataElement;
}
HTMLDataListElement = function () {
    util_log(">>> FIXME: HTMLDataListElement used");
    return HTMLDataListElement;
}
HTMLDetailsElement = function () {
    util_log(">>> FIXME: HTMLDetailsElement used");
    return HTMLDetailsElement;
}
HTMLDialogElement = function () {
    util_log(">>> FIXME: HTMLDialogElement used");
    return HTMLDialogElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement
HTMLDivElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "div");

    // Key properties for MalwareJail
    this._name = "HTMLDivElement[" + this._id + "]";

    this.elementName = "div";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement#instance_properties

    _defineSingleProperty(this, "align");
}
HTMLDivElement.prototype = Object.create(HTMLElement.prototype);
HTMLDivElement.prototype.constructor = HTMLDivElement;
HTMLDivElement.toString = HTMLDivElement.toJSON = () => {
    return "HTMLDivElement"
}

HTMLDListElement = function () {
    util_log(">>> FIXME: HTMLDListElement used");
    return HTMLDListElement;
}
HTMLDocument = function () {
    util_log(">>> FIXME: HTMLDocument used");
    return HTMLDocument;
}

// This is defined in element.js
// HTMLElement = function () { }

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement
HTMLEmbedElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "embed");

    // Key properties for MalwareJail
    this._name = "HTMLEmbedElement[" + this._id + "]";

    this.elementName = "embed";
    util_log("new " + this._name + "()");

    _defineSingleProperty(this, "align");
    _defineSingleProperty(this, "height");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });

    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "width");
}

HTMLFieldSetElement = function () {
    util_log(">>> FIXME: HTMLFieldSetElement used");
    return HTMLFieldSetElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement
HTMLFontElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "font");

    // Key properties for MalwareJail
    this._name = "HTMLFontElement[" + this._id + "]";

    this.elementName = "font";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLFontElement#instance_properties
    _defineSingleProperty(this, "color");
    _defineSingleProperty(this, "face");
    _defineSingleProperty(this, "size");
}
HTMLFontElement.prototype = Object.create(HTMLElement.prototype);
HTMLFontElement.prototype.constructor = HTMLFontElement;
HTMLFontElement.toString = HTMLFontElement.toJSON = () => {
    return "HTMLFontElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement
HTMLFormElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "form");

    // Key properties for MalwareJail
    this._name = "HTMLFormElement[" + this._id + "]";

    this.elementName = "form";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement#instance_methods

    this.checkValidity = function () {
        util_log(this._name + ".checkValidity(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.reportValidity = function () {
        util_log(this._name + ".reportValidity(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.requestSubmit = function () {
        util_log(this._name + ".requestSubmit(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.reset = function () {
        util_log(this._name + ".reset()");
    }
    this.submit = function () {
        util_log(this._name + ".submit(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement#instance_properties

    _defineSingleProperty(this, "elements");
    _defineSingleProperty(this, "length");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    _defineSingleProperty(this, "method");
    _defineSingleProperty(this, "target");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action
    this._action = undefined;
    Object.defineProperty(this, "action", {
        get: function () {
            util_log(this._name + ".action returns '" + this._action + "'");
            return this._action;
        },
        set: function (v) {
            util_log(this._name + ".action = '" + v + "'");
            this._action = v;
            if (this._action.match(ONLY_FULL_URI)) {
                util_log(this._name + ".action was set to a URI: '" + this._action + "'");
                let method = this._method;
                // Default to the post method in forms
                if (!method) method = "post";

                _wscript_urls[_wscript_urls.length] = { "url": this._action, "method": method };
            }
        }
    });

    _defineSingleProperty(this, "encoding");
    _defineSingleProperty(this, "enctype");
    _defineSingleProperty(this, "acceptCharset");
    _defineSingleProperty(this, "autocomplete");
    _defineSingleProperty(this, "noValidate");

    // Adding some custom properties to facilitate common phishing form fields
    Object.defineProperty(this, "email", {
        get: function () {
            let items = document.getElementsByTagName("input");
            for (item of items) {
                if (item.type === "email") {
                    util_log(this._name + ".email returns '" + item + "'");
                    return item;
                }
            }
        },
    });
    Object.defineProperty(this, "password", {
        get: function () {
            let items = document.getElementsByTagName("input");
            for (item of items) {
                if (item.type === "password") {
                    util_log(this._name + ".password returns '" + item + "'");
                    return item;
                }
            }
        },
    });
});
HTMLFormElement.prototype = Object.create(HTMLElement.prototype);
HTMLFormElement.prototype.constructor = HTMLFormElement;
HTMLFormElement.toString = HTMLFormElement.toJSON = () => {
    return "HTMLFormElement"
}

HTMLFormControlsCollection = function () {
    util_log(">>> FIXME: HTMLFormControlsCollection used");
    return HTMLFormControlsCollection;
}
HTMLFrameSetElement = function () {
    util_log(">>> FIXME: HTMLFrameSetElement used");
    return HTMLFrameSetElement;
}

HTMLHeadElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "head");

    // Key properties for MalwareJail
    this._name = "HTMLHeadElement[" + this._id + "]";

    this.elementName = "head";
    util_log("new " + this._name + "()");
}
HTMLHeadElement.prototype = Object.create(HTMLElement.prototype);
HTMLHeadElement.prototype.constructor = HTMLHeadElement;
HTMLHeadElement.toString = HTMLHeadElement.toJSON = () => {
    return "HTMLHeadElement"
}

HTMLHeadingElement = function () {
    util_log(">>> FIXME: HTMLHeadingElement used");
    return HTMLHeadingElement;
}

HTMLHRElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "hr");

    // Key properties for MalwareJail
    this._name = "HTMLHRElement[" + this._id + "]";

    this.elementName = "hr";
    util_log("new " + this._name + "()");

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement#instance_properties

    _defineSingleProperty(this, "align");
    _defineSingleProperty(this, "color");
    _defineSingleProperty(this, "noshade");
    _defineSingleProperty(this, "size");
    _defineSingleProperty(this, "width ");
}
HTMLHRElement.prototype = Object.create(HTMLElement.prototype);
HTMLHRElement.prototype.constructor = HTMLHRElement;
HTMLHRElement.toString = HTMLHRElement.toJSON = () => {
    return "HTMLHRElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement
HTMLHtmlElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "html");

    // Key properties for MalwareJail
    this._name = "HTMLHtmlElement[" + this._id + "]";

    this.elementName = "html";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement#instance_properties
    _defineSingleProperty(this, "version");

    // https://www.w3schools.com/tags/att_html_xmlns.asp
    this._xmlns = {
        "xmlns:mshelp": undefined,
        "xmlns:ddue": undefined,
        "xmlns:xlink": undefined,
        "xmlns:tool": undefined,
    };
    for (k in this._xmlns) {
        _defineProperty(this, k, this._xmlns);
    }
}
HTMLHtmlElement.prototype = Object.create(HTMLElement.prototype);
HTMLHtmlElement.prototype.constructor = HTMLHtmlElement;
HTMLHtmlElement.toString = HTMLHtmlElement.toJSON = () => {
    return "HTMLHtmlElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement
HTMLIFrameElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "iframe");

    // Key properties for MalwareJail
    this._name = "HTMLIFrameElement[" + this._id + "]";

    this.elementName = "iframe";
    util_log("new " + this._name + "()");

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement#instance_properties

    _defineSingleProperty(this, "allowPaymentRequest");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument
    // _defineSingleProperty(this, "contentDocument");
    this.contentDocument = new Document();

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow
    // _defineSingleProperty(this, "contentWindow");
    this.contentWindow = {
        document: this.contentDocument
    }

    _defineSingleProperty(this, "credentialless");
    _defineSingleProperty(this, "csp");
    _defineSingleProperty(this, "featurePolicy");
    _defineSingleProperty(this, "referrerPolicy");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src
    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });

    _defineSingleProperty(this, "srcdoc");

    // Deprecated
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement#instance_properties

    _defineSingleProperty(this, "frameBorder");
    _defineSingleProperty(this, "height");
    _defineSingleProperty(this, "longDesc ");
    _defineSingleProperty(this, "marginHeight ");
    _defineSingleProperty(this, "marginWidth ");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");
});
HTMLIFrameElement.prototype = Object.create(HTMLElement.prototype);
HTMLIFrameElement.prototype.constructor = HTMLIFrameElement;
HTMLIFrameElement.toString = HTMLIFrameElement.toJSON = () => {
    return "HTMLIFrameElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement
HTMLImageElement = function () {
    // Inheriting HTMLElement
    HTMLElement.call(this, "image");

    // Key properties for MalwareJail
    this._name = "HTMLImageElement[" + this._id + "]";

    this.elementName = "image";
    util_log("new " + this._name + "()");

    _defineSingleProperty(this, "align");
    _defineSingleProperty(this, "alt");
    _defineSingleProperty(this, "border");
    _defineSingleProperty(this, "complete");
    _defineSingleProperty(this, "crossOrigin");
    _defineSingleProperty(this, "currentSrc");
    _defineSingleProperty(this, "decoding");
    _defineSingleProperty(this, "fetchPriority");
    _defineSingleProperty(this, "height");
    _defineSingleProperty(this, "hspace");
    _defineSingleProperty(this, "isMap");
    _defineSingleProperty(this, "loading");
    _defineSingleProperty(this, "longDesc");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    _defineSingleProperty(this, "naturalHeight");
    _defineSingleProperty(this, "naturalWidth");
    _defineSingleProperty(this, "referrerPolicy");
    _defineSingleProperty(this, "sizes");

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });

    _defineSingleProperty(this, "srcset");
    _defineSingleProperty(this, "useMap");
    _defineSingleProperty(this, "vspace");
    _defineSingleProperty(this, "width");
    _defineSingleProperty(this, "x");
    _defineSingleProperty(this, "y");

    // Other (possibly deprecated) attributes
    _defineSingleProperty(this, "pngsrc");
    _defineSingleProperty(this, "svgsrc");
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image
Image = function (width, height) {
    // Inheriting HTMLImageElement
    HTMLImageElement.call(this, "Image");

    this.width = width;
    this.height = height;
}
Image.prototype = Object.create(HTMLImageElement.prototype);
Image.prototype.constructor = Image;

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement
HTMLInputElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "input");

    // Key properties for MalwareJail
    this._name = "HTMLInputElement[" + this._id + "]";

    this.elementName = "input";
    util_log("new " + this._name + "()");

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#instance_methods

    // Defined in HTMLElement
    // this.blur = function () {
    //     util_log(this._name + ".blur(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    // }
    // this.click = function () {
    //     util_log(this._name + ".click(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    // }
    // this.focus = function () {
    //     util_log(this._name + ".focus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    // }
    this.select = function () {
        util_log(this._name + ".select(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setSelectionRange = function () {
        util_log(this._name + ".setSelectionRange(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setRangeText = function () {
        util_log(this._name + ".setRangeText(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setCustomValidity = function () {
        util_log(this._name + ".setCustomValidity(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showPicker = function () {
        util_log(this._name + ".showPicker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.checkValidity = function () {
        util_log(this._name + ".checkValidity(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.reportValidity = function () {
        util_log(this._name + ".reportValidity(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.stepDown = function () {
        util_log(this._name + ".stepDown(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.stepUp = function () {
        util_log(this._name + ".stepUp(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#instance_properties

    _defineSingleProperty(this, "align");
    _defineSingleProperty(this, "autocapitalize");
    _defineSingleProperty(this, "defaultValue");
    _defineSingleProperty(this, "dirName");
    _defineSingleProperty(this, "inputmode");
    _defineSingleProperty(this, "labels");
    _defineSingleProperty(this, "list");
    _defineSingleProperty(this, "maxlength");
    _defineSingleProperty(this, "minlength");
    _defineSingleProperty(this, "multiple");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    _defineSingleProperty(this, "step");
    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "useMap");
    _defineSingleProperty(this, "valueAsDate");
    _defineSingleProperty(this, "valueAsNumber");
    _defineSingleProperty(this, "form");
    _defineSingleProperty(this, "formAction");
    _defineSingleProperty(this, "formEnctype");
    _defineSingleProperty(this, "formMethod");
    _defineSingleProperty(this, "formNoValidate");
    _defineSingleProperty(this, "formTarget");
    _defineSingleProperty(this, "autofocus");
    _defineSingleProperty(this, "disabled");
    _defineSingleProperty(this, "required");
    _defineSingleProperty(this, "validationMessage");
    _defineSingleProperty(this, "validity");
    _defineSingleProperty(this, "willValidate");
    _defineSingleProperty(this, "checked");
    _defineSingleProperty(this, "defaultChecked");
    _defineSingleProperty(this, "indeterminate");
    _defineSingleProperty(this, "alt");
    _defineSingleProperty(this, "height");
    _defineSingleProperty(this, "width");
    _defineSingleProperty(this, "accept");
    _defineSingleProperty(this, "allowdirs");
    _defineSingleProperty(this, "files");
    _defineSingleProperty(this, "webkitdirectory");
    _defineSingleProperty(this, "webkitEntries");
    _defineSingleProperty(this, "autocomplete");
    _defineSingleProperty(this, "max");
    _defineSingleProperty(this, "maxLength");
    _defineSingleProperty(this, "min");
    _defineSingleProperty(this, "minLength");
    _defineSingleProperty(this, "pattern");
    _defineSingleProperty(this, "placeholder");
    _defineSingleProperty(this, "readOnly");
    _defineSingleProperty(this, "selectionEnd");
    _defineSingleProperty(this, "selectionStart");
    _defineSingleProperty(this, "selectionDirection");
    _defineSingleProperty(this, "size");

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#src
    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });

    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#value
    Object.defineProperty(this, "value", {
        get: function () {
            let value = undefined;
            if (["class", "id"].some((key) => key in this._attributes && this._attributes[key].toLowerCase().includes("email"))) {
                value = "blah.blah@blah.com";
            } else if (this._attributes["value"]) {
                value = this._attributes["value"];
                // Assume the default is a password
            } else {
                value = "JsJ@w$==C00l!";
            }
            util_log(this._name + ".value = '" + value + "'");
            return value;
        },
        set: function (value) {
            util_log(this._name + ".value = '" + value + "'");
            this._attributes["value"] = value;
        }
    });

    // Not sure where these methods came from

    this.ForceLettersOnly = function () {
        util_log(this._name + ".ForceLettersOnly()");
    }
    this.ForceNumericOnly = function () {
        util_log(this._name + ".ForceNumericOnly()");
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event
    this.keypress = function (listener) {
        return this.addEventListener("keypress", listener);
    }
});
HTMLInputElement.prototype = Object.create(HTMLElement.prototype);
HTMLInputElement.prototype.constructor = HTMLInputElement;
HTMLInputElement.toString = HTMLInputElement.toJSON = () => {
    return "Input"
}

HTMLLabelElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "label");

    // Key properties for MalwareJail
    this._name = "HTMLLabelElement[" + this._id + "]";

    this.elementName = "label";
    util_log("new " + this._name + "()");

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement#instance_properties

    _defineSingleProperty(this, "control");
    _defineSingleProperty(this, "form");
    _defineSingleProperty(this, "htmlFor");
}
HTMLLabelElement.prototype = Object.create(HTMLElement.prototype);
HTMLLabelElement.prototype.constructor = HTMLLabelElement;
HTMLLabelElement.toString = HTMLLabelElement.toJSON = () => {
    return "HTMLLabelElement"
}

HTMLLegendElement = function () {
    util_log(">>> FIXME: HTMLLegendElement used");
    return HTMLLegendElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement
HTMLLIElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "li");

    // Key properties for MalwareJail
    this._name = "HTMLLIElement[" + this._id + "]";

    this.elementName = "li";
    util_log("new " + this._name + "()");

    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "value");
}
HTMLLIElement.prototype = Object.create(HTMLElement.prototype);
HTMLLIElement.prototype.constructor = HTMLLIElement;
HTMLLIElement.toString = HTMLLIElement.toJSON = () => {
    return "HTMLLIElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement
HTMLLinkElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "link");

    // Key properties for MalwareJail
    this._name = "HTMLLinkElement[" + this._id + "]";

    this.elementName = "link";
    util_log("new " + this._name + "()");

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement#instance_properties

    _defineSingleProperty(this, "as");
    _defineSingleProperty(this, "fetchPriority");
    _defineSingleProperty(this, "referrerPolicy");
    _defineSingleProperty(this, "rel");
    _defineSingleProperty(this, "relList");
    _defineSingleProperty(this, "sheet");

    // <link> attributes
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attributes

    _defineSingleProperty(this, "crossorigin");
    _defineSingleProperty(this, "disabled");
    _defineSingleProperty(this, "href");
    _defineSingleProperty(this, "hreflang");
    _defineSingleProperty(this, "imagesizes");
    _defineSingleProperty(this, "imagesrcset");
    _defineSingleProperty(this, "integrity");
    _defineSingleProperty(this, "media");
    _defineSingleProperty(this, "prefetch");
    _defineSingleProperty(this, "sizes");

    // Defined in Element
    // _defineSingleProperty(this, "title");

    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "blocking");

    // Non-standard <link> attributes
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#non-standard_attributes
    _defineSingleProperty(this, "methods");
    _defineSingleProperty(this, "target");

    // Obsolete <link> attributes
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#obsolete_attributes
    _defineSingleProperty(this, "charset");
    _defineSingleProperty(this, "rev");
}
HTMLLinkElement.prototype = Object.create(HTMLElement.prototype);
HTMLLinkElement.prototype.constructor = HTMLLinkElement;
HTMLLinkElement.toString = HTMLLinkElement.toJSON = () => {
    return "HTMLLinkElement"
}

HTMLMapElement = function () {
    util_log(">>> FIXME: HTMLMapElement used");
    return HTMLMapElement;
}
HTMLMarqueeElement = function () {
    util_log(">>> FIXME: HTMLMarqueeElement used");
    return HTMLMarqueeElement;
}
HTMLMediaElement = function () {
    util_log(">>> FIXME: HTMLMediaElement used");
    return HTMLMediaElement;
}
HTMLMenuElement = function () {
    util_log(">>> FIXME: HTMLMenuElement used");
    return HTMLMenuElement;
}
HTMLMenuItemElement = function () {
    util_log(">>> FIXME: HTMLMenuItemElement used");
    return HTMLMenuItemElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement
HTMLMetaElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "meta");

    // Key properties for MalwareJail
    this._name = "HTMLMetaElement[" + this._id + "]";

    this.elementName = "meta";
    this._content = undefined;
    util_log("new " + this._name + "()");

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement#instance_properties

    _defineSingleProperty(this, "charset");

    Object.defineProperty(this, "content", {
        get: function () {
            util_log(this._name + ".content returns '" + this._content + "'");
            b64_match = this._content.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".content was set to a value containing a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[0], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".content = '" + v + "'");
            this._content = v;
            b64_match = this._content.match(ENCODED_BASE64_REGEX);
            uri_match = this._content.match(FULL_URI);
            if (b64_match) {
                util_log(this._name + ".content was set to value containing a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[0], 'base64');
            } else if (uri_match) {
                util_log(this._name + ".content was set to a value containing a URI: '" + this._content + "'");

                // If there is an HTTP-Equiv header for Refreshing the page set, then add the URL
                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv
                if (this.httpEquiv.toLowerCase() === "refresh") {
                    _wscript_urls[_wscript_urls.length] = { "url": uri_match[0], "method": "get" };
                    // Execute this here so that we can pick up on automatic location redirection
                    location.replace(uri_match[0]);
                } else {
                    util_log(">>> FIXME:" + this._name + " has a URL in .content but does not have httpEquiv set to 'refresh'");
                }
            }
            return this._content;
        }
    });

    _defineSingleProperty(this, "httpEquiv");
    _defineSingleProperty(this, "media");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    _defineSingleProperty(this, "scheme");
}
HTMLMetaElement.prototype = Object.create(HTMLElement.prototype);
HTMLMetaElement.prototype.constructor = HTMLMetaElement;
HTMLMetaElement.toString = HTMLMetaElement.toJSON = () => {
    return "HTMLMetaElement"
}

HTMLMeterElement = function () {
    util_log(">>> FIXME: HTMLMeterElement used");
    return HTMLMeterElement;
}
HTMLModElement = function () {
    util_log(">>> FIXME: HTMLModElement used");
    return HTMLModElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement
HTMLObjectElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "object");

    // Key properties for MalwareJail
    this._name = "HTMLObjectElement[" + this._id + "]";

    this.elementName = "object";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement#instance_methods

    this.checkValidity = function () {
        util_log(this._name + ".checkValidity(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.setCustomValidity = function () {
        util_log(this._name + ".setCustomValidity(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement#instance_properties

    _defineSingleProperty(this, "align");
    _defineSingleProperty(this, "archive");
    _defineSingleProperty(this, "border");
    _defineSingleProperty(this, "code");
    _defineSingleProperty(this, "codeBase");
    _defineSingleProperty(this, "codeType");
    _defineSingleProperty(this, "contentDocument");
    _defineSingleProperty(this, "contentWindow");
    _defineSingleProperty(this, "data");
    _defineSingleProperty(this, "declare");
    _defineSingleProperty(this, "form");
    _defineSingleProperty(this, "height");
    _defineSingleProperty(this, "hspace");

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");

    _defineSingleProperty(this, "standby");
    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "useMap");
    _defineSingleProperty(this, "validationMessage");
    _defineSingleProperty(this, "validity");
    _defineSingleProperty(this, "vspace");
    _defineSingleProperty(this, "width");
    _defineSingleProperty(this, "willValidate");

    // Random attributes
    _defineSingleProperty(this, "classid");
}
HTMLObjectElement.prototype = Object.create(HTMLElement.prototype);
HTMLObjectElement.prototype.constructor = HTMLObjectElement;
HTMLObjectElement.toString = HTMLObjectElement.toJSON = () => {
    return "HTMLObjectElement"
}

HTMLOListElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "ol");

    // Key properties for MalwareJail
    this._name = "HTMLOListElement[" + this._id + "]";

    this.elementName = "ol";
    util_log("new " + this._name + "()");

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement#instance_properties

    _defineSingleProperty(this, "reversed");
    _defineSingleProperty(this, "start");
    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "compact");
}
HTMLOListElement.prototype = Object.create(HTMLElement.prototype);
HTMLOListElement.prototype.constructor = HTMLOListElement;
HTMLOListElement.toString = HTMLOListElement.toJSON = () => {
    return "HTMLOListElement"
}

HTMLOptGroupElement = function () {
    util_log(">>> FIXME: HTMLOptGroupElement used");
    return HTMLOptGroupElement;
}
HTMLOptionElement = function () {
    util_log(">>> FIXME: HTMLOptionElement used");
    return HTMLOptionElement;
}
HTMLOptionsCollection = function () {
    util_log(">>> FIXME: HTMLOptionsCollection used");
    return HTMLOptionsCollection;
}
HTMLOutputElement = function () {
    util_log(">>> FIXME: HTMLOutputElement used");
    return HTMLOutputElement;
}

HTMLParagraphElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "p");

    // Key properties for MalwareJail
    this._name = "HTMLParagraphElement[" + this._id + "]";

    this.elementName = "p";
    util_log("new " + this._name + "()");
}
HTMLParagraphElement.prototype = Object.create(HTMLElement.prototype);
HTMLParagraphElement.prototype.constructor = HTMLParagraphElement;
HTMLParagraphElement.toString = HTMLParagraphElement.toJSON = () => {
    return "HTMLParagraphElement"
}

HTMLParamElement = function () {
    util_log(">>> FIXME: HTMLParamElement used");
    return HTMLParamElement;
}
HTMLPictureElement = function () {
    util_log(">>> FIXME: HTMLPictureElement used");
    return HTMLPictureElement;
}
HTMLPreElement = function () {
    util_log(">>> FIXME: HTMLPreElement used");
    return HTMLPreElement;
}
HTMLProgressElement = function () {
    util_log(">>> FIXME: HTMLProgressElement used");
    return HTMLProgressElement;
}
HTMLQuoteElement = function () {
    util_log(">>> FIXME: HTMLQuoteElement used");
    return HTMLQuoteElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement
HTMLScriptElement = _proxy(function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "script");

    // Key properties for MalwareJail
    this._name = "HTMLScriptElement[" + this._id + "]";

    this.elementName = "script";
    this._attributes = {};
    util_log("new " + this._name + "()");
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
    Object.defineProperty(this, "onload", {
        set: function (fn) {
            if (fn.constructor.name === "Function") {
                var function_name = fn.prototype.name;
                if (function_name === undefined) {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                    function_name = "anonymous";
                }
                util_log(this._name + ".onload(" + function_name + ")")
                var e = null;
                if (document._events.length == 1) {
                    e = document._events[0]
                } else {
                    e = _proxy(new Event("load"));
                    document._events.push(e);
                }
                util_log("Running function " + function_name + "(" + e + ")");
                fn(e);
            }
            else {
                util_log("That's weird, a non-function was passed to window.onload...")
            }
        }
    });

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });
});
HTMLScriptElement.prototype = Object.create(HTMLElement.prototype);
HTMLScriptElement.prototype.constructor = HTMLScriptElement;
HTMLScriptElement.toString = HTMLScriptElement.toJSON = () => {
    return "Script"
}

HTMLSelectElement = function () {
    util_log(">>> FIXME: HTMLSelectElement used");
    return HTMLSelectElement;
}
HTMLShadowElement = function () {
    util_log(">>> FIXME: HTMLShadowElement used");
    return HTMLShadowElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement
HTMLSlotElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "source");

    // Key properties for MalwareJail
    this._name = "HTMLSlotElement[" + this._id + "]";

    this.elementName = "slot";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement#instance_methods

    this.assign = function () {
        util_log(this._name + ".assign(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.assignedNodes = function () {
        util_log(this._name + ".assignedNodes(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.assignedElements = function () {
        util_log(this._name + ".assignedElements(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement#instance_properties

    // We cannot define the private name variable as it is already defined in element.js
    _defineSingleProperty(this, "name", "_public_name");
}
HTMLSlotElement.prototype = Object.create(HTMLElement.prototype);
HTMLSlotElement.prototype.constructor = HTMLSlotElement;
HTMLSlotElement.toString = HTMLSlotElement.toJSON = () => {
    return "HTMLSlotElement"
}
HTMLSourceElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "source");

    // Key properties for MalwareJail
    this._name = "HTMLSourceElement[" + this._id + "]";

    this.elementName = "source";
    util_log("new " + this._name + "()");

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });
}
HTMLSourceElement.prototype = Object.create(HTMLElement.prototype);
HTMLSourceElement.prototype.constructor = HTMLSourceElement;
HTMLSourceElement.toString = HTMLSourceElement.toJSON = () => {
    return "HTMLSourceElement"
}

HTMLSpanElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "span");

    // Key properties for MalwareJail
    this._name = "HTMLSpanElement[" + this._id + "]";

    this.elementName = "span";
    util_log("new " + this._name + "()");
}
HTMLSpanElement.prototype = Object.create(HTMLElement.prototype);
HTMLSpanElement.prototype.constructor = HTMLSpanElement;
HTMLSpanElement.toString = HTMLSpanElement.toJSON = () => {
    return "HTMLSpanElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement
HTMLStyleElement = _proxy(function (css_text = "") {
    // Key properties for MalwareJail
    this._id = _object_id;
    this._name = "HTMLStyleElement[" + this._id + "]";

    this.elementName = "style";
    // https://www.w3schools.com/cssref/index.php
    this._attributes = {
        "styleSheet": {
            cssText: css_text
        },
        "accentColor": null,
        "alignContent": null,
        "alignItems": null,
        "alignSelf": null,
        "all": null,
        "animation": null,
        "animationDelay": null,
        "animationDirection": null,
        "animationDuration": null,
        "animationFillMode": null,
        "animationIterationCount": null,
        "animationName": null,
        "animationPlayState": null,
        "animationTimingFunction": null,
        "aspectRatio": null,
        "backdropFilter": null,
        "backfaceVisibility": null,
        "background": null,
        "backgroundAttachment": null,
        "backgroundBlendMode": null,
        "backgroundClip": null,
        "backgroundColor": null,
        "backgroundImage": null,
        "backgroundOrigin": null,
        "backgroundPosition": null,
        "backgroundPositionX": null,
        "backgroundPositionY": null,
        "backgroundRepeat": null,
        "backgroundSize": null,
        "blockSize": null,
        "border": null,
        "borderBlock": null,
        "borderBlockColor": null,
        "borderBlockEndColor": null,
        "borderBlockEndStyle": null,
        "borderBlockEndWidth": null,
        "borderBlockStartColor": null,
        "borderBlockStartStyle": null,
        "borderBlockStartWidth": null,
        "borderBlockStyle": null,
        "borderBlockWidth": null,
        "borderBottom": null,
        "borderBottomColor": null,
        "borderBottomLeftRadius": null,
        "borderBottomRightRadius": null,
        "borderBottomStyle": null,
        "borderBottomWidth": null,
        "borderCollapse": null,
        "borderColor": "initial",
        "borderEndEndRadius": null,
        "borderEndStartRadius": null,
        "borderImage": null,
        "borderImageOutset": null,
        "borderImageRepeat": null,
        "borderImageSlice": null,
        "borderImageSource": null,
        "borderImageWidth": null,
        "borderInline": null,
        "borderInlineColor": null,
        "borderInlineEndColor": null,
        "borderInlineEndStyle": null,
        "borderInlineEndWidth": null,
        "borderInlineStartColor": null,
        "borderInlineStartStyle": null,
        "borderInlineStartWidth": null,
        "borderInlineStyle": null,
        "borderInlineWidth": null,
        "borderLeft": null,
        "borderLeftColor": null,
        "borderLeftStyle": null,
        "borderLeftWidth": null,
        "borderRadius": null,
        "borderRight": null,
        "borderRightColor": null,
        "borderRightStyle": null,
        "borderRightWidth": null,
        "borderSpacing": null,
        "borderStartEndRadius": null,
        "borderStartStartRadius": null,
        "borderStyle": null,
        "borderTop": null,
        "borderTopColor": null,
        "borderTopLeftRadius": null,
        "borderTopRightRadius": null,
        "borderTopStyle": null,
        "borderTopWidth": null,
        "borderWidth": null,
        "bottom": null,
        "boxDecorationBreak": null,
        "boxReflect": null,
        "boxShadow": null,
        "boxSizing": null,
        "breakAfter": null,
        "breakBefore": null,
        "breakInside": null,
        "captionSide": null,
        "caretColor": null,
        "@charset": null,
        "clear": null,
        "clip": null,
        "clipPath": null,
        "color": null,
        "columnCount": null,
        "columnFill": null,
        "columnGap": null,
        "columnRule": null,
        "columnRuleColor": null,
        "columnRuleStyle": null,
        "columnRuleWidth": null,
        "columnSpan": null,
        "columnWidth": null,
        "columns": null,
        "content": null,
        "counterIncrement": null,
        "counterReset": null,
        "cursor": null,
        "direction": null,
        "display": "none",
        "emptyCells": null,
        "filter": null,
        "flex": null,
        "flexBasis": null,
        "flexDirection": null,
        "flexFlow": null,
        "flexGrow": null,
        "flexShrink": null,
        "flexWrap": null,
        "float": null,
        "font": null,
        "@font-face": null,
        "fontFamily": null,
        "fontFeatureSettings": null,
        "fontKerning": null,
        "fontSize": null,
        "fontSizeAdjust": null,
        "fontStretch": null,
        "fontStyle": null,
        "fontVariant": null,
        "fontVariantCaps": null,
        "fontWeight": null,
        "gap": null,
        "grid": null,
        "gridArea": null,
        "gridAutoColumns": null,
        "gridAutoFlow": null,
        "gridAutoRows": null,
        "gridColumn": null,
        "gridColumnEnd": null,
        "gridColumnGap": null,
        "gridColumnStart": null,
        "gridGap": null,
        "gridRow": null,
        "gridRowEnd": null,
        "gridRowGap": null,
        "gridRowStart": null,
        "gridTemplate": null,
        "gridTemplateAreas": null,
        "gridTemplateColumns": null,
        "gridTemplateRows": null,
        "hangingPunctuation": null,
        "height": 1080,
        "hyphens": null,
        "imageRendering": null,
        "@import": null,
        "inlineSize": null,
        "inset": null,
        "insetBlock": null,
        "insetBlockEnd": null,
        "insetBlockStart": null,
        "insetInline": null,
        "insetInlineEnd": null,
        "insetInlineStart": null,
        "isolation": null,
        "justifyContent": null,
        "justifyItems": null,
        "justifySelf": null,
        "@keyframes": null,
        "left": 0,
        "letterSpacing": null,
        "lineHeight": null,
        "listStyle": null,
        "listStyleImage": null,
        "listStylePosition": null,
        "listStyleType": null,
        "margin": null,
        "marginBlock": null,
        "marginBlockEnd": null,
        "marginBlockStart": null,
        "marginBottom": null,
        "marginInline": null,
        "marginInlineEnd": null,
        "marginInlineStart": null,
        "marginLeft": null,
        "marginRight": null,
        "marginTop": null,
        "maskImage": null,
        "maskMode": null,
        "maskOrigin": null,
        "maskPosition": null,
        "maskRepeat": null,
        "maskSize": null,
        "maxBlockSize": null,
        "maxHeight": null,
        "maxInlineSize": null,
        "maxWidth": null,
        "@media": null,
        "minBlockSize": null,
        "minInlineSize": null,
        "minHeight": null,
        "minWidth": null,
        "mixBlendMode": null,
        "objectFit": null,
        "objectPosition": null,
        "offset": null,
        "offsetAnchor": null,
        "offsetDistance": null,
        "offsetPath": null,
        "offsetRotate": null,
        "opacity": null,
        "order": null,
        "orphans": null,
        "outline": null,
        "outlineColor": null,
        "outlineOffset": null,
        "outlineStyle": null,
        "outlineWidth": null,
        "overflow": null,
        "overflowAnchor": null,
        "overflowWrap": null,
        "overflowX": null,
        "overflowY": null,
        "overscrollBehavior": null,
        "overscrollBehaviorBlock": null,
        "overscrollBehaviorInline": null,
        "overscrollBehaviorX": null,
        "overscrollBehaviorY": null,
        "padding": null,
        "paddingBlock": null,
        "paddingBlockEnd": null,
        "paddingBlockStart": null,
        "paddingBottom": null,
        "paddingInline": null,
        "paddingInlineEnd": null,
        "paddingInlineStart": null,
        "paddingLeft": null,
        "paddingRight": null,
        "paddingTop": null,
        "pageBreakAfter": null,
        "pageBreakBefore": null,
        "pageBreakInside": null,
        "paintOrder": null,
        "perspective": null,
        "perspectiveOrigin": null,
        "placeContent": null,
        "placeItems": null,
        "placeSelf": null,
        "pointerEvents": null,
        "position": "",
        "quotes": null,
        "resize": null,
        "right": null,
        "rotate": null,
        "rowGap": null,
        "scale": null,
        "scrollBehavior": null,
        "scrollMargin": null,
        "scrollMarginBlock": null,
        "scrollMarginBlockEnd": null,
        "scrollMarginBlockStart": null,
        "scrollMarginBottom": null,
        "scrollMarginInline": null,
        "scrollMarginInlineEnd": null,
        "scrollMarginInlineStart": null,
        "scrollMarginLeft": null,
        "scrollMarginRight": null,
        "scrollMarginTop": null,
        "scrollPadding": null,
        "scrollPaddingBlock": null,
        "scrollPaddingBlockEnd": null,
        "scrollPaddingBlockStart": null,
        "scrollPaddingBottom": null,
        "scrollPaddingInline": null,
        "scrollPaddingInlineEnd": null,
        "scrollPaddingInlineStart": null,
        "scrollPaddingLeft": null,
        "scrollPaddingRight": null,
        "scrollPaddingTop": null,
        "scrollSnapAlign": null,
        "scrollSnapStop": null,
        "scrollSnapType": null,
        "tabSize": null,
        "tableLayout": null,
        "textAlign": null,
        "textAlignLast": null,
        "textDecoration": null,
        "textDecorationColor": null,
        "textDecorationLine": null,
        "textDecorationStyle": null,
        "textDecorationThickness": null,
        "textIndent": null,
        "textJustify": null,
        "textOrientation": null,
        "textOverflow": null,
        "textShadow": null,
        "textTransform": null,
        "top": 0,
        "transform": null,
        "transformOrigin": null,
        "transformStyle": null,
        "transition": null,
        "transitionDelay": null,
        "transitionDuration": null,
        "transitionProperty": null,
        "transitionTimingFunction": null,
        "translate": null,
        "unicodeBidi": null,
        "userSelect": null,
        "verticalAlign": null,
        "visibility": true,
        "whiteSpace": null,
        "widows": null,
        "width": 1920,
        "wordBreak": null,
        "wordSpacing": null,
        "wordWrap": null,
        "writingMode": null,
        "zIndex": null,
    };

    // We cannot point the global style to an Element since an Element has a Style attribute and
    // thus creates an endless loop
    this.tagname = "style";
    this.parentNode = this;
    this.removeChild = function (e) {
        util_log(this._name + ".removeChild(" + e._name + ")");
        return e;
    }

    for (var k in this._attributes) {
        _defineProperty(this, k, this._attributes);
    }

    // We need to duplicate this code from element.js since HTMLStyleElement does not inherit it

    // This property get accessed in Document.getElementById, therefore do not define with _defineSingleProperty since it logs gets
    // _defineSingleProperty(this, "class");
    this._class = "";
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class
    Object.defineProperty(this, "class", {
        get: function () {
            return this._class;
        },
        set: function (value) {
            util_log(this._name + ".class = '" + value + "'");
            this._class = value;
            if (value.indexOf(" ") !== -1) {
                this._classList = value.split(" ");
            }
        }
    });

});
HTMLStyleElement.prototype = Object.create(HTMLElement.prototype);
HTMLStyleElement.prototype.constructor = HTMLStyleElement;
HTMLStyleElement.toString = HTMLStyleElement.toJSON = () => {
    return "Style"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement
HTMLTableCaptionElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "caption");

    // Key properties for MalwareJail
    this._name = "HTMLTableCaptionElement[" + this._id + "]";

    this.elementName = "caption";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement#instance_properties

    _defineSingleProperty(this, "align");
}
HTMLTableCaptionElement.prototype = Object.create(HTMLElement.prototype);
HTMLTableCaptionElement.prototype.constructor = HTMLTableCaptionElement;
HTMLTableCaptionElement.toString = HTMLTableCaptionElement.toJSON = () => {
    return "HTMLTableCaptionElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement
HTMLTableCellElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "td");

    // Key properties for MalwareJail
    this._name = "HTMLTableCellElement[" + this._id + "]";

    this.elementName = "td";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement#instance_properties

    _defineSingleProperty(this, "abbr");
    _defineSingleProperty(this, "cellIndex");
    _defineSingleProperty(this, "colSpan");
    _defineSingleProperty(this, "headers");
    _defineSingleProperty(this, "rowSpan");
    _defineSingleProperty(this, "scope");
    _defineSingleProperty(this, "col");
    _defineSingleProperty(this, "colgroup");
    _defineSingleProperty(this, "row");
    _defineSingleProperty(this, "rowgroup");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement#deprecated_properties

    _defineSingleProperty(this, "align");
    _defineSingleProperty(this, "axis");
    _defineSingleProperty(this, "bgColor");
    _defineSingleProperty(this, "ch");
    _defineSingleProperty(this, "chOff");
    _defineSingleProperty(this, "height");
    _defineSingleProperty(this, "noWrap");
    _defineSingleProperty(this, "vAlign");
    _defineSingleProperty(this, "width");
}
HTMLTableCellElement.prototype = Object.create(HTMLElement.prototype);
HTMLTableCellElement.prototype.constructor = HTMLTableCellElement;
HTMLTableCellElement.toString = HTMLTableCellElement.toJSON = () => {
    return "HTMLTableCellElement"
}

HTMLTableColElement = function () {
    util_log(">>> FIXME: HTMLTableColElement used");
    return HTMLTableColElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement
HTMLTableElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "table");

    // Key properties for MalwareJail
    this._name = "HTMLTableElement[" + this._id + "]";

    this.elementName = "table";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement#instance_methods

    this.createCaption = function () {
        util_log(this._name + ".createCaption(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.createTBody = function () {
        util_log(this._name + ".createTBody(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.createTFoot = function () {
        util_log(this._name + ".createTFoot(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.createTHead = function () {
        util_log(this._name + ".createTHead(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.deleteCaption = function () {
        util_log(this._name + ".deleteCaption(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.deleteRow = function () {
        util_log(this._name + ".deleteRow(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.deleteTFoot = function () {
        util_log(this._name + ".deleteTFoot(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.deleteTHead = function () {
        util_log(this._name + ".deleteTHead(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.insertRow = function () {
        util_log(this._name + ".insertRow(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement#instance_properties

    _defineSingleProperty(this, "align");
    _defineSingleProperty(this, "bgColor");
    _defineSingleProperty(this, "border");
    _defineSingleProperty(this, "caption");
    _defineSingleProperty(this, "cellPadding");
    _defineSingleProperty(this, "cellSpacing");
    _defineSingleProperty(this, "frame");
    _defineSingleProperty(this, "rows");
    _defineSingleProperty(this, "rules");
    _defineSingleProperty(this, "summary");
    _defineSingleProperty(this, "tBodies");
    _defineSingleProperty(this, "tFoot");
    _defineSingleProperty(this, "tHead");
    _defineSingleProperty(this, "width");

    // Undocumented attributes

    _defineSingleProperty(this, "height");
}
HTMLTableElement.prototype = Object.create(HTMLElement.prototype);
HTMLTableElement.prototype.constructor = HTMLTableElement;
HTMLTableElement.toString = HTMLTableElement.toJSON = () => {
    return "HTMLTableElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement
HTMLTableRowElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "trow");

    // Key properties for MalwareJail
    this._name = "HTMLTableRowElement[" + this._id + "]";

    this.elementName = "trow";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement#instance_methods

    this.deleteCell = function () {
        util_log(this._name + ".deleteCell(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.insertCell = function () {
        util_log(this._name + ".deleteCell(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement#instance_properties

    _defineSingleProperty(this, "cells");
    _defineSingleProperty(this, "rowIndex");
    _defineSingleProperty(this, "sectionRowIndex");
}
HTMLTableRowElement.prototype = Object.create(HTMLElement.prototype);
HTMLTableRowElement.prototype.constructor = HTMLTableRowElement;
HTMLTableRowElement.toString = HTMLTableRowElement.toJSON = () => {
    return "HTMLTableRowElement"
}

// https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement
HTMLTableSectionElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "tbody");

    // Key properties for MalwareJail
    this._name = "HTMLTableSectionElement[" + this._id + "]";

    this.elementName = "tbody";
    util_log("new " + this._name + "()");

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement#instance_methods

    this.deleteRow = function () {
        util_log(this._name + ".deleteRow(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }
    this.insertRow = function () {
        util_log(this._name + ".insertRow(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement#instance_properties

    _defineSingleProperty(this, "align ");
    _defineSingleProperty(this, "rows");
    _defineSingleProperty(this, "ch ");
    _defineSingleProperty(this, "chOff ");
    _defineSingleProperty(this, "vAlign ");
}
HTMLTableSectionElement.prototype = Object.create(HTMLElement.prototype);
HTMLTableSectionElement.prototype.constructor = HTMLTableSectionElement;
HTMLTableSectionElement.toString = HTMLTableSectionElement.toJSON = () => {
    return "HTMLTableSectionElement"
}

HTMLTemplateElement = function () {
    util_log(">>> FIXME: HTMLTemplateElement used");
    return HTMLTemplateElement;
}
HTMLTextAreaElement = function () {
    util_log(">>> FIXME: HTMLTextAreaElement used");
    return HTMLTextAreaElement;
}
HTMLTimeElement = function () {
    util_log(">>> FIXME: HTMLTimeElement used");
    return HTMLTimeElement;
}
HTMLTitleElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "title");

    // Key properties for MalwareJail
    this._name = "HTMLTitleElement[" + this._id + "]";

    this.elementName = "title";
    util_log("new " + this._name + "()");
}
HTMLTitleElement.prototype = Object.create(HTMLElement.prototype);
HTMLTitleElement.prototype.constructor = HTMLTitleElement;
HTMLTitleElement.toString = HTMLTitleElement.toJSON = () => {
    return "HTMLTitleElement"
}

HTMLTrackElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "track");

    // Key properties for MalwareJail
    this._name = "HTMLTrackElement[" + this._id + "]";

    this.elementName = "track";
    util_log("new " + this._name + "()");

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });
}
HTMLTrackElement.prototype = Object.create(HTMLElement.prototype);
HTMLTrackElement.prototype.constructor = HTMLTrackElement;
HTMLTrackElement.toString = HTMLTrackElement.toJSON = () => {
    return "HTMLTrackElement"
}

HTMLUListElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "ul");

    // Key properties for MalwareJail
    this._name = "HTMLUListElement[" + this._id + "]";

    this.elementName = "ul";
    util_log("new " + this._name + "()");

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement#instance_properties

    _defineSingleProperty(this, "reversed");
    _defineSingleProperty(this, "start");
    _defineSingleProperty(this, "type");
    _defineSingleProperty(this, "compact");
}
HTMLUListElement.prototype = Object.create(HTMLElement.prototype);
HTMLUListElement.prototype.constructor = HTMLUListElement;
HTMLUListElement.toString = HTMLUListElement.toJSON = () => {
    return "HTMLUListElement"
}

HTMLUnknownElement = function () {
    util_log(">>> FIXME: HTMLUnknownElement used");
    return HTMLUnknownElement;
}

HTMLVideoElement = function () {
    // Inherit HTMLELement
    HTMLElement.call(this, "video");

    // Key properties for MalwareJail
    this._name = "HTMLVideoElement[" + this._id + "]";

    this.elementName = "video";
    util_log("new " + this._name + "()");

    Object.defineProperty(this, "src", {
        get: function () {
            util_log(this._name + ".src returns '" + this._text + "'");
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            }
            return this._text;
        },
        set: function (v) {
            util_log(this._name + ".src = '" + v + "'");
            this._text = v;
            b64_match = this._text.match(ENCODED_BASE64_REGEX);
            if (b64_match) {
                util_log(this._name + ".src was set to a Base64-encoded value, decoding to '" + this._name + "' ...");
                _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
            } else if (this._text.match(ONLY_FULL_URI)) {
                util_log(this._name + ".src was set to a URI: '" + this._text + "'");
                _wscript_urls[_wscript_urls.length] = { "url": this._text, "method": "get" };
            }
            return this._text;
        }
    });
}
HTMLVideoElement.prototype = Object.create(HTMLElement.prototype);
HTMLVideoElement.prototype.constructor = HTMLVideoElement;
HTMLVideoElement.toString = HTMLVideoElement.toJSON = () => {
    return "HTMLVideoElement"
}

IDBCursor = function () {
    util_log(">>> FIXME: IDBCursor used");
    return IDBCursor;
}
IDBCursorWithValue = function () {
    util_log(">>> FIXME: IDBCursorWithValue used");
    return IDBCursorWithValue;
}
IDBDatabase = function () {
    util_log(">>> FIXME: IDBDatabase used");
    return IDBDatabase;
}
IDBFactory = function () {
    util_log(">>> FIXME: IDBFactory used");
    return IDBFactory;
}
IDBFileHandle = function () {
    util_log(">>> FIXME: IDBFileHandle used");
    return IDBFileHandle;
}
IDBFileRequest = function () {
    util_log(">>> FIXME: IDBFileRequest used");
    return IDBFileRequest;
}
IDBIndex = function () {
    util_log(">>> FIXME: IDBIndex used");
    return IDBIndex;
}
IDBKeyRange = function () {
    util_log(">>> FIXME: IDBKeyRange used");
    return IDBKeyRange;
}
IDBLocaleAwareKeyRange = function () {
    util_log(">>> FIXME: IDBLocaleAwareKeyRange used");
    return IDBLocaleAwareKeyRange;
}
IDBMutableFile = function () {
    util_log(">>> FIXME: IDBMutableFile used");
    return IDBMutableFile;
}
IDBObjectStore = function () {
    util_log(">>> FIXME: IDBObjectStore used");
    return IDBObjectStore;
}
IDBOpenDBRequest = function () {
    util_log(">>> FIXME: IDBOpenDBRequest used");
    return IDBOpenDBRequest;
}
IDBRequest = function () {
    util_log(">>> FIXME: IDBRequest used");
    return IDBRequest;
}
IDBTransaction = function () {
    util_log(">>> FIXME: IDBTransaction used");
    return IDBTransaction;
}

IDBVersionChangeEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "IDBVersionChangeEvent[" + this.id + "]";

    util_log("new " + this._name);
}
IDBVersionChangeEvent.prototype = Object.create(Event.prototype);
IDBVersionChangeEvent.prototype.constructor = IDBVersionChangeEvent;
IDBVersionChangeEvent.toString = IDBVersionChangeEvent.toJSON = () => {
    return "IDBVersionChangeEvent"
}

IdleDeadline = function () {
    util_log(">>> FIXME: IdleDeadline used");
    return IdleDeadline;
}
IdleDetector = function () {
    util_log(">>> FIXME: IdleDetector used");
    return IdleDetector;
}
IIRFilterNode = function () {
    util_log(">>> FIXME: IIRFilterNode used");
    return IIRFilterNode;
}
ImageBitmap = function () {
    util_log(">>> FIXME: ImageBitmap used");
    return ImageBitmap;
}
ImageBitmapRenderingContext = function () {
    util_log(">>> FIXME: ImageBitmapRenderingContext used");
    return ImageBitmapRenderingContext;
}
ImageCapture = function () {
    util_log(">>> FIXME: ImageCapture used");
    return ImageCapture;
}
ImageData = function () {
    util_log(">>> FIXME: ImageData used");
    return ImageData;
}
ImageDecoder = function () {
    util_log(">>> FIXME: ImageDecoder used");
    return ImageDecoder;
}
ImageTrack = function () {
    util_log(">>> FIXME: ImageTrack used");
    return ImageTrack;
}
ImageTrackList = function () {
    util_log(">>> FIXME: ImageTrackList used");
    return ImageTrackList;
}
indexedDB = function () {
    util_log(">>> FIXME: indexedDB used");
    return indexedDB;
}
Ink = function () {
    util_log(">>> FIXME: Ink used");
    return Ink;
}
InkPresenter = function () {
    util_log(">>> FIXME: InkPresenter used");
    return InkPresenter;
}
InputDeviceCapabilities = function () {
    util_log(">>> FIXME: InputDeviceCapabilities used");
    return InputDeviceCapabilities;
}
InputDeviceInfo = function () {
    util_log(">>> FIXME: InputDeviceInfo used");
    return InputDeviceInfo;
}

InputEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "InputEvent[" + this.id + "]";

    util_log("new " + this._name);
}
InputEvent.prototype = Object.create(Event.prototype);
InputEvent.prototype.constructor = InputEvent;
InputEvent.toString = InputEvent.toJSON = () => {
    return "InputEvent"
}

InstallEvent = function () {
    util_log(">>> FIXME: InstallEvent used");
    return InstallEvent;
}
IntersectionObserver = function () {
    util_log(">>> FIXME: IntersectionObserver used");
    return IntersectionObserver;
}
IntersectionObserverEntry = function () {
    util_log(">>> FIXME: IntersectionObserverEntry used");
    return IntersectionObserverEntry;
}
InterventionReportBody = function () {
    util_log(">>> FIXME: InterventionReportBody used");
    return InterventionReportBody;
}
isSecureContext = function () {
    util_log(">>> FIXME: isSecureContext used");
    return isSecureContext;
}
Keyboard = function () {
    util_log(">>> FIXME: Keyboard used");
    return Keyboard;
}

// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEven
KeyboardEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "KeyboardEvent[" + this.id + "]";

    util_log("new " + this._name);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#instance_methods

    this.getModifierState = function () {
        util_log("new getModifierState(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    }
    this.initKeyboardEvent = function () {
        util_log("new initKeyboardEvent(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#instance_properties

    _defineSingleProperty(this, "altKey");
    _defineSingleProperty(this, "code");
    _defineSingleProperty(this, "ctrlKey");
    _defineSingleProperty(this, "key");
    _defineSingleProperty(this, "locale");
    _defineSingleProperty(this, "location");
    _defineSingleProperty(this, "metaKey");
    _defineSingleProperty(this, "repeat");
    _defineSingleProperty(this, "shiftKey");

    // Obsolete properties
    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#obsolete_properties

    _defineSingleProperty(this, "char");
    _defineSingleProperty(this, "charCode");

    // Defined below
    // _defineSingleProperty(this, "keyCode");

    _defineSingleProperty(this, "keyIdentifier");
    _defineSingleProperty(this, "keyLocation");

    // Already defined in event.js
    // _defineSingleProperty(this, "which");

    // Assign the Keyboard event type to the keycode
    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
    Object.defineProperty(this, "keyCode", {
        get: function () {
            // Defined in browser.js
            if (this.type in KEYBOARD_EVENT_KEYCODE_MAP) {
                let keyCode = KEYBOARD_EVENT_KEYCODE_MAP[this.type];
                util_log(this._name + ".keyCode.get() => " + keyCode);
                return keyCode;
            } else {
                util_log(">>> FIXME: Add '" + this.type + "' to the KEYBOARD_EVENT_KEYCODE_MAP");
                return undefined
            }
        }
    });
}
KeyboardEvent.prototype = Object.create(Event.prototype);
KeyboardEvent.prototype.constructor = KeyboardEvent;
KeyboardEvent.toString = KeyboardEvent.toJSON = () => {
    return "KeyboardEvent"
}

KeyboardLayoutMap = function () {
    util_log(">>> FIXME: KeyboardLayoutMap used");
    return KeyboardLayoutMap;
}
KeyframeEffect = function () {
    util_log(">>> FIXME: KeyframeEffect used");
    return KeyframeEffect;
}
KHR_parallel_shader_compile = function () {
    util_log(">>> FIXME: KHR_parallel_shader_compile used");
    return KHR_parallel_shader_compile;
}
LargestContentfulPaint = function () {
    util_log(">>> FIXME: LargestContentfulPaint used");
    return LargestContentfulPaint;
}
LaunchParams = function () {
    util_log(">>> FIXME: LaunchParams used");
    return LaunchParams;
}
LaunchQueue = function () {
    util_log(">>> FIXME: LaunchQueue used");
    return LaunchQueue;
}
LayoutShift = function () {
    util_log(">>> FIXME: LayoutShift used");
    return LayoutShift;
}
LayoutShiftAttribution = function () {
    util_log(">>> FIXME: LayoutShiftAttribution used");
    return LayoutShiftAttribution;
}
LinearAccelerationSensor = function () {
    util_log(">>> FIXME: LinearAccelerationSensor used");
    return LinearAccelerationSensor;
}

// This is defined in location.js
// Location = function () { }

Lock = function () {
    util_log(">>> FIXME: Lock used");
    return Lock;
}
LockManager = function () {
    util_log(">>> FIXME: LockManager used");
    return LockManager;
}
Magnetometer = function () {
    util_log(">>> FIXME: Magnetometer used");
    return Magnetometer;
}
MathMLElement = function () {
    util_log(">>> FIXME: MathMLElement used");
    return MathMLElement;
}
MediaCapabilities = function () {
    util_log(">>> FIXME: MediaCapabilities used");
    return MediaCapabilities;
}
MediaDeviceInfo = function () {
    util_log(">>> FIXME: MediaDeviceInfo used");
    return MediaDeviceInfo;
}
MediaDevices = function () {
    util_log(">>> FIXME: MediaDevices used");
    return MediaDevices;
}
MediaElementAudioSourceNode = function () {
    util_log(">>> FIXME: MediaElementAudioSourceNode used");
    return MediaElementAudioSourceNode;
}
MediaError = function () {
    util_log(">>> FIXME: MediaError used");
    return MediaError;
}
MediaImage = function () {
    util_log(">>> FIXME: MediaImage used");
    return MediaImage;
}
MediaKeyMessageEvent = function () {
    util_log(">>> FIXME: MediaKeyMessageEvent used");
    return MediaKeyMessageEvent;
}
MediaKeys = function () {
    util_log(">>> FIXME: MediaKeys used");
    return MediaKeys;
}
MediaKeySession = function () {
    util_log(">>> FIXME: MediaKeySession used");
    return MediaKeySession;
}
MediaKeyStatusMap = function () {
    util_log(">>> FIXME: MediaKeyStatusMap used");
    return MediaKeyStatusMap;
}
MediaKeySystemAccess = function () {
    util_log(">>> FIXME: MediaKeySystemAccess used");
    return MediaKeySystemAccess;
}
MediaList = function () {
    util_log(">>> FIXME: MediaList used");
    return MediaList;
}
MediaMetadata = function () {
    util_log(">>> FIXME: MediaMetadata used");
    return MediaMetadata;
}
MediaQueryList = function () {
    util_log(">>> FIXME: MediaQueryList used");
    return MediaQueryList;
}
MediaQueryListEvent = function () {
    util_log(">>> FIXME: MediaQueryListEvent used");
    return MediaQueryListEvent;
}
MediaRecorder = function () {
    util_log(">>> FIXME: MediaRecorder used");
    return MediaRecorder;
}
MediaRecorderErrorEvent = function () {
    util_log(">>> FIXME: MediaRecorderErrorEvent used");
    return MediaRecorderErrorEvent;
}
MediaSession = function () {
    util_log(">>> FIXME: MediaSession used");
    return MediaSession;
}
MediaSource = function () {
    util_log(">>> FIXME: MediaSource used");
    return MediaSource;
}
MediaSourceHandle = function () {
    util_log(">>> FIXME: MediaSourceHandle used");
    return MediaSourceHandle;
}
MediaStream = function () {
    util_log(">>> FIXME: MediaStream used");
    return MediaStream;
}
MediaStreamAudioDestinationNode = function () {
    util_log(">>> FIXME: MediaStreamAudioDestinationNode used");
    return MediaStreamAudioDestinationNode;
}
MediaStreamAudioSourceNode = function () {
    util_log(">>> FIXME: MediaStreamAudioSourceNode used");
    return MediaStreamAudioSourceNode;
}

MediaStreamEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "MediaStreamEvent[" + this.id + "]";

    util_log("new " + this._name);
}
MediaStreamEvent.prototype = Object.create(Event.prototype);
MediaStreamEvent.prototype.constructor = MediaStreamEvent;
MediaStreamEvent.toString = MediaStreamEvent.toJSON = () => {
    return "MediaStreamEvent"
}

MediaStreamTrack = function () {
    util_log(">>> FIXME: MediaStreamTrack used");
    return MediaStreamTrack;
}
MediaStreamTrackAudioSourceNode = function () {
    util_log(">>> FIXME: MediaStreamTrackAudioSourceNode used");
    return MediaStreamTrackAudioSourceNode;
}
MediaStreamTrackEvent = function () {
    util_log(">>> FIXME: MediaStreamTrackEvent used");
    return MediaStreamTrackEvent;
}
MediaStreamTrackGenerator = function () {
    util_log(">>> FIXME: MediaStreamTrackGenerator used");
    return MediaStreamTrackGenerator;
}
MediaStreamTrackProcessor = function () {
    util_log(">>> FIXME: MediaStreamTrackProcessor used");
    return MediaStreamTrackProcessor;
}
MediaTrackConstraints = function () {
    util_log(">>> FIXME: MediaTrackConstraints used");
    return MediaTrackConstraints;
}
MediaTrackSettings = function () {
    util_log(">>> FIXME: MediaTrackSettings used");
    return MediaTrackSettings;
}
MediaTrackSupportedConstraints = function () {
    util_log(">>> FIXME: MediaTrackSupportedConstraints used");
    return MediaTrackSupportedConstraints;
}
MerchantValidationEvent = function () {
    util_log(">>> FIXME: MerchantValidationEvent used");
    return MerchantValidationEvent;
}
MessageChannel = function () {
    util_log(">>> FIXME: MessageChannel used");
    return MessageChannel;
}

// https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent
MessageEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "MessageEvent[" + this.id + "]";

    util_log("new " + this._name);

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent#instance_properties

    // _defineSingleProperty(this, "data");
    this.data = "get";

    _defineSingleProperty(this, "lastEventId");

    // _defineSingleProperty(this, "origin");
    this.origin = "null";

    _defineSingleProperty(this, "ports");

    // https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source
    // _defineSingleProperty(this, "source");
    this.source = window;
}
MessageEvent.prototype = Object.create(Event.prototype);
MessageEvent.prototype.constructor = MessageEvent;
MessageEvent.toString = MessageEvent.toJSON = () => {
    return "MessageEvent"
}

MessagePort = function () {
    util_log(">>> FIXME: MessagePort used");
    return MessagePort;
}
Metadata = function () {
    util_log(">>> FIXME: Metadata used");
    return Metadata;
}
MIDIAccess = function () {
    util_log(">>> FIXME: MIDIAccess used");
    return MIDIAccess;
}
MIDIConnectionEvent = function () {
    util_log(">>> FIXME: MIDIConnectionEvent used");
    return MIDIConnectionEvent;
}
MIDIInput = function () {
    util_log(">>> FIXME: MIDIInput used");
    return MIDIInput;
}
MIDIInputMap = function () {
    util_log(">>> FIXME: MIDIInputMap used");
    return MIDIInputMap;
}
MIDIMessageEvent = function () {
    util_log(">>> FIXME: MIDIMessageEvent used");
    return MIDIMessageEvent;
}
MIDIOutput = function () {
    util_log(">>> FIXME: MIDIOutput used");
    return MIDIOutput;
}
MIDIOutputMap = function () {
    util_log(">>> FIXME: MIDIOutputMap used");
    return MIDIOutputMap;
}
MIDIPort = function () {
    util_log(">>> FIXME: MIDIPort used");
    return MIDIPort;
}
MimeType = function () {
    util_log(">>> FIXME: MimeType used");
    return MimeType;
}
MimeTypeArray = function () {
    util_log(">>> FIXME: MimeTypeArray used");
    return MimeTypeArray;
}

// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
MouseEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "MouseEvent[" + this.id + "]";

    util_log("new " + this._name);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent#instance_methods

    this.getModifierState = function () {
        util_log("new getModifierState(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    }
    this.initMouseEvent = function () {
        util_log("new initMouseEvent(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent#instance_properties

    _defineSingleProperty(this, "altKey");
    _defineSingleProperty(this, "button");
    _defineSingleProperty(this, "buttons");
    _defineSingleProperty(this, "clientX");
    _defineSingleProperty(this, "clientY");
    _defineSingleProperty(this, "ctrlKey");
    _defineSingleProperty(this, "layerX");
    _defineSingleProperty(this, "layerY");
    _defineSingleProperty(this, "metaKey");
    _defineSingleProperty(this, "movementX");
    _defineSingleProperty(this, "movementY");
    _defineSingleProperty(this, "mozInputSource");
    _defineSingleProperty(this, "offsetX");
    _defineSingleProperty(this, "offsetY");
    _defineSingleProperty(this, "pageX");
    _defineSingleProperty(this, "pageY");
    _defineSingleProperty(this, "relatedTarget");
    _defineSingleProperty(this, "screenX");
    _defineSingleProperty(this, "screenY");
    _defineSingleProperty(this, "shiftKey");
    _defineSingleProperty(this, "webkitForce");
    _defineSingleProperty(this, "x");
    _defineSingleProperty(this, "y");
}
MouseEvent.prototype = Object.create(Event.prototype);
MouseEvent.prototype.constructor = MouseEvent;
MouseEvent.toString = MouseEvent.toJSON = () => {
    return "MouseEvent"
}

MouseScrollEvent = function () {
    util_log(">>> FIXME: MouseScrollEvent used");
    return MouseScrollEvent;
}
MSGestureEvent = function () {
    util_log(">>> FIXME: MSGestureEvent used");
    return MSGestureEvent;
}
MSGraphicsTrust = function () {
    util_log(">>> FIXME: MSGraphicsTrust used");
    return MSGraphicsTrust;
}
MSManipulationEvent = function () {
    util_log(">>> FIXME: MSManipulationEvent used");
    return MSManipulationEvent;
}
MSSiteModeEvent = function () {
    util_log(">>> FIXME: MSSiteModeEvent used");
    return MSSiteModeEvent;
}
msWriteProfilerMark = function () {
    util_log(">>> FIXME: msWriteProfilerMark used");
    return msWriteProfilerMark;
}

MutationEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "MutationEvent[" + this.id + "]";

    util_log("new " + this._name);
}
MutationEvent.prototype = Object.create(Event.prototype);
MutationEvent.prototype.constructor = MutationEvent;
MutationEvent.toString = MutationEvent.toJSON = () => {
    return "MutationEvent"
}

MutationObserver = function () {
    util_log(">>> FIXME: MutationObserver used");
    return MutationObserver;
}
MutationRecord = function () {
    util_log(">>> FIXME: MutationRecord used");
    return MutationRecord;
}
NamedNodeMap = function () {
    util_log(">>> FIXME: NamedNodeMap used");
    return NamedNodeMap;
}
NavigateEvent = function () {
    util_log(">>> FIXME: NavigateEvent used");
    return NavigateEvent;
}
Navigation = function () {
    util_log(">>> FIXME: Navigation used");
    return Navigation;
}
NavigationCurrentEntryChangeEvent = function () {
    util_log(">>> FIXME: NavigationCurrentEntryChangeEvent used");
    return NavigationCurrentEntryChangeEvent;
}
NavigationDestination = function () {
    util_log(">>> FIXME: NavigationDestination used");
    return NavigationDestination;
}
NavigationHistoryEntry = function () {
    util_log(">>> FIXME: NavigationHistoryEntry used");
    return NavigationHistoryEntry;
}
NavigationPreloadManager = function () {
    util_log(">>> FIXME: NavigationPreloadManager used");
    return NavigationPreloadManager;
}
NavigationTransition = function () {
    util_log(">>> FIXME: NavigationTransition used");
    return NavigationTransition;
}
Navigator = function () {
    util_log(">>> FIXME: Navigator used");
    return Navigator;
}
NavigatorUAData = function () {
    util_log(">>> FIXME: NavigatorUAData used");
    return NavigatorUAData;
}
NDEFMessage = function () {
    util_log(">>> FIXME: NDEFMessage used");
    return NDEFMessage;
}
NDEFReader = function () {
    util_log(">>> FIXME: NDEFReader used");
    return NDEFReader;
}
NDEFReadingEvent = function () {
    util_log(">>> FIXME: NDEFReadingEvent used");
    return NDEFReadingEvent;
}
NDEFRecord = function () {
    util_log(">>> FIXME: NDEFRecord used");
    return NDEFRecord;
}
NetworkInformation = function () {
    util_log(">>> FIXME: NetworkInformation used");
    return NetworkInformation;
}

// This is defined in element.js
// Node = function () { }

NodeIterator = function () {
    util_log(">>> FIXME: NodeIterator used");
    return NodeIterator;
}
NodeList = function () {
    util_log(">>> FIXME: NodeList used");
    return NodeList;
}
Notification = function () {
    util_log(">>> FIXME: Notification used");
    return Notification;
}
NotificationEvent = function () {
    util_log(">>> FIXME: NotificationEvent used");
    return NotificationEvent;
}
NotifyAudioAvailableEvent = function () {
    util_log(">>> FIXME: NotifyAudioAvailableEvent used");
    return NotifyAudioAvailableEvent;
}
OES_element_index_uint = function () {
    util_log(">>> FIXME: OES_element_index_uint used");
    return OES_element_index_uint;
}
OES_fbo_render_mipmap = function () {
    util_log(">>> FIXME: OES_fbo_render_mipmap used");
    return OES_fbo_render_mipmap;
}
OES_standard_derivatives = function () {
    util_log(">>> FIXME: OES_standard_derivatives used");
    return OES_standard_derivatives;
}
OES_texture_float = function () {
    util_log(">>> FIXME: OES_texture_float used");
    return OES_texture_float;
}
OES_texture_float_linear = function () {
    util_log(">>> FIXME: OES_texture_float_linear used");
    return OES_texture_float_linear;
}
OES_texture_half_float = function () {
    util_log(">>> FIXME: OES_texture_half_float used");
    return OES_texture_half_float;
}
OES_texture_half_float_linear = function () {
    util_log(">>> FIXME: OES_texture_half_float_linear used");
    return OES_texture_half_float_linear;
}
OES_vertex_array_object = function () {
    util_log(">>> FIXME: OES_vertex_array_object used");
    return OES_vertex_array_object;
}

OfflineAudioCompletionEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "OfflineAudioCompletionEvent[" + this.id + "]";

    util_log("new " + this._name);
}
OfflineAudioCompletionEvent.prototype = Object.create(Event.prototype);
OfflineAudioCompletionEvent.prototype.constructor = OfflineAudioCompletionEvent;
OfflineAudioCompletionEvent.toString = OfflineAudioCompletionEvent.toJSON = () => {
    return "OfflineAudioCompletionEvent"
}

OfflineAudioContext = function () {
    util_log(">>> FIXME: OfflineAudioContext used");
    return OfflineAudioContext;
}
OffscreenCanvas = function () {
    util_log(">>> FIXME: OffscreenCanvas used");
    return OffscreenCanvas;
}
OffscreenCanvasRenderingContext2D = function () {
    util_log(">>> FIXME: OffscreenCanvasRenderingContext2D used");
    return OffscreenCanvasRenderingContext2D;
}
OrientationSensor = function () {
    util_log(">>> FIXME: OrientationSensor used");
    return OrientationSensor;
}
origin = function () {
    util_log(">>> FIXME: origin used");
    return origin;
}
OscillatorNode = function () {
    util_log(">>> FIXME: OscillatorNode used");
    return OscillatorNode;
}
OTPCredential = function () {
    util_log(">>> FIXME: OTPCredential used");
    return OTPCredential;
}
OverconstrainedError = function () {
    util_log(">>> FIXME: OverconstrainedError used");
    return OverconstrainedError;
}
OVR_multiview2 = function () {
    util_log(">>> FIXME: OVR_multiview2 used");
    return OVR_multiview2;
}

PageTransitionEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "PageTransitionEvent[" + this.id + "]";

    util_log("new " + this._name);
}
PageTransitionEvent.prototype = Object.create(Event.prototype);
PageTransitionEvent.prototype.constructor = PageTransitionEvent;
PageTransitionEvent.toString = PageTransitionEvent.toJSON = () => {
    return "PageTransitionEvent"
}

PaintWorklet = function () {
    util_log(">>> FIXME: PaintWorklet used");
    return PaintWorklet;
}
PannerNode = function () {
    util_log(">>> FIXME: PannerNode used");
    return PannerNode;
}
PasswordCredential = function () {
    util_log(">>> FIXME: PasswordCredential used");
    return PasswordCredential;
}
Path2D = function () {
    util_log(">>> FIXME: Path2D used");
    return Path2D;
}
PaymentAddress = function () {
    util_log(">>> FIXME: PaymentAddress used");
    return PaymentAddress;
}
PaymentManager = function () {
    util_log(">>> FIXME: PaymentManager used");
    return PaymentManager;
}
PaymentMethodChangeEvent = function () {
    util_log(">>> FIXME: PaymentMethodChangeEvent used");
    return PaymentMethodChangeEvent;
}
PaymentRequest = function () {
    util_log(">>> FIXME: PaymentRequest used");
    return PaymentRequest;
}
PaymentRequestEvent = function () {
    util_log(">>> FIXME: PaymentRequestEvent used");
    return PaymentRequestEvent;
}

PaymentRequestUpdateEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "PaymentRequestUpdateEvent[" + this.id + "]";

    util_log("new " + this._name);
}
PaymentRequestUpdateEvent.prototype = Object.create(Event.prototype);
PaymentRequestUpdateEvent.prototype.constructor = PaymentRequestUpdateEvent;
PaymentRequestUpdateEvent.toString = PaymentRequestUpdateEvent.toJSON = () => {
    return "PaymentRequestUpdateEvent"
}

PaymentResponse = function () {
    util_log(">>> FIXME: PaymentResponse used");
    return PaymentResponse;
}
Pbkdf2Params = function () {
    util_log(">>> FIXME: Pbkdf2Params used");
    return Pbkdf2Params;
}
Performance = function () {
    util_log(">>> FIXME: Performance used");
    return Performance;
}
PerformanceElementTiming = function () {
    util_log(">>> FIXME: PerformanceElementTiming used");
    return PerformanceElementTiming;
}
PerformanceEntry = function () {
    util_log(">>> FIXME: PerformanceEntry used");
    return PerformanceEntry;
}
PerformanceEventTiming = function () {
    util_log(">>> FIXME: PerformanceEventTiming used");
    return PerformanceEventTiming;
}
PerformanceLongTaskTiming = function () {
    util_log(">>> FIXME: PerformanceLongTaskTiming used");
    return PerformanceLongTaskTiming;
}
PerformanceMark = function () {
    util_log(">>> FIXME: PerformanceMark used");
    return PerformanceMark;
}
PerformanceMeasure = function () {
    util_log(">>> FIXME: PerformanceMeasure used");
    return PerformanceMeasure;
}
PerformanceNavigation = function () {
    util_log(">>> FIXME: PerformanceNavigation used");
    return PerformanceNavigation;
}
PerformanceNavigationTiming = function () {
    util_log(">>> FIXME: PerformanceNavigationTiming used");
    return PerformanceNavigationTiming;
}
PerformanceObserver = function () {
    util_log(">>> FIXME: PerformanceObserver used");
    return PerformanceObserver;
}
PerformanceObserverEntryList = function () {
    util_log(">>> FIXME: PerformanceObserverEntryList used");
    return PerformanceObserverEntryList;
}
PerformancePaintTiming = function () {
    util_log(">>> FIXME: PerformancePaintTiming used");
    return PerformancePaintTiming;
}
PerformanceResourceTiming = function () {
    util_log(">>> FIXME: PerformanceResourceTiming used");
    return PerformanceResourceTiming;
}
PerformanceServerTiming = function () {
    util_log(">>> FIXME: PerformanceServerTiming used");
    return PerformanceServerTiming;
}
PerformanceTiming = function () {
    util_log(">>> FIXME: PerformanceTiming used");
    return PerformanceTiming;
}
PeriodicSyncEvent = function () {
    util_log(">>> FIXME: PeriodicSyncEvent used");
    return PeriodicSyncEvent;
}
PeriodicSyncManager = function () {
    util_log(">>> FIXME: PeriodicSyncManager used");
    return PeriodicSyncManager;
}
PeriodicWave = function () {
    util_log(">>> FIXME: PeriodicWave used");
    return PeriodicWave;
}
Permissions = function () {
    util_log(">>> FIXME: Permissions used");
    return Permissions;
}
PermissionStatus = function () {
    util_log(">>> FIXME: PermissionStatus used");
    return PermissionStatus;
}
PictureInPictureEvent = function () {
    util_log(">>> FIXME: PictureInPictureEvent used");
    return PictureInPictureEvent;
}
PictureInPictureWindow = function () {
    util_log(">>> FIXME: PictureInPictureWindow used");
    return PictureInPictureWindow;
}
Plugin = function () {
    util_log(">>> FIXME: Plugin used");
    return Plugin;
}
PluginArray = function () {
    util_log(">>> FIXME: PluginArray used");
    return PluginArray;
}
Point = function () {
    util_log(">>> FIXME: Point used");
    return Point;
}

PointerEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "PointerEvent[" + this.id + "]";

    util_log("new " + this._name);
}
PointerEvent.prototype = Object.create(Event.prototype);
PointerEvent.prototype.constructor = PointerEvent;
PointerEvent.toString = PointerEvent.toJSON = () => {
    return "PointerEvent"
}

PopStateEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "PopStateEvent[" + this.id + "]";

    util_log("new " + this._name);
}
PopStateEvent.prototype = Object.create(Event.prototype);
PopStateEvent.prototype.constructor = PopStateEvent;
PopStateEvent.toString = PopStateEvent.toJSON = () => {
    return "PopStateEvent"
}

PositionSensorVRDevice = function () {
    util_log(">>> FIXME: PositionSensorVRDevice used");
    return PositionSensorVRDevice;
}
Presentation = function () {
    util_log(">>> FIXME: Presentation used");
    return Presentation;
}
PresentationAvailability = function () {
    util_log(">>> FIXME: PresentationAvailability used");
    return PresentationAvailability;
}
PresentationConnection = function () {
    util_log(">>> FIXME: PresentationConnection used");
    return PresentationConnection;
}
PresentationConnectionAvailableEvent = function () {
    util_log(">>> FIXME: PresentationConnectionAvailableEvent used");
    return PresentationConnectionAvailableEvent;
}
PresentationConnectionCloseEvent = function () {
    util_log(">>> FIXME: PresentationConnectionCloseEvent used");
    return PresentationConnectionCloseEvent;
}
PresentationConnectionList = function () {
    util_log(">>> FIXME: PresentationConnectionList used");
    return PresentationConnectionList;
}
PresentationReceiver = function () {
    util_log(">>> FIXME: PresentationReceiver used");
    return PresentationReceiver;
}
PresentationRequest = function () {
    util_log(">>> FIXME: PresentationRequest used");
    return PresentationRequest;
}
ProcessingInstruction = function () {
    util_log(">>> FIXME: ProcessingInstruction used");
    return ProcessingInstruction;
}

ProgressEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "ProgressEvent[" + this.id + "]";

    util_log("new " + this._name);
}
ProgressEvent.prototype = Object.create(Event.prototype);
ProgressEvent.prototype.constructor = ProgressEvent;
ProgressEvent.toString = ProgressEvent.toJSON = () => {
    return "ProgressEvent"
}

PromiseRejectionEvent = function () {
    util_log(">>> FIXME: PromiseRejectionEvent used");
    return PromiseRejectionEvent;
}
PublicKeyCredential = function () {
    util_log(">>> FIXME: PublicKeyCredential used");
    return PublicKeyCredential;
}
PublicKeyCredentialRequestOptions = function () {
    util_log(">>> FIXME: PublicKeyCredentialRequestOptions used");
    return PublicKeyCredentialRequestOptions;
}
PushEvent = function () {
    util_log(">>> FIXME: PushEvent used");
    return PushEvent;
}
PushManager = function () {
    util_log(">>> FIXME: PushManager used");
    return PushManager;
}
PushMessageData = function () {
    util_log(">>> FIXME: PushMessageData used");
    return PushMessageData;
}
PushSubscription = function () {
    util_log(">>> FIXME: PushSubscription used");
    return PushSubscription;
}
PushSubscriptionOptions = function () {
    util_log(">>> FIXME: PushSubscriptionOptions used");
    return PushSubscriptionOptions;
}
queueMicrotask = function () {
    util_log(">>> FIXME: queueMicrotask used");
    return queueMicrotask;
}
RadioNodeList = function () {
    util_log(">>> FIXME: RadioNodeList used");
    return RadioNodeList;
}
Range = function () {
    util_log(">>> FIXME: Range used");
    return Range;
}
ReadableByteStreamController = function () {
    util_log(">>> FIXME: ReadableByteStreamController used");
    return ReadableByteStreamController;
}
ReadableStream = function () {
    util_log(">>> FIXME: ReadableStream used");
    return ReadableStream;
}
ReadableStreamBYOBReader = function () {
    util_log(">>> FIXME: ReadableStreamBYOBReader used");
    return ReadableStreamBYOBReader;
}
ReadableStreamBYOBRequest = function () {
    util_log(">>> FIXME: ReadableStreamBYOBRequest used");
    return ReadableStreamBYOBRequest;
}
ReadableStreamDefaultController = function () {
    util_log(">>> FIXME: ReadableStreamDefaultController used");
    return ReadableStreamDefaultController;
}
ReadableStreamDefaultReader = function () {
    util_log(">>> FIXME: ReadableStreamDefaultReader used");
    return ReadableStreamDefaultReader;
}
RelativeOrientationSensor = function () {
    util_log(">>> FIXME: RelativeOrientationSensor used");
    return RelativeOrientationSensor;
}
RemotePlayback = function () {
    util_log(">>> FIXME: RemotePlayback used");
    return RemotePlayback;
}
Report = function () {
    util_log(">>> FIXME: Report used");
    return Report;
}
ReportBody = function () {
    util_log(">>> FIXME: ReportBody used");
    return ReportBody;
}
reportError = function () {
    util_log(">>> FIXME: reportError used");
    return reportError;
}
ReportingObserver = function () {
    util_log(">>> FIXME: ReportingObserver used");
    return ReportingObserver;
}
Request = function () {
    util_log(">>> FIXME: Request used");
    return Request;
}
ResizeObserver = function () {
    util_log(">>> FIXME: ResizeObserver used");
    return ResizeObserver;
}
ResizeObserverEntry = function () {
    util_log(">>> FIXME: ResizeObserverEntry used");
    return ResizeObserverEntry;
}
ResizeObserverSize = function () {
    util_log(">>> FIXME: ResizeObserverSize used");
    return ResizeObserverSize;
}
// https://developer.mozilla.org/en-US/docs/Web/API/Response/Response
Response = function (body, options) {
    util_log("new Response(" + body + ", " + options + ")");
    return new ResponseAlias(body, options);
}
RsaHashedImportParams = function () {
    util_log(">>> FIXME: RsaHashedImportParams used");
    return RsaHashedImportParams;
}
RsaHashedKeyGenParams = function () {
    util_log(">>> FIXME: RsaHashedKeyGenParams used");
    return RsaHashedKeyGenParams;
}
RsaOaepParams = function () {
    util_log(">>> FIXME: RsaOaepParams used");
    return RsaOaepParams;
}
RsaPssParams = function () {
    util_log(">>> FIXME: RsaPssParams used");
    return RsaPssParams;
}
RTCCertificate = function () {
    util_log(">>> FIXME: RTCCertificate used");
    return RTCCertificate;
}
RTCDataChannel = function () {
    util_log(">>> FIXME: RTCDataChannel used");
    return RTCDataChannel;
}

RTCDataChannelEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "RTCDataChannelEvent[" + this.id + "]";

    util_log("new " + this._name);
}
RTCDataChannelEvent.prototype = Object.create(Event.prototype);
RTCDataChannelEvent.prototype.constructor = RTCDataChannelEvent;
RTCDataChannelEvent.toString = RTCDataChannelEvent.toJSON = () => {
    return "RTCDataChannelEvent"
}

RTCDtlsTransport = function () {
    util_log(">>> FIXME: RTCDtlsTransport used");
    return RTCDtlsTransport;
}
RTCDTMFSender = function () {
    util_log(">>> FIXME: RTCDTMFSender used");
    return RTCDTMFSender;
}
RTCDTMFToneChangeEvent = function () {
    util_log(">>> FIXME: RTCDTMFToneChangeEvent used");
    return RTCDTMFToneChangeEvent;
}
RTCError = function () {
    util_log(">>> FIXME: RTCError used");
    return RTCError;
}
RTCErrorEvent = function () {
    util_log(">>> FIXME: RTCErrorEvent used");
    return RTCErrorEvent;
}
RTCIceCandidate = function () {
    util_log(">>> FIXME: RTCIceCandidate used");
    return RTCIceCandidate;
}
RTCIceCandidatePair = function () {
    util_log(">>> FIXME: RTCIceCandidatePair used");
    return RTCIceCandidatePair;
}
RTCIceCandidatePairStats = function () {
    util_log(">>> FIXME: RTCIceCandidatePairStats used");
    return RTCIceCandidatePairStats;
}
RTCIceCandidateStats = function () {
    util_log(">>> FIXME: RTCIceCandidateStats used");
    return RTCIceCandidateStats;
}
RTCIceParameters = function () {
    util_log(">>> FIXME: RTCIceParameters used");
    return RTCIceParameters;
}
RTCIceServer = function () {
    util_log(">>> FIXME: RTCIceServer used");
    return RTCIceServer;
}
RTCIceTransport = function () {
    util_log(">>> FIXME: RTCIceTransport used");
    return RTCIceTransport;
}
RTCIdentityAssertion = function () {
    util_log(">>> FIXME: RTCIdentityAssertion used");
    return RTCIdentityAssertion;
}
RTCInboundRtpStreamStats = function () {
    util_log(">>> FIXME: RTCInboundRtpStreamStats used");
    return RTCInboundRtpStreamStats;
}
RTCOutboundRtpStreamStats = function () {
    util_log(">>> FIXME: RTCOutboundRtpStreamStats used");
    return RTCOutboundRtpStreamStats;
}
RTCPeerConnection = function () {
    util_log(">>> FIXME: RTCPeerConnection used");
    return RTCPeerConnection;
}
RTCPeerConnectionIceErrorEvent = function () {
    util_log(">>> FIXME: RTCPeerConnectionIceErrorEvent used");
    return RTCPeerConnectionIceErrorEvent;
}

RTCPeerConnectionIceEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "RTCPeerConnectionIceEvent[" + this.id + "]";

    util_log("new " + this._name);
}
RTCPeerConnectionIceEvent.prototype = Object.create(Event.prototype);
RTCPeerConnectionIceEvent.prototype.constructor = RTCPeerConnectionIceEvent;
RTCPeerConnectionIceEvent.toString = RTCPeerConnectionIceEvent.toJSON = () => {
    return "RTCPeerConnectionIceEvent"
}

RTCRemoteOutboundRtpStreamStats = function () {
    util_log(">>> FIXME: RTCRemoteOutboundRtpStreamStats used");
    return RTCRemoteOutboundRtpStreamStats;
}
RTCRtcpParameters = function () {
    util_log(">>> FIXME: RTCRtcpParameters used");
    return RTCRtcpParameters;
}
RTCRtpCapabilities = function () {
    util_log(">>> FIXME: RTCRtpCapabilities used");
    return RTCRtpCapabilities;
}
RTCRtpCodecCapability = function () {
    util_log(">>> FIXME: RTCRtpCodecCapability used");
    return RTCRtpCodecCapability;
}
RTCRtpCodecParameters = function () {
    util_log(">>> FIXME: RTCRtpCodecParameters used");
    return RTCRtpCodecParameters;
}
RTCRtpContributingSource = function () {
    util_log(">>> FIXME: RTCRtpContributingSource used");
    return RTCRtpContributingSource;
}
RTCRtpEncodingParameters = function () {
    util_log(">>> FIXME: RTCRtpEncodingParameters used");
    return RTCRtpEncodingParameters;
}
RTCRtpParameters = function () {
    util_log(">>> FIXME: RTCRtpParameters used");
    return RTCRtpParameters;
}
RTCRtpReceiveParameters = function () {
    util_log(">>> FIXME: RTCRtpReceiveParameters used");
    return RTCRtpReceiveParameters;
}
RTCRtpReceiver = function () {
    util_log(">>> FIXME: RTCRtpReceiver used");
    return RTCRtpReceiver;
}
RTCRtpSender = function () {
    util_log(">>> FIXME: RTCRtpSender used");
    return RTCRtpSender;
}
RTCRtpSendParameters = function () {
    util_log(">>> FIXME: RTCRtpSendParameters used");
    return RTCRtpSendParameters;
}
RTCRtpStreamStats = function () {
    util_log(">>> FIXME: RTCRtpStreamStats used");
    return RTCRtpStreamStats;
}
RTCRtpTransceiver = function () {
    util_log(">>> FIXME: RTCRtpTransceiver used");
    return RTCRtpTransceiver;
}
RTCSctpTransport = function () {
    util_log(">>> FIXME: RTCSctpTransport used");
    return RTCSctpTransport;
}
RTCSessionDescription = function () {
    util_log(">>> FIXME: RTCSessionDescription used");
    return RTCSessionDescription;
}
RTCStats = function () {
    util_log(">>> FIXME: RTCStats used");
    return RTCStats;
}
RTCStatsReport = function () {
    util_log(">>> FIXME: RTCStatsReport used");
    return RTCStatsReport;
}
RTCTrackEvent = function () {
    util_log(">>> FIXME: RTCTrackEvent used");
    return RTCTrackEvent;
}
Sanitizer = function () {
    util_log(">>> FIXME: Sanitizer used");
    return Sanitizer;
}
Scheduler = function () {
    util_log(">>> FIXME: Scheduler used");
    return Scheduler;
}

// https://developer.mozilla.org/en-US/docs/Web/API/Screen
Screen = _proxy({
    availHeight: 1080,
    availLeft: 78,
    availTop: 0,
    availWidth: 1842,
    colorDepth: 24,
    height: 1080,
    left: 78,
    mozBrightness: 0.5,
    mozEnabled: true,
    // https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation
    orientation: {
        angle: 0,
        onchange: null,
        type: "landscape-primary"
    },
    pixelDepth: 24,
    top: 0,
    width: 1920,
});
Screen.toString = Screen.toJSON = () => { return "Screen" }

ScreenOrientation = function () {
    util_log(">>> FIXME: ScreenOrientation used");
    return ScreenOrientation;
}
ScriptProcessorNode = function () {
    util_log(">>> FIXME: ScriptProcessorNode used");
    return ScriptProcessorNode;
}
SecurityPolicyViolationEvent = function () {
    util_log(">>> FIXME: SecurityPolicyViolationEvent used");
    return SecurityPolicyViolationEvent;
}
Selection = function () {
    util_log(">>> FIXME: Selection used");
    return Selection;
}
crypto = function () {
    util_log(">>> FIXME: self.crypto used");
    return self;
}
performance = function () {
    util_log(">>> FIXME: self.performance used");
    return self;
}
Sensor = function () {
    util_log(">>> FIXME: Sensor used");
    return Sensor;
}
SensorErrorEvent = function () {
    util_log(">>> FIXME: SensorErrorEvent used");
    return SensorErrorEvent;
}
Serial = function () {
    util_log(">>> FIXME: Serial used");
    return Serial;
}
SerialPort = function () {
    util_log(">>> FIXME: SerialPort used");
    return SerialPort;
}
ServiceWorker = function () {
    util_log(">>> FIXME: ServiceWorker used");
    return ServiceWorker;
}
ServiceWorkerContainer = function () {
    util_log(">>> FIXME: ServiceWorkerContainer used");
    return ServiceWorkerContainer;
}
ServiceWorkerGlobalScope = function () {
    util_log(">>> FIXME: ServiceWorkerGlobalScope used");
    return ServiceWorkerGlobalScope;
}
ServiceWorkerRegistration = function () {
    util_log(">>> FIXME: ServiceWorkerRegistration used");
    return ServiceWorkerRegistration;
}

// https://developer.mozilla.org/en-US/docs/Web/API/setInterval
setInterval = function () {
    const func = arguments[0];
    const delay = arguments[1];

    util_log(this._name + ".setInterval(" + _truncateOutput(func) + ", " + delay + ")");
    _setInterval_calls[_setInterval_calls.length] = arguments[0].toString();

    // We wait for no one!
    arguments[1] = 0;

    let result = undefined;
    result = _setInterval.apply(this, Array.prototype.slice.call(arguments, 0));

    // We don't want to repeat this interval
    clearInterval(result)
    return result;
}

// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout
setTimeout = function () {

    let code = undefined;
    let functionRef = undefined;

    if (typeof arguments[0] === "string") {
        code = arguments[0];
    }
    else {
        functionRef = arguments[0];
    }

    const delay = arguments[1];

    let params = [];
    if (arguments.length > 2) {
        params = arguments.slice(2, -1);
    }

    util_log(this._name + ".setTimeout(" + _truncateOutput(arguments[0]) + ", " + delay + ")");

    if (_setTimeout_calls.indexOf(arguments[0].toString()) !== -1) {
        util_log("To avoid possible infinite loops, we are not running this method '" + _truncateOutput(arguments[0]) + "' again...");
        return;
    }

    _setTimeout_calls[_setTimeout_calls.length] = arguments[0].toString();

    // We wait for no one!
    arguments[1] = 0;

    // Node's setTimeout expects a function reference every time, not a string representing code.
    let result = undefined;
    if (code) {
        util_log("Using 'eval + code' to execute setTimeout code...");
        result = eval(code);
    } else {
        util_log("Using 'functionRef' to execute setTimeout code...");
        if (params) {
            result = functionRef(...params);
        } else {
            result = functionRef();
        }
        result = _setTimeout.apply(this, Array.prototype.slice.call(arguments, 0));
    }

    // We don't want to repeat this timeout
    clearTimeout(result)
    return result;
}

ShadowRoot = function () {
    util_log(">>> FIXME: ShadowRoot used");
    return ShadowRoot;
}
SharedWorker = function () {
    util_log(">>> FIXME: SharedWorker used");
    return SharedWorker;
}
SharedWorkerGlobalScope = function () {
    util_log(">>> FIXME: SharedWorkerGlobalScope used");
    return SharedWorkerGlobalScope;
}
SourceBuffer = function () {
    util_log(">>> FIXME: SourceBuffer used");
    return SourceBuffer;
}
SourceBufferList = function () {
    util_log(">>> FIXME: SourceBufferList used");
    return SourceBufferList;
}
SpeechGrammar = function () {
    util_log(">>> FIXME: SpeechGrammar used");
    return SpeechGrammar;
}
SpeechGrammarList = function () {
    util_log(">>> FIXME: SpeechGrammarList used");
    return SpeechGrammarList;
}
SpeechRecognition = function () {
    util_log(">>> FIXME: SpeechRecognition used");
    return SpeechRecognition;
}
SpeechRecognitionAlternative = function () {
    util_log(">>> FIXME: SpeechRecognitionAlternative used");
    return SpeechRecognitionAlternative;
}
SpeechRecognitionErrorEvent = function () {
    util_log(">>> FIXME: SpeechRecognitionErrorEvent used");
    return SpeechRecognitionErrorEvent;
}
SpeechRecognitionEvent = function () {
    util_log(">>> FIXME: SpeechRecognitionEvent used");
    return SpeechRecognitionEvent;
}
SpeechRecognitionResult = function () {
    util_log(">>> FIXME: SpeechRecognitionResult used");
    return SpeechRecognitionResult;
}
SpeechRecognitionResultList = function () {
    util_log(">>> FIXME: SpeechRecognitionResultList used");
    return SpeechRecognitionResultList;
}
SpeechSynthesis = function () {
    util_log(">>> FIXME: SpeechSynthesis used");
    return SpeechSynthesis;
}
SpeechSynthesisErrorEvent = function () {
    util_log(">>> FIXME: SpeechSynthesisErrorEvent used");
    return SpeechSynthesisErrorEvent;
}
SpeechSynthesisEvent = function () {
    util_log(">>> FIXME: SpeechSynthesisEvent used");
    return SpeechSynthesisEvent;
}
SpeechSynthesisUtterance = function () {
    util_log(">>> FIXME: SpeechSynthesisUtterance used");
    return SpeechSynthesisUtterance;
}
SpeechSynthesisVoice = function () {
    util_log(">>> FIXME: SpeechSynthesisVoice used");
    return SpeechSynthesisVoice;
}
StaticRange = function () {
    util_log(">>> FIXME: StaticRange used");
    return StaticRange;
}
StereoPannerNode = function () {
    util_log(">>> FIXME: StereoPannerNode used");
    return StereoPannerNode;
}
Storage = function () {
    util_log(">>> FIXME: Storage used");
    return Storage;
}

StorageEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "StorageEvent[" + this.id + "]";

    util_log("new " + this._name);
}
StorageEvent.prototype = Object.create(Event.prototype);
StorageEvent.prototype.constructor = StorageEvent;
StorageEvent.toString = StorageEvent.toJSON = () => {
    return "StorageEvent"
}

StorageManager = function () {
    util_log(">>> FIXME: StorageManager used");
    return StorageManager;
}
structuredClone = function () {
    util_log(">>> FIXME: structuredClone used");
    return structuredClone;
}
StylePropertyMap = function () {
    util_log(">>> FIXME: StylePropertyMap used");
    return StylePropertyMap;
}
StylePropertyMapReadOnly = function () {
    util_log(">>> FIXME: StylePropertyMapReadOnly used");
    return StylePropertyMapReadOnly;
}
StyleSheet = function () {
    util_log(">>> FIXME: StyleSheet used");
    return StyleSheet;
}
StyleSheetList = function () {
    util_log(">>> FIXME: StyleSheetList used");
    return StyleSheetList;
}

SubmitEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "SubmitEvent[" + this.id + "]";

    util_log("new " + this._name);
}
SubmitEvent.prototype = Object.create(Event.prototype);
SubmitEvent.prototype.constructor = SubmitEvent;
SubmitEvent.toString = SubmitEvent.toJSON = () => {
    return "SubmitEvent"
}

SubtleCrypto = function () {
    util_log(">>> FIXME: SubtleCrypto used");
    return SubtleCrypto;
}
SVGAElement = function () {
    util_log(">>> FIXME: SVGAElement used");
    return SVGAElement;
}
SVGAltGlyphDefElement = function () {
    util_log(">>> FIXME: SVGAltGlyphDefElement used");
    return SVGAltGlyphDefElement;
}
SVGAltGlyphElement = function () {
    util_log(">>> FIXME: SVGAltGlyphElement used");
    return SVGAltGlyphElement;
}
SVGAltGlyphItemElement = function () {
    util_log(">>> FIXME: SVGAltGlyphItemElement used");
    return SVGAltGlyphItemElement;
}
SVGAngle = function () {
    util_log(">>> FIXME: SVGAngle used");
    return SVGAngle;
}
SVGAnimateColorElement = function () {
    util_log(">>> FIXME: SVGAnimateColorElement used");
    return SVGAnimateColorElement;
}
SVGAnimatedAngle = function () {
    util_log(">>> FIXME: SVGAnimatedAngle used");
    return SVGAnimatedAngle;
}
SVGAnimatedBoolean = function () {
    util_log(">>> FIXME: SVGAnimatedBoolean used");
    return SVGAnimatedBoolean;
}
SVGAnimatedEnumeration = function () {
    util_log(">>> FIXME: SVGAnimatedEnumeration used");
    return SVGAnimatedEnumeration;
}
SVGAnimatedInteger = function () {
    util_log(">>> FIXME: SVGAnimatedInteger used");
    return SVGAnimatedInteger;
}
SVGAnimatedLength = function () {
    util_log(">>> FIXME: SVGAnimatedLength used");
    return SVGAnimatedLength;
}
SVGAnimatedLengthList = function () {
    util_log(">>> FIXME: SVGAnimatedLengthList used");
    return SVGAnimatedLengthList;
}
SVGAnimatedNumber = function () {
    util_log(">>> FIXME: SVGAnimatedNumber used");
    return SVGAnimatedNumber;
}
SVGAnimatedNumberList = function () {
    util_log(">>> FIXME: SVGAnimatedNumberList used");
    return SVGAnimatedNumberList;
}
SVGAnimatedPreserveAspectRatio = function () {
    util_log(">>> FIXME: SVGAnimatedPreserveAspectRatio used");
    return SVGAnimatedPreserveAspectRatio;
}
SVGAnimatedRect = function () {
    util_log(">>> FIXME: SVGAnimatedRect used");
    return SVGAnimatedRect;
}
SVGAnimatedString = function () {
    util_log(">>> FIXME: SVGAnimatedString used");
    return SVGAnimatedString;
}
SVGAnimatedTransformList = function () {
    util_log(">>> FIXME: SVGAnimatedTransformList used");
    return SVGAnimatedTransformList;
}
SVGAnimateElement = function () {
    util_log(">>> FIXME: SVGAnimateElement used");
    return SVGAnimateElement;
}
SVGAnimateMotionElement = function () {
    util_log(">>> FIXME: SVGAnimateMotionElement used");
    return SVGAnimateMotionElement;
}
SVGAnimateTransformElement = function () {
    util_log(">>> FIXME: SVGAnimateTransformElement used");
    return SVGAnimateTransformElement;
}
SVGAnimationElement = function () {
    util_log(">>> FIXME: SVGAnimationElement used");
    return SVGAnimationElement;
}

// https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement
SVGCircleElement = function () {
    // Inherit SVGGraphicsElement
    SVGGraphicsElement.call(this, "circle");

    // Key properties for MalwareJail
    this._name = "SVGCircleElement[" + this._id + "]";

    this.elementName = "svg";
    util_log("new " + this._name + "()");
}
SVGCircleElement.prototype = Object.create(SVGGraphicsElement.prototype);
SVGCircleElement.prototype.constructor = SVGCircleElement;
SVGCircleElement.toString = SVGCircleElement.toJSON = () => {
    return "SVGCircleElement"
}

SVGClipPathElement = function () {
    util_log(">>> FIXME: SVGClipPathElement used");
    return SVGClipPathElement;
}
SVGComponentTransferFunctionElement = function () {
    util_log(">>> FIXME: SVGComponentTransferFunctionElement used");
    return SVGComponentTransferFunctionElement;
}
SVGCursorElement = function () {
    util_log(">>> FIXME: SVGCursorElement used");
    return SVGCursorElement;
}
SVGDefsElement = function () {
    util_log(">>> FIXME: SVGDefsElement used");
    return SVGDefsElement;
}
SVGDescElement = function () {
    util_log(">>> FIXME: SVGDescElement used");
    return SVGDescElement;
}

// Defined in element.js
// SVGElement = function () { }

SVGEllipseElement = function () {
    util_log(">>> FIXME: SVGEllipseElement used");
    return SVGEllipseElement;
}

SVGEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "SVGEvent[" + this.id + "]";

    util_log("new " + this._name);
}
SVGEvent.prototype = Object.create(Event.prototype);
SVGEvent.prototype.constructor = SVGEvent;
SVGEvent.toString = SVGEvent.toJSON = () => {
    return "SVGEvent"
}

SVGFEBlendElement = function () {
    util_log(">>> FIXME: SVGFEBlendElement used");
    return SVGFEBlendElement;
}
SVGFEColorMatrixElement = function () {
    util_log(">>> FIXME: SVGFEColorMatrixElement used");
    return SVGFEColorMatrixElement;
}
SVGFEComponentTransferElement = function () {
    util_log(">>> FIXME: SVGFEComponentTransferElement used");
    return SVGFEComponentTransferElement;
}
SVGFECompositeElement = function () {
    util_log(">>> FIXME: SVGFECompositeElement used");
    return SVGFECompositeElement;
}
SVGFEConvolveMatrixElement = function () {
    util_log(">>> FIXME: SVGFEConvolveMatrixElement used");
    return SVGFEConvolveMatrixElement;
}
SVGFEDiffuseLightingElement = function () {
    util_log(">>> FIXME: SVGFEDiffuseLightingElement used");
    return SVGFEDiffuseLightingElement;
}
SVGFEDisplacementMapElement = function () {
    util_log(">>> FIXME: SVGFEDisplacementMapElement used");
    return SVGFEDisplacementMapElement;
}
SVGFEDistantLightElement = function () {
    util_log(">>> FIXME: SVGFEDistantLightElement used");
    return SVGFEDistantLightElement;
}
SVGFEDropShadowElement = function () {
    util_log(">>> FIXME: SVGFEDropShadowElement used");
    return SVGFEDropShadowElement;
}
SVGFEFloodElement = function () {
    util_log(">>> FIXME: SVGFEFloodElement used");
    return SVGFEFloodElement;
}
SVGFEFuncAElement = function () {
    util_log(">>> FIXME: SVGFEFuncAElement used");
    return SVGFEFuncAElement;
}
SVGFEFuncBElement = function () {
    util_log(">>> FIXME: SVGFEFuncBElement used");
    return SVGFEFuncBElement;
}
SVGFEFuncGElement = function () {
    util_log(">>> FIXME: SVGFEFuncGElement used");
    return SVGFEFuncGElement;
}
SVGFEFuncRElement = function () {
    util_log(">>> FIXME: SVGFEFuncRElement used");
    return SVGFEFuncRElement;
}
SVGFEGaussianBlurElement = function () {
    util_log(">>> FIXME: SVGFEGaussianBlurElement used");
    return SVGFEGaussianBlurElement;
}
SVGFEImageElement = function () {
    util_log(">>> FIXME: SVGFEImageElement used");
    return SVGFEImageElement;
}
SVGFEMergeElement = function () {
    util_log(">>> FIXME: SVGFEMergeElement used");
    return SVGFEMergeElement;
}
SVGFEMergeNodeElement = function () {
    util_log(">>> FIXME: SVGFEMergeNodeElement used");
    return SVGFEMergeNodeElement;
}
SVGFEMorphologyElement = function () {
    util_log(">>> FIXME: SVGFEMorphologyElement used");
    return SVGFEMorphologyElement;
}
SVGFEOffsetElement = function () {
    util_log(">>> FIXME: SVGFEOffsetElement used");
    return SVGFEOffsetElement;
}
SVGFEPointLightElement = function () {
    util_log(">>> FIXME: SVGFEPointLightElement used");
    return SVGFEPointLightElement;
}
SVGFESpecularLightingElement = function () {
    util_log(">>> FIXME: SVGFESpecularLightingElement used");
    return SVGFESpecularLightingElement;
}
SVGFESpotLightElement = function () {
    util_log(">>> FIXME: SVGFESpotLightElement used");
    return SVGFESpotLightElement;
}
SVGFETileElement = function () {
    util_log(">>> FIXME: SVGFETileElement used");
    return SVGFETileElement;
}
SVGFETurbulenceElement = function () {
    util_log(">>> FIXME: SVGFETurbulenceElement used");
    return SVGFETurbulenceElement;
}
SVGFilterElement = function () {
    util_log(">>> FIXME: SVGFilterElement used");
    return SVGFilterElement;
}
SVGFontElement = function () {
    util_log(">>> FIXME: SVGFontElement used");
    return SVGFontElement;
}
SVGFontFaceElement = function () {
    util_log(">>> FIXME: SVGFontFaceElement used");
    return SVGFontFaceElement;
}
SVGFontFaceFormatElement = function () {
    util_log(">>> FIXME: SVGFontFaceFormatElement used");
    return SVGFontFaceFormatElement;
}
SVGFontFaceNameElement = function () {
    util_log(">>> FIXME: SVGFontFaceNameElement used");
    return SVGFontFaceNameElement;
}
SVGFontFaceSrcElement = function () {
    util_log(">>> FIXME: SVGFontFaceSrcElement used");
    return SVGFontFaceSrcElement;
}
SVGFontFaceUriElement = function () {
    util_log(">>> FIXME: SVGFontFaceUriElement used");
    return SVGFontFaceUriElement;
}
SVGForeignObjectElement = function () {
    util_log(">>> FIXME: SVGForeignObjectElement used");
    return SVGForeignObjectElement;
}
SVGGElement = function () {
    util_log(">>> FIXME: SVGGElement used");
    return SVGGElement;
}

// Defined in element.js
// SVGGeometryElement = function () { }

SVGGlyphElement = function () {
    util_log(">>> FIXME: SVGGlyphElement used");
    return SVGGlyphElement;
}
SVGGlyphRefElement = function () {
    util_log(">>> FIXME: SVGGlyphRefElement used");
    return SVGGlyphRefElement;
}
SVGGradientElement = function () {
    util_log(">>> FIXME: SVGGradientElement used");
    return SVGGradientElement;
}

// Defined in element.js
// SVGGraphicsElement = function () { }

SVGHKernElement = function () {
    util_log(">>> FIXME: SVGHKernElement used");
    return SVGHKernElement;
}
SVGImageElement = function () {
    util_log(">>> FIXME: SVGImageElement used");
    return SVGImageElement;
}
SVGLength = function () {
    util_log(">>> FIXME: SVGLength used");
    return SVGLength;
}
SVGLengthList = function () {
    util_log(">>> FIXME: SVGLengthList used");
    return SVGLengthList;
}
SVGLinearGradientElement = function () {
    util_log(">>> FIXME: SVGLinearGradientElement used");
    return SVGLinearGradientElement;
}
SVGLineElement = function () {
    util_log(">>> FIXME: SVGLineElement used");
    return SVGLineElement;
}
SVGMarkerElement = function () {
    util_log(">>> FIXME: SVGMarkerElement used");
    return SVGMarkerElement;
}
SVGMaskElement = function () {
    util_log(">>> FIXME: SVGMaskElement used");
    return SVGMaskElement;
}
SVGMetadataElement = function () {
    util_log(">>> FIXME: SVGMetadataElement used");
    return SVGMetadataElement;
}
SVGMissingGlyphElement = function () {
    util_log(">>> FIXME: SVGMissingGlyphElement used");
    return SVGMissingGlyphElement;
}
SVGMPathElement = function () {
    util_log(">>> FIXME: SVGMPathElement used");
    return SVGMPathElement;
}
SVGNumber = function () {
    util_log(">>> FIXME: SVGNumber used");
    return SVGNumber;
}
SVGNumberList = function () {
    util_log(">>> FIXME: SVGNumberList used");
    return SVGNumberList;
}
SVGPathElement = function () {
    util_log(">>> FIXME: SVGPathElement used");
    return SVGPathElement;
}
SVGPatternElement = function () {
    util_log(">>> FIXME: SVGPatternElement used");
    return SVGPatternElement;
}
SVGPoint = function () {
    util_log(">>> FIXME: SVGPoint used");
    return SVGPoint;
}
SVGPointList = function () {
    util_log(">>> FIXME: SVGPointList used");
    return SVGPointList;
}
SVGPolygonElement = function () {
    util_log(">>> FIXME: SVGPolygonElement used");
    return SVGPolygonElement;
}
SVGPolylineElement = function () {
    util_log(">>> FIXME: SVGPolylineElement used");
    return SVGPolylineElement;
}
SVGPreserveAspectRatio = function () {
    util_log(">>> FIXME: SVGPreserveAspectRatio used");
    return SVGPreserveAspectRatio;
}
SVGRadialGradientElement = function () {
    util_log(">>> FIXME: SVGRadialGradientElement used");
    return SVGRadialGradientElement;
}
SVGRect = function () {
    util_log(">>> FIXME: SVGRect used");
    return SVGRect;
}
SVGRectElement = function () {
    util_log(">>> FIXME: SVGRectElement used");
    return SVGRectElement;
}
SVGRenderingIntent = function () {
    util_log(">>> FIXME: SVGRenderingIntent used");
    return SVGRenderingIntent;
}
SVGScriptElement = function () {
    util_log(">>> FIXME: SVGScriptElement used");
    return SVGScriptElement;
}
SVGSetElement = function () {
    util_log(">>> FIXME: SVGSetElement used");
    return SVGSetElement;
}
SVGStopElement = function () {
    util_log(">>> FIXME: SVGStopElement used");
    return SVGStopElement;
}
SVGStringList = function () {
    util_log(">>> FIXME: SVGStringList used");
    return SVGStringList;
}
SVGStyleElement = function () {
    util_log(">>> FIXME: SVGStyleElement used");
    return SVGStyleElement;
}
SVGSVGElement = function () {
    util_log(">>> FIXME: SVGSVGElement used");
    return SVGSVGElement;
}
SVGSwitchElement = function () {
    util_log(">>> FIXME: SVGSwitchElement used");
    return SVGSwitchElement;
}
SVGSymbolElement = function () {
    util_log(">>> FIXME: SVGSymbolElement used");
    return SVGSymbolElement;
}
SVGTextContentElement = function () {
    util_log(">>> FIXME: SVGTextContentElement used");
    return SVGTextContentElement;
}
SVGTextElement = function () {
    util_log(">>> FIXME: SVGTextElement used");
    return SVGTextElement;
}
SVGTextPathElement = function () {
    util_log(">>> FIXME: SVGTextPathElement used");
    return SVGTextPathElement;
}
SVGTextPositioningElement = function () {
    util_log(">>> FIXME: SVGTextPositioningElement used");
    return SVGTextPositioningElement;
}
SVGTitleElement = function () {
    util_log(">>> FIXME: SVGTitleElement used");
    return SVGTitleElement;
}
SVGTransform = function () {
    util_log(">>> FIXME: SVGTransform used");
    return SVGTransform;
}
SVGTransformList = function () {
    util_log(">>> FIXME: SVGTransformList used");
    return SVGTransformList;
}
SVGTRefElement = function () {
    util_log(">>> FIXME: SVGTRefElement used");
    return SVGTRefElement;
}
SVGTSpanElement = function () {
    util_log(">>> FIXME: SVGTSpanElement used");
    return SVGTSpanElement;
}
SVGUnitTypes = function () {
    util_log(">>> FIXME: SVGUnitTypes used");
    return SVGUnitTypes;
}
SVGUseElement = function () {
    util_log(">>> FIXME: SVGUseElement used");
    return SVGUseElement;
}
SVGViewElement = function () {
    util_log(">>> FIXME: SVGViewElement used");
    return SVGViewElement;
}
SVGVKernElement = function () {
    util_log(">>> FIXME: SVGVKernElement used");
    return SVGVKernElement;
}
SyncEvent = function () {
    util_log(">>> FIXME: SyncEvent used");
    return SyncEvent;
}
SyncManager = function () {
    util_log(">>> FIXME: SyncManager used");
    return SyncManager;
}
TaskAttributionTiming = function () {
    util_log(">>> FIXME: TaskAttributionTiming used");
    return TaskAttributionTiming;
}
TaskController = function () {
    util_log(">>> FIXME: TaskController used");
    return TaskController;
}
TaskPriorityChangeEvent = function () {
    util_log(">>> FIXME: TaskPriorityChangeEvent used");
    return TaskPriorityChangeEvent;
}
TaskSignal = function () {
    util_log(">>> FIXME: TaskSignal used");
    return TaskSignal;
}

// https://developer.mozilla.org/en-US/docs/Web/API/Text
Text = function () {
    // Inheriting Element
    Element.call(this);
    util_log(">>> FIXME: Text used");
}

TextDecoder = function () {
    util_log(">>> FIXME: TextDecoder used");
    return TextDecoder;
}
TextDecoderStream = function () {
    util_log(">>> FIXME: TextDecoderStream used");
    return TextDecoderStream;
}
TextEncoder = function () {
    util_log(">>> FIXME: TextEncoder used");
    return TextEncoder;
}
TextEncoderStream = function () {
    util_log(">>> FIXME: TextEncoderStream used");
    return TextEncoderStream;
}
TextMetrics = function () {
    util_log(">>> FIXME: TextMetrics used");
    return TextMetrics;
}
TextTrack = function () {
    util_log(">>> FIXME: TextTrack used");
    return TextTrack;
}
TextTrackCue = function () {
    util_log(">>> FIXME: TextTrackCue used");
    return TextTrackCue;
}
TextTrackCueList = function () {
    util_log(">>> FIXME: TextTrackCueList used");
    return TextTrackCueList;
}
TextTrackList = function () {
    util_log(">>> FIXME: TextTrackList used");
    return TextTrackList;
}

TimeEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "TimeEvent[" + this.id + "]";

    util_log("new " + this._name);
}
TimeEvent.prototype = Object.create(Event.prototype);
TimeEvent.prototype.constructor = TimeEvent;
TimeEvent.toString = TimeEvent.toJSON = () => {
    return "TimeEvent"
}

TimeRanges = function () {
    util_log(">>> FIXME: TimeRanges used");
    return TimeRanges;
}
Touch = function () {
    util_log(">>> FIXME: Touch used");
    return Touch;
}

TouchEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "TouchEvent[" + this.id + "]";

    util_log("new " + this._name);
}
TouchEvent.prototype = Object.create(Event.prototype);
TouchEvent.prototype.constructor = TouchEvent;
TouchEvent.toString = TouchEvent.toJSON = () => {
    return "TouchEvent"
}

TouchList = function () {
    util_log(">>> FIXME: TouchList used");
    return TouchList;
}

TrackEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "TrackEvent[" + this.id + "]";

    util_log("new " + this._name);
}
TrackEvent.prototype = Object.create(Event.prototype);
TrackEvent.prototype.constructor = TrackEvent;
TrackEvent.toString = TrackEvent.toJSON = () => {
    return "TrackEvent"
}

TransformStream = function () {
    util_log(">>> FIXME: TransformStream used");
    return TransformStream;
}
TransformStreamDefaultController = function () {
    util_log(">>> FIXME: TransformStreamDefaultController used");
    return TransformStreamDefaultController;
}

TransitionEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "TransitionEvent[" + this.id + "]";

    util_log("new " + this._name);
}
TransitionEvent.prototype = Object.create(Event.prototype);
TransitionEvent.prototype.constructor = TransitionEvent;
TransitionEvent.toString = TransitionEvent.toJSON = () => {
    return "TransitionEvent"
}

TreeWalker = function () {
    util_log(">>> FIXME: TreeWalker used");
    return TreeWalker;
}
TrustedHTML = function () {
    util_log(">>> FIXME: TrustedHTML used");
    return TrustedHTML;
}
TrustedScript = function () {
    util_log(">>> FIXME: TrustedScript used");
    return TrustedScript;
}
TrustedScriptURL = function () {
    util_log(">>> FIXME: TrustedScriptURL used");
    return TrustedScriptURL;
}
TrustedTypePolicy = function () {
    util_log(">>> FIXME: TrustedTypePolicy used");
    return TrustedTypePolicy;
}
TrustedTypePolicyFactory = function () {
    util_log(">>> FIXME: TrustedTypePolicyFactory used");
    return TrustedTypePolicyFactory;
}

UIEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "UIEvent[" + this.id + "]";

    util_log("new " + this._name);
}
UIEvent.prototype = Object.create(Event.prototype);
UIEvent.prototype.constructor = UIEvent;
UIEvent.toString = UIEvent.toJSON = () => {
    return "UIEvent"
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/URL
// Since we are overriding the URL alias from node:url via URLAlias to allow us to write the
//  URL contents to disk as soon as we see it, we only need to re-implement the
// constructor
URL = function () {
    util_log("new URL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    const url = arguments[0];
    return new URLAlias(url);
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
URL.createObjectURL = function () {
    util_log("URL.createObjectURL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"))
    const object = arguments[0]
    return URLAlias.createObjectURL(object);
}

// https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
URL.revokeObjectURL = function () {
    util_log("URL.revokeObjectURL(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",") + ")"));
    const objectURL = arguments[0]
    return URLAlias.revokeObjectURL(objectURL);
}

URLPattern = function () {
    util_log(">>> FIXME: URLPattern used");
    return URLPattern;
}
URLSearchParams = function () {
    util_log(">>> FIXME: URLSearchParams used");
    return URLSearchParams;
}
USB = function () {
    util_log(">>> FIXME: USB used");
    return USB;
}
USBAlternateInterface = function () {
    util_log(">>> FIXME: USBAlternateInterface used");
    return USBAlternateInterface;
}
USBConfiguration = function () {
    util_log(">>> FIXME: USBConfiguration used");
    return USBConfiguration;
}
USBConnectionEvent = function () {
    util_log(">>> FIXME: USBConnectionEvent used");
    return USBConnectionEvent;
}
USBDevice = function () {
    util_log(">>> FIXME: USBDevice used");
    return USBDevice;
}
USBEndpoint = function () {
    util_log(">>> FIXME: USBEndpoint used");
    return USBEndpoint;
}
USBInterface = function () {
    util_log(">>> FIXME: USBInterface used");
    return USBInterface;
}
USBInTransferResult = function () {
    util_log(">>> FIXME: USBInTransferResult used");
    return USBInTransferResult;
}
USBIsochronousInTransferPacket = function () {
    util_log(">>> FIXME: USBIsochronousInTransferPacket used");
    return USBIsochronousInTransferPacket;
}
USBIsochronousInTransferResult = function () {
    util_log(">>> FIXME: USBIsochronousInTransferResult used");
    return USBIsochronousInTransferResult;
}
USBIsochronousOutTransferPacket = function () {
    util_log(">>> FIXME: USBIsochronousOutTransferPacket used");
    return USBIsochronousOutTransferPacket;
}
USBIsochronousOutTransferResult = function () {
    util_log(">>> FIXME: USBIsochronousOutTransferResult used");
    return USBIsochronousOutTransferResult;
}
USBOutTransferResult = function () {
    util_log(">>> FIXME: USBOutTransferResult used");
    return USBOutTransferResult;
}
UserActivation = function () {
    util_log(">>> FIXME: UserActivation used");
    return UserActivation;
}

UserProximityEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "UserProximityEvent[" + this.id + "]";

    util_log("new " + this._name);
}
UserProximityEvent.prototype = Object.create(Event.prototype);
UserProximityEvent.prototype.constructor = UserProximityEvent;
UserProximityEvent.toString = UserProximityEvent.toJSON = () => {
    return "UserProximityEvent"
}

ValidityState = function () {
    util_log(">>> FIXME: ValidityState used");
    return ValidityState;
}
VideoColorSpace = function () {
    util_log(">>> FIXME: VideoColorSpace used");
    return VideoColorSpace;
}
VideoDecoder = function () {
    util_log(">>> FIXME: VideoDecoder used");
    return VideoDecoder;
}
VideoEncoder = function () {
    util_log(">>> FIXME: VideoEncoder used");
    return VideoEncoder;
}
VideoFrame = function () {
    util_log(">>> FIXME: VideoFrame used");
    return VideoFrame;
}
VideoPlaybackQuality = function () {
    util_log(">>> FIXME: VideoPlaybackQuality used");
    return VideoPlaybackQuality;
}
VideoTrack = function () {
    util_log(">>> FIXME: VideoTrack used");
    return VideoTrack;
}
VideoTrackList = function () {
    util_log(">>> FIXME: VideoTrackList used");
    return VideoTrackList;
}
VirtualKeyboard = function () {
    util_log(">>> FIXME: VirtualKeyboard used");
    return VirtualKeyboard;
}
VisualViewport = function () {
    util_log(">>> FIXME: VisualViewport used");
    return VisualViewport;
}
VRDisplay = function () {
    util_log(">>> FIXME: VRDisplay used");
    return VRDisplay;
}
VRDisplayCapabilities = function () {
    util_log(">>> FIXME: VRDisplayCapabilities used");
    return VRDisplayCapabilities;
}
VRDisplayEvent = function () {
    util_log(">>> FIXME: VRDisplayEvent used");
    return VRDisplayEvent;
}
VREyeParameters = function () {
    util_log(">>> FIXME: VREyeParameters used");
    return VREyeParameters;
}
VRFieldOfView = function () {
    util_log(">>> FIXME: VRFieldOfView used");
    return VRFieldOfView;
}
VRFrameData = function () {
    util_log(">>> FIXME: VRFrameData used");
    return VRFrameData;
}
VRLayerInit = function () {
    util_log(">>> FIXME: VRLayerInit used");
    return VRLayerInit;
}
VRPose = function () {
    util_log(">>> FIXME: VRPose used");
    return VRPose;
}
VRStageParameters = function () {
    util_log(">>> FIXME: VRStageParameters used");
    return VRStageParameters;
}
VTTCue = function () {
    util_log(">>> FIXME: VTTCue used");
    return VTTCue;
}
VTTRegion = function () {
    util_log(">>> FIXME: VTTRegion used");
    return VTTRegion;
}
WakeLock = function () {
    util_log(">>> FIXME: WakeLock used");
    return WakeLock;
}
WakeLockSentinel = function () {
    util_log(">>> FIXME: WakeLockSentinel used");
    return WakeLockSentinel;
}
WaveShaperNode = function () {
    util_log(">>> FIXME: WaveShaperNode used");
    return WaveShaperNode;
}
WEBGL_color_buffer_float = function () {
    util_log(">>> FIXME: WEBGL_color_buffer_float used");
    return WEBGL_color_buffer_float;
}
WEBGL_compressed_texture_astc = function () {
    util_log(">>> FIXME: WEBGL_compressed_texture_astc used");
    return WEBGL_compressed_texture_astc;
}
WEBGL_compressed_texture_etc = function () {
    util_log(">>> FIXME: WEBGL_compressed_texture_etc used");
    return WEBGL_compressed_texture_etc;
}
WEBGL_compressed_texture_etc1 = function () {
    util_log(">>> FIXME: WEBGL_compressed_texture_etc1 used");
    return WEBGL_compressed_texture_etc1;
}
WEBGL_compressed_texture_pvrtc = function () {
    util_log(">>> FIXME: WEBGL_compressed_texture_pvrtc used");
    return WEBGL_compressed_texture_pvrtc;
}
WEBGL_compressed_texture_s3tc = function () {
    util_log(">>> FIXME: WEBGL_compressed_texture_s3tc used");
    return WEBGL_compressed_texture_s3tc;
}
WEBGL_compressed_texture_s3tc_srgb = function () {
    util_log(">>> FIXME: WEBGL_compressed_texture_s3tc_srgb used");
    return WEBGL_compressed_texture_s3tc_srgb;
}
WEBGL_debug_renderer_info = function () {
    util_log(">>> FIXME: WEBGL_debug_renderer_info used");
    return WEBGL_debug_renderer_info;
}
WEBGL_debug_shaders = function () {
    util_log(">>> FIXME: WEBGL_debug_shaders used");
    return WEBGL_debug_shaders;
}
WEBGL_depth_texture = function () {
    util_log(">>> FIXME: WEBGL_depth_texture used");
    return WEBGL_depth_texture;
}
WEBGL_draw_buffers = function () {
    util_log(">>> FIXME: WEBGL_draw_buffers used");
    return WEBGL_draw_buffers;
}
WEBGL_lose_context = function () {
    util_log(">>> FIXME: WEBGL_lose_context used");
    return WEBGL_lose_context;
}
WEBGL_multi_draw = function () {
    util_log(">>> FIXME: WEBGL_multi_draw used");
    return WEBGL_multi_draw;
}
WebGL2RenderingContext = function () {
    util_log(">>> FIXME: WebGL2RenderingContext used");
    return WebGL2RenderingContext;
}
WebGLActiveInfo = function () {
    util_log(">>> FIXME: WebGLActiveInfo used");
    return WebGLActiveInfo;
}
WebGLBuffer = function () {
    util_log(">>> FIXME: WebGLBuffer used");
    return WebGLBuffer;
}

WebGLContextEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "WebGLContextEvent[" + this.id + "]";

    util_log("new " + this._name);
}
WebGLContextEvent.prototype = Object.create(Event.prototype);
WebGLContextEvent.prototype.constructor = WebGLContextEvent;
WebGLContextEvent.toString = WebGLContextEvent.toJSON = () => {
    return "WebGLContextEvent"
}

WebGLFramebuffer = function () {
    util_log(">>> FIXME: WebGLFramebuffer used");
    return WebGLFramebuffer;
}
WebGLProgram = function () {
    util_log(">>> FIXME: WebGLProgram used");
    return WebGLProgram;
}
WebGLQuery = function () {
    util_log(">>> FIXME: WebGLQuery used");
    return WebGLQuery;
}
WebGLRenderbuffer = function () {
    util_log(">>> FIXME: WebGLRenderbuffer used");
    return WebGLRenderbuffer;
}
WebGLRenderingContext = function () {
    util_log(">>> FIXME: WebGLRenderingContext used");
    return WebGLRenderingContext;
}
WebGLSampler = function () {
    util_log(">>> FIXME: WebGLSampler used");
    return WebGLSampler;
}
WebGLShader = function () {
    util_log(">>> FIXME: WebGLShader used");
    return WebGLShader;
}
WebGLShaderPrecisionFormat = function () {
    util_log(">>> FIXME: WebGLShaderPrecisionFormat used");
    return WebGLShaderPrecisionFormat;
}
WebGLSync = function () {
    util_log(">>> FIXME: WebGLSync used");
    return WebGLSync;
}
WebGLTexture = function () {
    util_log(">>> FIXME: WebGLTexture used");
    return WebGLTexture;
}
WebGLTransformFeedback = function () {
    util_log(">>> FIXME: WebGLTransformFeedback used");
    return WebGLTransformFeedback;
}
WebGLUniformLocation = function () {
    util_log(">>> FIXME: WebGLUniformLocation used");
    return WebGLUniformLocation;
}
WebGLVertexArrayObject = function () {
    util_log(">>> FIXME: WebGLVertexArrayObject used");
    return WebGLVertexArrayObject;
}
WebSocket = function () {
    util_log(">>> FIXME: WebSocket used");
    return WebSocket;
}
WebTransport = function () {
    util_log(">>> FIXME: WebTransport used");
    return WebTransport;
}
WebTransportBidirectionalStream = function () {
    util_log(">>> FIXME: WebTransportBidirectionalStream used");
    return WebTransportBidirectionalStream;
}
WebTransportDatagramDuplexStream = function () {
    util_log(">>> FIXME: WebTransportDatagramDuplexStream used");
    return WebTransportDatagramDuplexStream;
}
WebTransportError = function () {
    util_log(">>> FIXME: WebTransportError used");
    return WebTransportError;
}

WheelEvent = function (type, options) {
    // Inheriting Event
    Event.call(this, type, options);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "WheelEvent[" + this.id + "]";

    util_log("new " + this._name);
}
WheelEvent.prototype = Object.create(Event.prototype);
WheelEvent.prototype.constructor = WheelEvent;
WheelEvent.toString = WheelEvent.toJSON = () => {
    return "WheelEvent"
}

// This is defined in window.js
// Window = function () { }

WindowClient = function () {
    util_log(">>> FIXME: WindowClient used");
    return WindowClient;
}
WindowControlsOverlay = function () {
    util_log(">>> FIXME: WindowControlsOverlay used");
    return WindowControlsOverlay;
}
WindowControlsOverlayGeometryChangeEvent = function () {
    util_log(">>> FIXME: WindowControlsOverlayGeometryChangeEvent used");
    return WindowControlsOverlayGeometryChangeEvent;
}

// https://nodejs.org/api/worker_threads.html#class-worker
// Since we are overriding the Worker alias from node:worker_threads via WorkerAlias to allow us to write the
//  Worker contents to disk as soon as we see it, we only need to re-implement the
// constructor
Worker = function () {
    const _id = _object_id++;
    var file_path = arguments[0]
    if (file_path.slice(0, 5) === "blob:") {
        // Worker expects a file path, not a Blob ID
        // Therefore write the blob content to disk
        file_name = "Blob[" + _id + "]";
        file_path = _save_files + file_name;
        const blob = resolveObjectURL(arguments[0])
        blob.arrayBuffer().then(function (result) {
            content = Buffer.from(result)
            fs.writeFile(filename = file_path, data = content, function (err) {
                if (err) return util_log(err)
            });
        });
        util_log("new Worker(" + file_name + ")")
    } else {
        util_log("new Worker(" + file_path + ")")
    }
    return new WorkerAlias(file_path)
}

WorkerGlobalScope = function () {
    util_log(">>> FIXME: WorkerGlobalScope used");
    return WorkerGlobalScope;
}
WorkerLocation = function () {
    util_log(">>> FIXME: WorkerLocation used");
    return WorkerLocation;
}
WorkerNavigator = function () {
    util_log(">>> FIXME: WorkerNavigator used");
    return WorkerNavigator;
}
Worklet = function () {
    util_log(">>> FIXME: Worklet used");
    return Worklet;
}
WritableStream = function () {
    util_log(">>> FIXME: WritableStream used");
    return WritableStream;
}
WritableStreamDefaultController = function () {
    util_log(">>> FIXME: WritableStreamDefaultController used");
    return WritableStreamDefaultController;
}
WritableStreamDefaultWriter = function () {
    util_log(">>> FIXME: WritableStreamDefaultWriter used");
    return WritableStreamDefaultWriter;
}
XMLDocument = function () {
    util_log(">>> FIXME: XMLDocument used");
    return XMLDocument;
}

// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
// Pretty much a copy of MSXML2_XMLHTTP
XMLHttpRequest = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "XMLHttpRequest[" + this.id + "]";
    util_log("new " + this._name);

    // Instance methods
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#instance_methods

    this.abort = function (message) {
        util_log(this._name + ".abort(" + message + ")");
    }
    this.getAllResponseHeaders = function (message) {
        util_log(this._name + ".getAllResponseHeaders(" + message + ")");
    }
    this.getResponseHeader = function (message) {
        util_log(this._name + ".getResponseHeader(" + message + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open
    this.open = function (method, url, async, user, password) {
        url = url.replace(/\r|\n/g, "");
        util_log(this._name + _truncateOutput((".open(" + method + "," + url + "," + async + ")")));
        b64_match = url.match(ENCODED_BASE64_REGEX);
        if (b64_match) {
            util_log(this._name + ".open() was called for a utl that was Base64-encoded value, decoding to '" + this._name + "' ...");
            _wscript_saved_files[this._name] = Buffer.from(b64_match[1], 'base64');
        }
        this.method = method;
        this.url = url;
        switch (("" + async).toLowerCase()) {
            case "false":
            case "no":
            case "0":
            case "":
            case "undefined":
            case null:
                this.async = false;
                break;
            default:
                this.async = true;
        }
        // TODO: exit if URL seen x times
        this._wscript_urls_index = _wscript_urls.length
        _wscript_urls[this._wscript_urls_index] = { "url": url, "method": method };
    }

    this.overrideMimeType = function (message) {
        util_log(this._name + ".overrideMimeType(" + message + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send
    this.send = function (body) {
        if (body == undefined) {
            util_log(this._name + ".send()");
        } else {
            util_log(this._name + ".send(" + JSON.stringify(body) + ")");
        }
        if (_download === "Yes") {
            try {
                var res = _sync_request(this.method, this.url, {
                    'headers': this._headers
                });
                //util_log("Sync_req: " + _truncateOutput(res.getBody()));
                this.status = res.statusCode || 0;
                this.readystate = 4;
                this.statustext = "OK";
                this.responsebody = res.body || "";
                this.allresponseheaders = JSON.stringify(res.headers) || "";
            } catch (err) {
                util_log(this._name + ".send() Exception: " + _truncateOutput(_inspect(err)));
                this.status = err.statusCode || 0;
                this.readystate = 4;
                this.statustext = err.toString();
                this.responsebody = err.body || "";
                this.allresponseheaders = JSON.stringify(err.headers) || "";
            }
            if (this._wscript_urls_index != null) {
                _wscript_urls[this._wscript_urls_index]["status"] = this.status;
                _wscript_urls[this._wscript_urls_index]["response_headers"] = this.allresponseheaders;
                _wscript_urls[this._wscript_urls_index]["response_body"] = _truncateOutput(this.responsebody);
                _wscript_urls[this._wscript_urls_index]["request_body"] = a;
                _wscript_urls[this._wscript_urls_index]["statustext"] = this.statustext;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
                var e = new Event("DONE");
                this.onreadystatechange(e);
            }
            return;
        } else if (_download === "No") {
            util_log(this._name + " Not sending data, if you want to interact with remote server, set --down");
            var s = 'MZ'
            for (var ii = 0; ii < 200; ii++) {
                s += 'Dummy content, use --down to download the real payload.\n';
            }
            this.responsebody = s;
            this.status = 200;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange() with dummy data");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
        } else if (_download === "Return HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                var e = _proxy(new Event("DONE"));
                this.onreadystatechange(e);
            }
        } else if (_download === "Throw HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404 & throwing exception");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                var e = new Event("DONE");
                this.onreadystatechange(e);
            }
            throw new Error("XMLHttpRequest.send intentionally throwing exception");
        } else {
            util_log(">>> FIXME: XMLHttpRequest.send _download '" + _download + "' not handled");
            throw new TypeError(">>> FIXME: XMLHttpRequest.send _download '" + _download + "' not handled");
        }
        util_log(this._name + ".send(" + JSON.stringify(body) + ") finished");
    }

    this.setRequestHeader = function (message) {
        util_log(this._name + ".setRequestHeader(" + message + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#instance_properties

    _defineSingleProperty(this, "readyState");
    _defineSingleProperty(this, "response");
    _defineSingleProperty(this, "responseText");
    _defineSingleProperty(this, "responseType");
    _defineSingleProperty(this, "responseURL");
    _defineSingleProperty(this, "responseXML");
    _defineSingleProperty(this, "status");
    _defineSingleProperty(this, "statusText");
    _defineSingleProperty(this, "timeout");
    _defineSingleProperty(this, "upload");
    _defineSingleProperty(this, "withCredentials");

    // Non-standard properties
    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#non-standard_properties

    _defineSingleProperty(this, "channel");
    _defineSingleProperty(this, "mozAnon");
    _defineSingleProperty(this, "mozSystem");
    _defineSingleProperty(this, "mozBackgroundRequest");

    // Not sure how this is used...
    let self = this;

    // Helper method
    this.toString = this.tostring = () => {
        return this._name
    }
});
XMLHttpRequest.toString = XMLHttpRequest.toJSON = () => {
    return "XMLHttpRequest"
}

XMLHttpRequestEventTarget = function () {
    util_log(">>> FIXME: XMLHttpRequestEventTarget used");
    return XMLHttpRequestEventTarget;
}
XMLSerializer = function () {
    util_log(">>> FIXME: XMLSerializer used");
    return XMLSerializer;
}
XPathEvaluator = function () {
    util_log(">>> FIXME: XPathEvaluator used");
    return XPathEvaluator;
}
XPathException = function () {
    util_log(">>> FIXME: XPathException used");
    return XPathException;
}
XPathExpression = function () {
    util_log(">>> FIXME: XPathExpression used");
    return XPathExpression;
}
XPathNSResolver = function () {
    util_log(">>> FIXME: XPathNSResolver used");
    return XPathNSResolver;
}
XPathResult = function () {
    util_log(">>> FIXME: XPathResult used");
    return XPathResult;
}
XRAnchor = function () {
    util_log(">>> FIXME: XRAnchor used");
    return XRAnchor;
}
XRAnchorSet = function () {
    util_log(">>> FIXME: XRAnchorSet used");
    return XRAnchorSet;
}
XRBoundedReferenceSpace = function () {
    util_log(">>> FIXME: XRBoundedReferenceSpace used");
    return XRBoundedReferenceSpace;
}
XRCompositionLayer = function () {
    util_log(">>> FIXME: XRCompositionLayer used");
    return XRCompositionLayer;
}
XRCPUDepthInformation = function () {
    util_log(">>> FIXME: XRCPUDepthInformation used");
    return XRCPUDepthInformation;
}
XRCubeLayer = function () {
    util_log(">>> FIXME: XRCubeLayer used");
    return XRCubeLayer;
}
XRCylinderLayer = function () {
    util_log(">>> FIXME: XRCylinderLayer used");
    return XRCylinderLayer;
}
XRDepthInformation = function () {
    util_log(">>> FIXME: XRDepthInformation used");
    return XRDepthInformation;
}
XREquirectLayer = function () {
    util_log(">>> FIXME: XREquirectLayer used");
    return XREquirectLayer;
}
XRFrame = function () {
    util_log(">>> FIXME: XRFrame used");
    return XRFrame;
}
XRHand = function () {
    util_log(">>> FIXME: XRHand used");
    return XRHand;
}
XRHitTestResult = function () {
    util_log(">>> FIXME: XRHitTestResult used");
    return XRHitTestResult;
}
XRHitTestSource = function () {
    util_log(">>> FIXME: XRHitTestSource used");
    return XRHitTestSource;
}
XRInputSource = function () {
    util_log(">>> FIXME: XRInputSource used");
    return XRInputSource;
}
XRInputSourceArray = function () {
    util_log(">>> FIXME: XRInputSourceArray used");
    return XRInputSourceArray;
}
XRInputSourceEvent = function () {
    util_log(">>> FIXME: XRInputSourceEvent used");
    return XRInputSourceEvent;
}
XRInputSourcesChangeEvent = function () {
    util_log(">>> FIXME: XRInputSourcesChangeEvent used");
    return XRInputSourcesChangeEvent;
}
XRJointPose = function () {
    util_log(">>> FIXME: XRJointPose used");
    return XRJointPose;
}
XRJointSpace = function () {
    util_log(">>> FIXME: XRJointSpace used");
    return XRJointSpace;
}
XRLayer = function () {
    util_log(">>> FIXME: XRLayer used");
    return XRLayer;
}
XRLayerEvent = function () {
    util_log(">>> FIXME: XRLayerEvent used");
    return XRLayerEvent;
}
XRLightEstimate = function () {
    util_log(">>> FIXME: XRLightEstimate used");
    return XRLightEstimate;
}
XRLightProbe = function () {
    util_log(">>> FIXME: XRLightProbe used");
    return XRLightProbe;
}
XRMediaBinding = function () {
    util_log(">>> FIXME: XRMediaBinding used");
    return XRMediaBinding;
}
XRPose = function () {
    util_log(">>> FIXME: XRPose used");
    return XRPose;
}
XRProjectionLayer = function () {
    util_log(">>> FIXME: XRProjectionLayer used");
    return XRProjectionLayer;
}
XRQuadLayer = function () {
    util_log(">>> FIXME: XRQuadLayer used");
    return XRQuadLayer;
}
XRRay = function () {
    util_log(">>> FIXME: XRRay used");
    return XRRay;
}
XRReferenceSpace = function () {
    util_log(">>> FIXME: XRReferenceSpace used");
    return XRReferenceSpace;
}
XRReferenceSpaceEvent = function () {
    util_log(">>> FIXME: XRReferenceSpaceEvent used");
    return XRReferenceSpaceEvent;
}
XRRenderState = function () {
    util_log(">>> FIXME: XRRenderState used");
    return XRRenderState;
}
XRRigidTransform = function () {
    util_log(">>> FIXME: XRRigidTransform used");
    return XRRigidTransform;
}
XRSession = function () {
    util_log(">>> FIXME: XRSession used");
    return XRSession;
}
XRSessionEvent = function () {
    util_log(">>> FIXME: XRSessionEvent used");
    return XRSessionEvent;
}
XRSpace = function () {
    util_log(">>> FIXME: XRSpace used");
    return XRSpace;
}
XRSubImage = function () {
    util_log(">>> FIXME: XRSubImage used");
    return XRSubImage;
}
XRSystem = function () {
    util_log(">>> FIXME: XRSystem used");
    return XRSystem;
}
XRTransientInputHitTestResult = function () {
    util_log(">>> FIXME: XRTransientInputHitTestResult used");
    return XRTransientInputHitTestResult;
}
XRTransientInputHitTestSource = function () {
    util_log(">>> FIXME: XRTransientInputHitTestSource used");
    return XRTransientInputHitTestSource;
}
XRView = function () {
    util_log(">>> FIXME: XRView used");
    return XRView;
}
XRViewerPose = function () {
    util_log(">>> FIXME: XRViewerPose used");
    return XRViewerPose;
}
XRViewport = function () {
    util_log(">>> FIXME: XRViewport used");
    return XRViewport;
}
XRWebGLBinding = function () {
    util_log(">>> FIXME: XRWebGLBinding used");
    return XRWebGLBinding;
}
XRWebGLDepthInformation = function () {
    util_log(">>> FIXME: XRWebGLDepthInformation used");
    return XRWebGLDepthInformation;
}
XRWebGLLayer = function () {
    util_log(">>> FIXME: XRWebGLLayer used");
    return XRWebGLLayer;
}
XRWebGLSubImage = function () {
    util_log(">>> FIXME: XRWebGLSubImage used");
    return XRWebGLSubImage;
}
XSLTProcessor = function () {
    util_log(">>> FIXME: XSLTProcessor used");
    return XSLTProcessor;
}
