/*
    window.js contains the Window object
    https://developer.mozilla.org/en-US/docs/Web/API/Window
*/

util_log("Preparing sandbox to emulate Window interface.");


// https://developer.mozilla.org/en-US/docs/Web/API/Window
Window = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "window[" + this.id + "]";

    // Useful private properties
    this._location = Location;
    this._events = [];
    this._props = undefined;

    // Instance methods first, then properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Window#instance_methods

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/alert
    this.alert = function (message) {
        util_log(this._name + ".alert(" + message + ")");
    }

    this.back = function () {
        util_log(this._name + ".back(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.blur = function () {
        util_log(this._name + ".blur(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.cancelAnimationFrame = function () {
        util_log(this._name + ".cancelAnimationFrame(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.cancelIdleCallback = function () {
        util_log(this._name + ".cancelIdleCallback(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.captureEvents = function () {
        util_log(this._name + ".captureEvents(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.clearImmediate = function () {
        util_log(this._name + ".clearImmediate(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.close = function () {
        util_log(this._name + ".close(" + Array.prototype.slice.call(arguments, 0).join(",") + ")")
    }
    this.confirm = function () {
        util_log(this._name + ".confirm(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.convertPointFromNodeToPage = function () {
        util_log(this._name + ".convertPointFromNodeToPage(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.convertPointFromPageToNode = function () {
        util_log(this._name + ".convertPointFromPageToNode(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.dump = function () {
        util_log(this._name + ".dump(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.find = function () {
        util_log(this._name + ".find(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.focus = function () {
        util_log(this._name + ".focus(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.forward = function () {
        util_log(this._name + ".forward(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getComputedStyle = function () {
        util_log(this._name + ".getComputedStyle(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getDefaultComputedStyle = function () {
        util_log(this._name + ".getDefaultComputedStyle(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.getSelection = function () {
        util_log(this._name + ".getSelection(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.matchMedia = function () {
        util_log(this._name + ".matchMedia(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.moveBy = function () {
        util_log(this._name + ".moveBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.moveTo = function () {
        util_log(this._name + ".moveTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.open = function () {
        util_log(this._name + ".open(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
    this.postMessage = function () {
        const message = arguments[0];
        const targetOrigin = arguments[1];
        util_log(this._name + ".postMessage(" + _truncateOutput(message) + ", " + targetOrigin + ")");

        // First, let's see if we have a message event already
        let e;
        for (e of this.document._events) {
            if (e.type === "message") {
                util_log("Setting the data of Event[" + e._id + "]")
                e.data = message;
                break;
            }
        }

        // Next, check if an event listener is set for "message"
        if (e && "message" in this.document._event_listeners) {
            this.document._event_listeners["message"](e);
        }
    }

    this.print = function () {
        util_log(this._name + ".print(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.prompt = function () {
        util_log(this._name + ".prompt(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.queryLocalFonts = function () {
        util_log(this._name + ".queryLocalFonts(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.releaseEvents = function () {
        util_log(this._name + ".releaseEvents(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestAnimationFrame = function () {
        util_log(this._name + ".requestAnimationFrame(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestFileSystem = function () {
        util_log(this._name + ".requestFileSystem(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.requestIdleCallback = function () {
        util_log(this._name + ".requestIdleCallback(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.resizeBy = function () {
        util_log(this._name + ".resizeBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.resizeTo = function () {
        util_log(this._name + ".resizeTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scroll = function () {
        util_log(this._name + ".scroll(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollBy = function () {
        util_log(this._name + ".scrollBy(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollByLines = function () {
        util_log(this._name + ".scrollByLines(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollByPages = function () {
        util_log(this._name + ".scrollByPages(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.scrollTo = function () {
        util_log(this._name + ".scrollTo(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.setImmediate = function () {
        util_log(this._name + ".setImmediate(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showDirectoryPicker = function () {
        util_log(this._name + ".showDirectoryPicker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showModalDialog = function () {
        util_log(this._name + ".showModalDialog(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showOpenFilePicker = function () {
        util_log(this._name + ".showOpenFilePicker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.showSaveFilePicker = function () {
        util_log(this._name + ".showSaveFilePicker(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.sizeToContent = function () {
        util_log(this._name + ".sizeToContent(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.stop = function () {
        util_log(this._name + ".stop(" + Array.prototype.slice.call(arguments, 0).join(",") + ")")
    }
    this.updateCommands = function () {
        util_log(this._name + ".updateCommands(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Instance properties
    // https://developer.mozilla.org/en-US/docs/Web/API/Window#instance_properties

    _defineSingleProperty(this, "applicationCache");
    _defineSingleProperty(this, "closed");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/console
    this.console = function () { }

    _defineSingleProperty(this, "content");
    _defineSingleProperty(this, "credentialless");
    _defineSingleProperty(this, "customElements");
    _defineSingleProperty(this, "defaultStatus");
    _defineSingleProperty(this, "devicePixelRatio");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/document
    // This is assigned after the Document object instance is created
    // _defineSingleProperty(this, "document");
    this.document = undefined;

    _defineSingleProperty(this, "event");
    _defineSingleProperty(this, "external");
    _defineSingleProperty(this, "frameElement");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/frames
    this.frames = function () {
        this.odbFrame = "";
    }

    _defineSingleProperty(this, "fullScreen");

    // Defined in history.js
    // _defineSingleProperty(this, "history");
    this.history = _proxy(new History());

    _defineSingleProperty(this, "innerHeight");
    _defineSingleProperty(this, "innerWidth");
    _defineSingleProperty(this, "launchQueue");
    _defineSingleProperty(this, "length");
    _defineSingleProperty(this, "localStorage");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/location
    Object.defineProperty(this, "location", {
        get: function () {
            util_log("window.location.get()");
            return this._location;
        },
        set: function (n) {
            util_log("window.location.set(" + n + ")");
            this._location.href = n;
        }
    })

    _defineSingleProperty(this, "locationbar");
    _defineSingleProperty(this, "menubar");
    _defineSingleProperty(this, "mozInnerScreenX");
    _defineSingleProperty(this, "mozInnerScreenY");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/name
    // We cannot define this because it is already assigned as a private field for MalwareJail's usage
    // _defineSingleProperty(this, "name");
    this.name = this._name;

    _defineSingleProperty(this, "navigation");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator
    this.navigator = this;

    _defineSingleProperty(this, "ondragdrop");
    _defineSingleProperty(this, "opener");
    _defineSingleProperty(this, "orientation");
    _defineSingleProperty(this, "outerHeight");
    _defineSingleProperty(this, "outerWidth");
    _defineSingleProperty(this, "pageXOffset");
    _defineSingleProperty(this, "pageYOffset");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/parent
    this.parent = this;

    _defineSingleProperty(this, "personalbar");
    _defineSingleProperty(this, "scheduler");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/screen
    this.screen = Screen;

    _defineSingleProperty(this, "screenLeft");
    _defineSingleProperty(this, "screenTop");
    _defineSingleProperty(this, "screenX");
    _defineSingleProperty(this, "screenY");
    _defineSingleProperty(this, "scrollbars");
    _defineSingleProperty(this, "scrollMaxX");
    _defineSingleProperty(this, "scrollMaxY");
    _defineSingleProperty(this, "scrollX");
    _defineSingleProperty(this, "scrollY");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/self
    this.self = function () {
        this.location = function () {
            util_log("get location" + arguments)
        }
    }

    _defineSingleProperty(this, "sessionStorage");
    _defineSingleProperty(this, "sidebar");
    _defineSingleProperty(this, "speechSynthesis");
    _defineSingleProperty(this, "status");
    _defineSingleProperty(this, "statusbar");
    _defineSingleProperty(this, "toolbar");
    _defineSingleProperty(this, "top");
    _defineSingleProperty(this, "visualViewport");

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/window
    this.window = this;

    // Globals
    // https://developer.mozilla.org/en-US/docs/Web/API#interfaces

    // https://developer.mozilla.org/en-US/docs/Web/API/atob
    this.atob = atob;

    // https://developer.mozilla.org/en-US/docs/Web/API/btoa
    this.btoa = btoa;

    this.clearInterval = clearInterval;
    this.clearTimeout = clearTimeout;
    this.createImageBitmap = createImageBitmap;
    this.crypto = crypto;
    this.CryptoJS = CryptoJS;
    this.fetch = fetch;
    this.performance = performance;
    this.queueMicrotask = queueMicrotask;
    this.reportError = reportError;
    this.setInterval = setInterval;
    this.setTimeout = setTimeout;
    this.structuredClone = structuredClone;

    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    this.addEventListener = function (type, listener) {
        this.document.addEventListener(type, listener);
    }

    this.XMLHttpRequest = XMLHttpRequest;

    // Overriding these methods from third-party libs

    // https://www.skypack.dev/view/set-timeout-sync
    this.settimeoutsync = function () {
        util_log(this._name + ".setTimeoutSync(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        _setTimeout_calls[_setTimeout_calls.length] = arguments[0].toString();
        return arguments[0].apply(this, Array.prototype.slice.call(arguments, 1));
    }

    // https://support.spinetix.com/wiki/JSignage_utilities_methods#jSignage.setIntervalSync.28.29
    this.setintervalsync = function () {
        util_log(this._name + ".setIntervalSync(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        _setInterval_calls[_setInterval_calls.length] = arguments[0].toString();
        return arguments[0].apply(this, Array.prototype.slice.call(arguments, 1));
    }

    // Not sure where this is from...
    this.clearintervalsync = function () {
        util_log(this._name + ".clearIntervalSync(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }

    // Events
    // https://developer.mozilla.org/en-US/docs/Web/API/Window#events

    this.onafterprint = function (listener) {
        this.addEventListener("afterprint", listener);
    }
    this.onappinstalled = function (listener) {
        this.addEventListener("appinstalled", listener);
    }
    this.onbeforeinstallprompt = function (listener) {
        this.addEventListener("beforeinstallprompt", listener);
    }
    this.onbeforeprint = function (listener) {
        this.addEventListener("beforeprint", listener);
    }
    this.onbeforeunload = function (listener) {
        this.addEventListener("beforeunload", listener);
    }
    this.onblur = function (listener) {
        this.addEventListener("blur", listener);
    }
    this.oncopy = function (listener) {
        this.addEventListener("copy", listener);
    }
    this.oncut = function (listener) {
        this.addEventListener("cut", listener);
    }
    this.ondevicemotion = function (listener) {
        this.addEventListener("devicemotion", listener);
    }
    this.ondeviceorientation = function (listener) {
        this.addEventListener("deviceorientation", listener);
    }
    this.ondeviceorientationabsolute = function (listener) {
        this.addEventListener("deviceorientationabsolute", listener);
    }
    this.onDOMContentLoaded = function (listener) {
        this.addEventListener("DOMContentLoaded", listener);
    }
    this.onerror = function (listener) {
        this.addEventListener("error", listener);
    }
    this.onfocus = function (listener) {
        this.addEventListener("focus", listener);
    }
    this.ongamepadconnected = function (listener) {
        this.addEventListener("gamepadconnected", listener);
    }
    this.ongamepaddisconnected = function (listener) {
        this.addEventListener("gamepaddisconnected", listener);
    }
    this.onhashchange = function (listener) {
        this.addEventListener("hashchange", listener);
    }
    this.onlanguagechange = function (listener) {
        this.addEventListener("languagechange", listener);
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
    Object.defineProperty(this, "onload", {
        set: function (listener) {
            util_log(this._name + ".onload = " + _truncateOutput(listener));
            this.addEventListener("load", listener);
        },
        get: function (listener) {
            this.addEventListener("load", listener);
        }
    });

    this.onmessage = function (listener) {
        this.addEventListener("message", listener);
    }
    this.onmessageerror = function (listener) {
        this.addEventListener("messageerror", listener);
    }
    this.onoffline = function (listener) {
        this.addEventListener("offline", listener);
    }
    this.ononline = function (listener) {
        this.addEventListener("online", listener);
    }
    this.onorientationchange = function (listener) {
        this.addEventListener("orientationchange", listener);
    }
    this.onpagehide = function (listener) {
        this.addEventListener("pagehide", listener);
    }
    this.onpageshow = function (listener) {
        this.addEventListener("pageshow", listener);
    }
    this.onpaste = function (listener) {
        this.addEventListener("paste", listener);
    }
    this.onpopstate = function (listener) {
        this.addEventListener("popstate", listener);
    }
    this.onrejectionhandled = function (listener) {
        this.addEventListener("rejectionhandled", listener);
    }
    this.onresize = function (listener) {
        this.addEventListener("resize", listener);
    }
    this.onstorage = function (listener) {
        this.addEventListener("storage", listener);
    }
    this.onunhandledrejection = function (listener) {
        this.addEventListener("unhandledrejection", listener);
    }
    this.onunload = function (listener) {
        this.addEventListener("unload", listener);
    }
    this.onvrdisplayactivate = function (listener) {
        this.addEventListener("vrdisplayactivate", listener);
    }
    this.onvrdisplayconnect = function (listener) {
        this.addEventListener("vrdisplayconnect", listener);
    }
    this.onvrdisplaydeactivate = function (listener) {
        this.addEventListener("vrdisplaydeactivate", listener);
    }
    this.onvrdisplaydisconnect = function (listener) {
        this.addEventListener("vrdisplaydisconnect", listener);
    }
    this.onvrdisplaypresentchange = function (listener) {
        this.addEventListener("vrdisplaypresentchange", listener);
    }


    // This section of properties & methods are not documented
    //  in https://developer.mozilla.org/en-US/docs/Web/API/Document but have been seen in the wild

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event
    Object.defineProperty(this, "online", {
        get: function () {
            util_log(this._name + ".online() or .onLine() => true");
            return true;
        },
        set: function (fn) {
            if (fn.constructor.name === "Function") {
                var function_name = undefined;
                if (fn.prototype && fn.prototype.name) {
                    function_name = fn.prototype.name;
                } else if (fn.name) {
                    function_name = fn.name;
                }
                if (function_name === undefined) {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#the_function_expression
                    function_name = "anonymous";
                }
                util_log(this._name + ".online(" + function_name + ")")

                for (ev of this._events) {
                    if (ev.type === "online") {
                        e = ev;
                    }
                }

                if (e === null) {
                    e = _proxy(new Event("online"));
                    this._events.push(e);
                }
                util_log("Running function " + function_name + "(" + e + ")");
                try {
                    fn(e);
                } catch (err) {
                    util_log("Could not execute function due to: '" + err.message + "'");
                }
            }
            else {
                util_log("That's weird, a non-function was passed to window.online...")
            }
        }
    });

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
    this.load = function (fn) {
        this.onload = fn;
    }

    this.jstiming = function () { }
    this.jstiming.load = function () { }
    this.jstiming.load.tick = function () { }
    this.gapi = function () {
        this.load = function () { };
    }
    this.gapi_onload = function () { }
    this.__GOOGLEAPIS = function () { }
    this.___gu = function () { }
    this.___jsl = function () { }
    this.___gcfg = function () { }
    this.ga = function () { }
    this.ip = "127.0.0.1";

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator#instance_properties

    _defineSingleProperty(this, "activeVRDisplays");
    _defineSingleProperty(this, "appCodeName");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/appName
    // _defineSingleProperty(this, "appName");
    this.appName = "Microsoft";

    // This is set in agents.js
    // _defineSingleProperty(this, "appVersion");
    this.appVersion = undefined;

    _defineSingleProperty(this, "buildID");
    _defineSingleProperty(this, "clipboard");
    _defineSingleProperty(this, "connection");
    _defineSingleProperty(this, "contacts");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled
    // _defineSingleProperty(this, "cookieEnabled");
    this.cookieEnabled = true;

    _defineSingleProperty(this, "credentials");
    _defineSingleProperty(this, "deviceMemory");
    _defineSingleProperty(this, "doNotTrack");
    _defineSingleProperty(this, "geolocation");
    _defineSingleProperty(this, "globalPrivacyControl");
    _defineSingleProperty(this, "hardwareConcurrency");
    _defineSingleProperty(this, "hid");
    _defineSingleProperty(this, "ink");
    _defineSingleProperty(this, "keyboard");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language
    _defineSingleProperty(this, "language");
    this.language = "en-CA"

    _defineSingleProperty(this, "languages");
    _defineSingleProperty(this, "locks");
    _defineSingleProperty(this, "maxTouchPoints");
    _defineSingleProperty(this, "mediaCapabilities");
    _defineSingleProperty(this, "mediaDevices");
    _defineSingleProperty(this, "mediaSession");
    _defineSingleProperty(this, "mimeTypes");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine
    // Cannot override the window.online property
    // _defineSingleProperty(this, "onLine");

    _defineSingleProperty(this, "oscpu");
    _defineSingleProperty(this, "pdfViewerEnabled");
    _defineSingleProperty(this, "permissions");

    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform
    // _defineSingleProperty(this, "platform");
    this.platform = "Windows";

    _defineSingleProperty(this, "plugins");
    _defineSingleProperty(this, "presentation");
    _defineSingleProperty(this, "product");
    _defineSingleProperty(this, "productSub");
    _defineSingleProperty(this, "serial");
    _defineSingleProperty(this, "serviceWorker");
    _defineSingleProperty(this, "storage");
    _defineSingleProperty(this, "userActivation");

    // This is set in agents.js
    // _defineSingleProperty(this, "userAgent");

    _defineSingleProperty(this, "userAgentData");

    // This is set in agents.js
    // _defineSingleProperty(this, "vendor");

    _defineSingleProperty(this, "vendorSub");
    _defineSingleProperty(this, "virtualKeyboard");
    _defineSingleProperty(this, "wakeLock");
    _defineSingleProperty(this, "webdriver");
    _defineSingleProperty(this, "windowControlsOverlay");
    _defineSingleProperty(this, "xr");

    // Internet Explorer-specific methods
    // https://learn.microsoft.com/en-us/previous-versions/hh772332(v=vs.85)
    this.msSaveOrOpenBlob = async function (content, filename) {
        util_log("msSaveOrOpenBlob(" + content + ", " + filename + ")")
        if (content.constructor.name == "Blob") {
            content = Buffer.from(await content.arrayBuffer())
        }
        _wscript_saved_files[filename] = content;
    }

    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/dn423948(v=vs.85)?redirectedfrom=MSDN
    this.ActiveXObject = ActiveXObject;

    // jQuery specific

    this.success = true;

    this.removeChild = function (e) {
        util_log(this._name + ".removeChild(" + e._name + ")");
        return e;
    }

    // Helper method
    this.toString = this.toJSON = () => { return "Window" }
});

Window.toString = Window.toJSON = () => { return "Window" }

// _browser_api is defined in jailme.js
for (let k in _browser_api) {
    if (_browser_api.hasOwnProperty(k))
        if (typeof _browser_api[k] !== 'undefined') {
            Window[k] = _browser_api[k];
        }
}

// Instantiate the Window object
window = new Window();

// Defining these properties after Window has been created
window.Element = Element;
window.HTMLElement = HTMLElement;
window.Node = Node;
window.eval = eval;
window.URL = URL;

// Defining these globals after Window has been created
setTimeout = window.setTimeout.bind(window);
setInterval = window.setInterval.bind(window);
clearInterval = window.clearInterval.bind(window);
clearTimeout = window.clearInterval.bind(window);
addEventListener = window.addEventListener;
alert = window.alert;
gapi = window.gapi;
history = window.history;
navigator = window;
parent = window.parent;
print = window.print;
parentNode = window.parent;
