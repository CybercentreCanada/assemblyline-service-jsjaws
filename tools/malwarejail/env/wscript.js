/*
    wscript.js - simulates WScript (Windows scripting host) environment
*/

// Imports

// https://nodejs.org/api/buffer.html#bufferresolveobjecturlid
const { resolveObjectURL } = require('node:buffer');

// https://nodejs.org/api/path.html#pathwin32
const { win32 } = require('path');

// https://cryptojs.gitbook.io/docs/
const CryptoJS = require("crypto-js");
const { abort } = require('node:process');

util_log("Preparing sandbox to emulate WScript environment.");

// Globals used for MalwareJail
_wscript_saved_files = {};
_wscript_urls = [];
_wscript_wmis = [];
_wscript_objects = [];

// Useful objects

// This object is used for representing a file system for VBA objects such
// as TextStream, FolderObject and FileSystemObject
const FS = {
    "C:": {
        "PROGRAMDATA": {},
        "PROGRAM FILES": { "COMMON FILES": {} },
        "PROGRAM FILES (X86)": { "COMMON FILES": {} },
        "USERS": {
            "USER": {
                "APPDATA": {
                    "LOCAL": { "TEMP": {} },
                    "ROAMING": {},
                    "LOCALLOW": {}
                },
                "DESKTOP": {}
            },
            "DEFAULT": {
                "APPDATA": {
                    "LOCAL": { "TEMP": {} },
                    "ROAMING": {},
                    "LOCALLOW": {}
                },
                "DESKTOP": {}
            },
            "PUBLIC": {
                "APPDATA": {
                    "LOCAL": { "TEMP": {} },
                    "ROAMING": {},
                    "LOCALLOW": {}
                },
                "DESKTOP": {}
            }
        },
        "WINDOWS": {
            "SYSTEM32": {
                "DRIVERS": {
                    "ETC": { "SERVICES": "FILE CONTENT" }
                }
            }
        }
    },
};

// https://learn.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)
// This object is used for representing the environment variables of a
// Windows operating system and is accessed by multiple VBA objects.
// This object is also used for defining WshEnvironment properties.
var ENV = {
    "ALLUSERSPROFILE": "C:\\ProgramData",
    "APPDATA": "C:\\Users\\User\\AppData\\Roaming",
    "COMMONPROGRAMFILES": "C:\\Program Files\\Common Files",
    "COMMONPROGRAMFILES(X86)": "C:\\Program Files (x86)\\Common Files",
    "COMMONPROGRAMW6432": "C:\\Program Files\\Common Files",
    "COMPUTERNAME": "COMPUTER",
    "COMPLUS_VERSION": "v4.0.30319",
    "COMSPEC": "C:\\WINDOWS\\system32\\cmd.exe",
    "CWD": "C:\\Users\\User",
    "FPS_BROWSER_APP_PROFILE_STRING": "Internet Explorer",
    "FPS_BROWSER_USER_PROFILE_STRING": "Default",
    "FP_NO_HOST_CHECK": "NO",
    "HOMEDRIVE": "C:",
    "HOMEPATH": "\\Users\\User",
    "LANG": "EN",
    "LOCALAPPDATA": "C:\\Users\\User\\AppData\\Local",
    "LOGONSERVER": "\\\\COMPUTER",
    "NUMBER_OF_PROCESSORS": "4",
    "OS": "Windows_NT",
    "PATH": "C:\\Users\\User\\AppData\\Roaming\\npm;C:\\Program Files\\nodejs\\;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Lenovo\\Fingerprint Manager Pro\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\dotnet\\;C:\\Tcl\\bin;C:\\Program Files (x86)\\Nmap;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\User\\AppData\\Roaming\\npm;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Lenovo\\Fingerprint Manager Pro\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\dotnet\\;C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps;",
    "PATHEXT": ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC",
    "PROCESSOR_ARCHITECTURE": "AMD64",
    "PROCESSOR_IDENTIFIER": "Intel64 Family 6 Model 61 Stepping 4, GenuineIntel",
    "PROCESSOR_LEVEL": "6",
    "PROCESSOR_REVISION": "3d04",
    "PROGRAMDATA": "C:\\ProgramData",
    "PROGRAMFILES": "C:\\Program Files",
    "PROGRAMFILES(X86)": "C:\\Program Files (x86)",
    "PROGRAMW6432": "C:\\Program Files",
    "PROMPT": "$P$G",
    "PSMODULEPATH": "C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\;C:\\Program Files\\WindowsPowerShell\\Modules\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\ResourceManager\\AzureResourceManager\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\ServiceManagement\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\Storage\\",
    "PUBLIC": "C:\\Users\\Public",
    "SESSIONNAME": "Console",
    "SYSTEMDRIVE": "C:",
    "SYSTEMROOT": "C:\\WINDOWS",
    "TEMP": "C:\\Users\\User\\AppData\\Local\\Temp",
    "TMP": "C:\\Users\\User\\AppData\\Local\\Temp",
    "USERDOMAIN": "COMPUTER",
    "USERDOMAIN_ROAMINGPROFILE": "COMPUTER",
    "USERNAME": "User",
    "USERPROFILE": "C:\\Users\\User",
    "WINDIR": "C:\\WINDOWS",
    "SYSTEMDIRECTORY": "C:\\WINDOWS\\System32",
    "SYSTEMDRIVE": "C:\\",
    "SYSTEMROOT": "C:\\WinNT",
};

// Registry Key helper objects and methods

// This object is used as a map to mock standard (and some not so standard) registry keys
// The following root key paths are mapped to acronyms for normalized access
// HKEY_CURRENT_USER or HKCU
// HKEY_USERS
// HKEY_LOCAL_MACHINE or HKLM
// HKEY_CLASSES_ROOT  or HKCR
// HKEY_CURRENT_CONFIG
var REG = {
    "HKLM\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\PRODUCTID": "00330-80000-00000-AA676",
    "HKLM\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\SYSTEMROOT": "c:\\WINDOWS",
    /* Windows 10 64bit */
    "HKLM\\SOFTWARE\\CLASSES\\MIME\\DATABASE\\RFC1766\\1034": "en-us;@%SystemRoot%\system32\mlang.dll,-4386",
    "HKLM\\SOFTWARE\\CLASSES\\MIME\\DATABASE\\RFC1766\\0409": "en-us;@%SystemRoot%\system32\mlang.dll,-4386",
    //"HKEY_CLASSES_ROOT\\HTTP\\SHELL\\OPEN\\COMMAND" : "\"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\" -osint -url \"%1\"",
    "HKCR\\HTTP\\SHELL\\OPEN\\COMMAND": "\"C:\\Chrome\\chrome.exe\" -url \"%1\"",
    "eee": "",
    "HKLM\\SOFTWARE\\SCRIPTNAME": "ScriptName.js",
    "HKCU\\SOFTWARE\\XEONITOX\\MP3CONV\\CFG": "",
}

// https://learn.microsoft.com/en-us/previous-versions/windows/desktop/regprov/setdwordvalue-method-in-class-stdregprov
REGDEFKEY_MAP = {
    2147483648: "HKEY_CLASSES_ROOT",
    2147483649: "HKEY_CURRENT_USER",
    2147483650: "HKEY_LOCAL_MACHINE",
    2147483651: "HKEY_USERS",
    2147483653: "HKEY_CURRENT_CONFIG"
}

// This method replaces root key paths with their acronyms, if they exist
_reg_normalize = function (r) {
    var ret;
    ret = r.replace(/\\+/g, '\\').toUpperCase();
    ret = ret.replace('HKEY_CURRENT_USER', 'HKCU');
    ret = ret.replace('HKEY_LOCAL_MACHINE', 'HKLM');
    ret = ret.replace('HKEY_CLASSES_ROOT', 'HKCR');
    return ret;
}

// If there is an Error number, we want to log it
Object.defineProperty(Error.prototype, "number", {
    get: function () {
        ret = parseInt(this.message);
        util_log("Error.number => " + ret);
        return ret;
    }
});

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date

// Set to original value, passed in via jailme.js
Date = _date;

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear
Date.prototype._getYear = Date.prototype.getYear;
Date.prototype.getYear = function () {
    // https://msdn.microsoft.com/cs-cz/library/b9x8b9k7(v=vs.100).aspx
    // Approximate solution
    var r = this._getYear() + 1900;
    util_log("'" + this + "'.getYear() => " + r);
    return r;
}

// Visual Basic for Applications (VBA) Objects

// https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/dn423948(v=vs.85)?redirectedfrom=MSDN
ActiveXObject = _proxy(function (a) {
    util_log("ActiveXObject(" + a + ")");
    return create_object(a);
});
ActiveXObject.toString = ActiveXObject.toJSON = () => {
    return "ActiveXObject"
}

// https://learn.microsoft.com/en-us/office/vba/language/glossary/vbe-glossary#automation-object
AutomationObject = _proxy(function (a, b) {
    this.id = _object_id++;
    this._name = "AutomationObject[" + this.id + "](" + a + ", " + b + ")";
    this.UserName = "buddy";
    util_log("new " + this._name);
    this.execquery = function () {
        var ret = "Unknown";
        var a = Array.prototype.slice.call(arguments, 0).join(",");
        qry = arguments[0].toUpperCase();
        if (qry === "SELECT * FROM WIN32_OPERATINGSYSTEM") {
            ret = [{
                "BootDevice": "\\Device\\HarddiskVolume1",
                "BuildNumber": "14393",
                "BuildType": "Multiprocessor Free",
                "Caption": "Microsoft Windows 10 Pro",
                "CodeSet": "1250",
                "CountryCode": "420",
                "CreationClassName": "Win32_OperatingSystem",
                "CSCreationClassName": "Win32_ComputerSystem",
                "CSDVersion": "null",
                "CSName": "CARBON",
                "CurrentTimeZone": "60",
                "DataExecutionPrevention_32BitApplications": "true",
                "DataExecutionPrevention_Available": "true",
                "DataExecutionPrevention_Drivers": "true",
                "DataExecutionPrevention_SupportPolicy": "2",
                "Debug": "false",
                "Description": "Carbon",
                "Distributed": "false",
                "EncryptionLevel": "256",
                "ForegroundApplicationBoost": "2",
                "FreePhysicalMemory": "4095708",
                "FreeSpaceInPagingFiles": "1192496",
                "FreeVirtualMemory": "4011584",
                "InstallDate": "9/4/2016 03:00:28",
                "LargeSystemCache": "null",
                "LastBootUpTime": "10/30/2016 00:06:03",
                "LocalDateTime": "11/1/2016 00:30:15",
                "Locale": "0405",
                "Manufacturer": "Microsoft Corporation",
                "MaxNumberOfProcesses": "-1",
                "MaxProcessMemorySize": "137438953344",
                "Name": "Microsoft Windows 10 Pro|C:\\WINDOWS|\\Device\\Harddisk0\\Partition2",
                "NumberOfLicensedUsers": "null",
                "NumberOfProcesses": "153",
                "NumberOfUsers": "2",
                "Organization": "",
                "OSLanguage": "0409",
                /* "1033", */
                "OSProductSuite": "256",
                "OSType": "18",
                "OtherTypeDescription": "null",
                "PlusProductID": "null",
                "PlusVersionNumber": "null",
                "Primary": "true",
                "ProductType": "1",
                "QuantumLength": "undefined",
                "QuantumType": "undefined",
                "RegisteredUser": "Uzivatel",
                "SerialNumber": "00330-80000-00000-AA676",
                "ServicePackMajorVersion": "0",
                "ServicePackMinorVersion": "0",
                "SizeStoredInPagingFiles": "1245184",
                "Status": "OK",
                "SuiteMask": "272",
                "SystemDevice": "\\Device\\HarddiskVolume2",
                "SystemDirectory": "C:\\WINDOWS\\system32",
                "SystemDrive": "C:",
                "TotalSwapSpaceSize": "null",
                "TotalVirtualMemorySize": "9306340",
                "TotalVisibleMemorySize": "8061156",
                "Version": "10.0.14393",
                "WindowsDirectory": "C:\\WINDOWS"
            }];
        }
        else if (qry.indexOf("SELECT * FROM WIN32_PROCESS") >= 0) {
            //FIXME: parse query to get the process name
            ret = new Collection([new Win32_Process("app.exe")]);
        }
        else if (qry === "SELECT * FROM WIN32_LOGICALDISK") {
            ret = [{
                "Access": "0",
                "Availability": "",
                "BlockSize": "",
                "Caption": "C:",
                "Compressed": "FALSE",
                "ConfigManagerErrorCode": "",
                "ConfigManagerUserConfig": "",
                "CreationClassName": "Win32_LogicalDisk",
                "Description": "Local Fixed Disk",
                "DeviceID": "C:",
                "DriveType": "3",
                "ErrorCleared": "",
                "ErrorDescription": "",
                "ErrorMethodology": "",
                "FileSystem": "NTFS",
                "FreeSpace": "611749265408",
                "InstallDate": "",
                "LastErrorCode": "",
                "MaximumComponentLength": "255",
                "MediaType": "12",
                "Name": "C:",
                "NumberOfBlocks": "",
                "PNPDeviceID": "",
                "PowerManagementCapabilities": "",
                "PowerManagementSupported": "",
                "ProviderName": "",
                "Purpose": "",
                "QuotasDisabled": "",
                "QuotasIncomplete": "",
                "QuotasRebuilding": "",
                "Size": "1013309239296",
                "Status": "",
                "StatusInfo": "",
                "SupportsDiskQuotas": "FALSE",
                "SupportsFileBasedCompression": "TRUE",
                "SystemCreationClassName": "Win32_ComputerSystem",
                "SystemName": "BLAH-BLAH8l44",
                "VolumeDirty": "",
                "VolumeName": "Windows",
                "VolumeSerialNumber": "BLAHBLAH",
            }];
        }
        else if (qry.indexOf("SELECT * FROM ANTIVIRUSPRODUCT") >= 0) {
            ret = [{
                "DisplayName": "INSECURE_AS_HECK"
            }];
        }
        else if (qry.indexOf("SELECT DISPLAYNAME, PRODUCTSTATE FROM ANTIVIRUSPRODUCT") >= 0) {
            ret = [{
                "displayName": "INSECURE_AS_HECK",
                "productState": "INSECURE_AS_HECK"
            }];
        }
        _wscript_wmis[_wscript_wmis.length] = { "arguments": arguments, "return": ret }
        util_log(this._name + ".ExecQuery(" + a + ") => " + _truncateOutput(_inspect(ret)));
        return ret;
    }
    this.InstancesOf = function (thing) {
        util_log(thing);
        if (thing.toLowerCase() == "win32_logicaldisk") {
            return this.execquery("SELECT * FROM WIN32_LOGICALDISK");
        }
        else if (thing.toLowerCase() == "win32_operatingsystem") {
            return this.execquery("SELECT * FROM WIN32_OPERATINGSYSTEM");
        }
        else if (thing.toLowerCase() == "win32_process") {
            return this.execquery("SELECT * FROM WIN32_PROCESS");
        }
        else if (thing.toLowerCase() == "antivirusproduct") {
            return this.execquery("SELECT * FROM ANTIVIRUSPRODUCT");
        }
    }
    // https://learn.microsoft.com/en-us/previous-versions/windows/desktop/regprov/setdwordvalue-method-in-class-stdregprov
    this.SetDwordValue = function (hDefKey, sSubKeyName, sValueName, uValue) {
        util_log(this._name + ".SetDwordValue(" + hDefKey + ", " + sSubKeyName + ", " + sValueName + ", " + uValue + ")");
        let absolute_key_path = REGDEFKEY_MAP[hDefKey] + "\\" + sSubKeyName + "\\" + sValueName;
        let normalized_key_path = _reg_normalize(absolute_key_path);
        REG[normalized_key_path] = uValue;
    }

    if (a.toLowerCase().indexOf("win32_process") !== -1) {
        util_log("Win32_Process class object requested, inheriting to AutomationObject...");

        // Inheriting Win32_Process
        Win32_Process.call(this);
    }
});
AutomationObject.toString = AutomationObject.toJSON = () => {
    return "AutomationObject";
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/createobject-function
var create_object = _proxy(function (a) {
    var ret = null;
    a = a.toLowerCase();
    if (a.startsWith("winhttp.winhttprequest") ||
        a.startsWith("msxml2.serverxmlhttp")) {
        ret = new MSXML2_XMLHTTP();
    } else if (a.startsWith("msxml2.domdocument")) {
        ret = new Msxml2_DOMDocument_6_0();
    } else {
        switch (a) {
            case "shell.application":
                ret = _proxy(new Shell_Application());
                break;
            case "scripting.filesystemobject":
                ret = _proxy(new FileSystemObject());
                break;
            case "wscript.shell":
                ret = _proxy(new WScript_Shell());
                break;
            case "wscript.network":
                ret = _proxy(new WScript_Network());
                break;
            case "vbscript.regexp":
                ret = _proxy(new VBScript_RegExp());
                break;
            case "adodb.stream":
                ret = _proxy(new ADODB_Stream());
                break;
            case "adodb.recordset":
            case "ador.recordset":
                ret = _proxy(new ADODB_Recordset());
                break;
            case "msxml2.xmlhttp":
                ret = _proxy(new MSXML2_XMLHTTP());
                break;
            case "scripting.dictionary":
                ret = _proxy(new Scripting_Dictionary());
                break;
            case "msscriptcontrol.scriptcontrol":
                ret = _proxy(new MSScriptControl_ScriptControl());
                break;
            case "microsoft.xmlhttp":
                ret = _proxy(new MSXML2_XMLHTTP());
                break;
            case "system.text.asciiencoding":
                ret = _proxy(new System_Text_ASCIIEncoding());
                break;
            case "system.security.cryptography.frombase64transform":
                ret = _proxy(new System_Security_Cryptography_FromBase64Transform());
                break;
            case "system.io.memorystream":
                ret = _proxy(new System_IO_MemoryStream());
                break;
            case "system.runtime.serialization.formatters.binary.binaryformatter":
                ret = _proxy(new System_Runtime_Serialization_Formatters_Binary_Binaryformatter());
                break;
            case "system.collections.arraylist":
                ret = _proxy(new System_Collections_ArrayList());
                break;
            case "microsoft.xmldom":
                ret = _proxy(new Msxml2_DOMDocument_6_0());
                break;
            case "internetexplorer.application":
                ret = _proxy(new InternetExplorer_Application());
                break
            case "windowsinstaller.installer":
                ret = _proxy(new WindowsInstaller_Installer());
                break;
            case "schedule.service":
                ret = _proxy(new Schedule_Service());
                break;
            default:
                util_log(">>> FIXME: WScript.CreateObject: type '" + a + "' not handled");
                ret = null;
                throw new TypeError("WScript.CreateObject: Could not locate automation class named " + a);
        }
    }
    _wscript_objects[_wscript_objects.length] = ret;
    return ret;
});
create_object.toString = create_object.toJSON = () => {
    return "create_object"
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/collection-object
Collection = _proxy(function (init = undefined) {
    this.id = _object_id++;
    this._name = "Collection[" + this.id + "]";
    util_log("new " + this._name + "(" + _truncateOutput(_inspect(init)) + ")");
    if (!init)
        this._items = _proxy([]);
    else
        this._items = _proxy(init);

    _defineSingleProperty(this, "count");
    this.count = this._items.length;
    this.add = function (a) {
        util_log(this._name + ".add(" + a + ")");
        this._items[this._items.length] = a;
        this.count = this._items.length;
    }
    this.toString = function () {
        return this._name;
    }
    this.toJSON = function () {
        return this.toString();
    }
    this.inspect = function () {
        return this.toString();
    }
    return this._items;
});
Collection.toString = Collection.toJSON = () => {
    return "Collection";
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/enum-statement
Enumerator = _proxy(function (a) {
    this.id = _object_id++;
    this._enum = a;
    this._index = 0;
    this._name = "Enumerator[" + this.id + "]";
    util_log("new " + this._name + " for " + _truncateOutput(_inspect(a)));
    this.atend = function () {
        var r = (this._index === this._enum.length);
        //util_log(this._name + ".atEnd() => "+ r);
        return r;
    };
    this.movenext = function () {
        this._index++;
    };
    this.item = function () {
        var ret = this._enum[this._index];
        let n = this._name + ".item(" + this._index + ")";
        util_log(n + " => " + _truncateOutput(_inspect(ret)));
        if (typeof ret === 'object')
            ret = _proxy(ret, true, n)
        return ret;
    }
});
Enumerator.toString = Enumerator.toJSON = () => {
    return "Enumerator";
}
Enumerator.prototype.toString = function () {
    return this._name;
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/drive-object
DriveObject = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "DriveObject[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "name", "_drive_name");
    _defineSingleProperty(this, "availablespace");
    _defineSingleProperty(this, "driveletter");
    _defineSingleProperty(this, "drivetype");
    _defineSingleProperty(this, "filesystem");
    _defineSingleProperty(this, "freespace");
    _defineSingleProperty(this, "isready");
    _defineSingleProperty(this, "path");
    _defineSingleProperty(this, "rootfolder");
    _defineSingleProperty(this, "serialnumber");
    _defineSingleProperty(this, "totalsize");
    _defineSingleProperty(this, "volumename");
    var a = win32.parse(d);

    this.name = d;

    this.toString = function () {
        return this._name;
    }
});
DriveObject.toString = DriveObject.toJSON = () => {
    return "DriveObject"
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/file-object
FileObject = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "FileObject[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "shortpath");
    this._shortpath = d;
    _defineSingleProperty(this, "attributes");
    _defineSingleProperty(this, "datelastmodified");
    this._datelastmodified = new Date();
    this.openastextstream = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".OpenAsTextStream(" + a + ")");
        return _proxy(new TextStream());
    }
    this.toString = function () {
        return this._name;
    }
});
FileObject.toString = FileObject.toJSON = () => {
    return "FileObject"
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/filesystemobject-object
FileSystemObject = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Scripting.FileSystemObject[" + this.id + "]";
    util_log("new " + this._name);

    // Useful private properties
    this._drives = new Collection([new DriveObject("C:")]);

    // Instance methods first, then properties
    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/filesystemobject-object#methods

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/buildpath-method
    this.BuildPath = function () {
        util_log(this._name + ".BuildPath(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
        return Array.prototype.slice.call(arguments, 0).join("\\");
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/copyfile-method
    this.CopyFile = function (source, destination, overwrite) {
        util_log(this._name + ".CopyFile(" + source + ", " + destination + ", " + overwrite + ")");
        return true;
    }

    this.CopyFolder = function () {
        util_log(this._name + ".CopyFolder(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/createfolder-method
    this.CreateFolder = function (foldername) {
        util_log(this._name + ".CreateFolder(" + foldername + ")");
        var abs = win32.isAbsolute(foldername);
        if (!abs)
            util_log("FIXME: " + this._name + ".CreateFolder(" + foldername + ") - relative path");
        var parts = win32.normalize(foldername).split(win32.sep);
        var t = FS;
        for (let p of parts) {
            if (p === "")
                continue;
            if (p.toUpperCase() in t)
                t = t[p.toUpperCase()];
            else {
                t = t[p.toUpperCase()] = {};
            };
        }
        return new FolderObject(foldername);
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/createtextfile-method
    this.CreateTextFile = function (filename, overwrite, unicode) {
        util_log(this._name + ".CreateTextFile(" + filename + ", " + overwrite + ", " + unicode + ")");
        return _proxy(new TextStream(filename));
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/deletefile-method
    this.DeleteFile = function (filespec, force) {
        util_log(this._name + ".DeleteFile(" + filespec + ", " + force + ")");
        return true;
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/deletefolder-method
    this.DeleteFolder = function (folderspec, force) {
        util_log(this._name + ".DeleteFolder(" + folderspec + ", " + force + ")");
    }

    this.DriveExists = function () {
        util_log(this._name + ".DriveExists(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/fileexists-method
    this.FileExists = function (filespec) {
        var ret = false;
        var abs = win32.isAbsolute(filespec);
        if (!abs)
            util_log("FIXME: " + this._name + ".FileExists(" + filespec + ") - relative path");
        var parts = win32.normalize(filespec).split(win32.sep);
        var t = FS;
        for (let p of parts) {
            if (p === "")
                continue;
            t = t[p.toUpperCase()];
            if (typeof t === "undefined")
                break;
        }
        if (typeof t !== "undefined")
            ret = true;
        if (!ret && _options.FileAlwaysExists) {
            util_log("FileExists: " + ret + " overridden with FileAlwaysExists: true");
            ret = true;
        }
        util_log(this._name + ".FileExists(" + filespec + ") => " + ret);
        return ret;
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/folderexists-method
    this.FolderExists = function (folderspec) {
        var ret = false;
        f = "" + folderspec;
        var abs = win32.isAbsolute(folderspec);
        if (!abs)
            util_log("FIXME: " + this._name + ".FolderExists(" + folderspec + ") - relative path");
        var parts = win32.normalize(folderspec).split(win32.sep);
        var t = FS;
        for (let p of parts) {
            if (p === "")
                continue;
            t = t[p.toUpperCase()];
            if (typeof t === "undefined")
                break;
        }
        if (typeof t !== "undefined")
            ret = true;
        util_log(this._name + ".FolderExists(" + folderspec + ") => " + ret);
        return ret;
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getabsolutepathname-method
    this.GetAbsolutePathName = function (pathspec) {
        d1 = win32.normalize(pathspec);
        if (!win32.isAbsolute(d1)) {
            d1 = ENV["CWD"] + win32.sep + d1;
        }
        util_log(this._name + ".GetAbsolutePathName(" + pathspec + ") => " + d1);
        return d1;
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getbasename-method
    this.GetBaseName = function (path) {
        var ret = win32.basename(path);
        util_log(this._name + ".GetBaseName(" + path + ") => " + ret);
        return ret;
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getdrive-method
    this.GetDrive = function (drivespec) {
        util_log(this._name + ".GetDrive(" + drivespec + ")");
        return new DriveObject(drivespec);
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getdrivename-method
    this.GetDriveName = function (path) {
        let driveName = path[0]
        util_log(">>> FIXME: GetDriveName gets the drive name from '" + path + "' in a dumb way => '" + driveName + "'")
        util_log(this._name + ".GetDriveName(" + path + ") => " + driveName);
        return driveName;
    }

    this.GetExtensionName = function () {
        util_log(this._name + ".GetExtensionName(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getfile-method
    this.GetFile = function (filespec) {
        util_log(this._name + ".GetFile(" + filespec + ")");
        d1 = win32.normalize(filespec);
        return new FileObject(d1);
    }

    this.GetFileName = function () {
        util_log(this._name + ".GetFileName(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getfolder-method
    this.GetFolder = function (folderspec) {
        d1 = win32.normalize(folderspec);
        util_log(this._name + ".GetFolder(" + folderspec + ") => " + d1);
        return new FolderObject(d1);
    }

    this.GetParentFolderName = function () {
        util_log(this._name + ".GetParentFolderName(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/getspecialfolder-method
    this.GetSpecialFolder = function (folderspec) {
        switch ("" + folderspec) {
            case "0":
                fn = ENV["WINDIR"]; //"WindowsFolder";
                break;
            case "1":
                fn = ENV["SYSTEMDIRECTORY"]; //"SystemFolder";
                break;
            case "2":
                fn = ENV["TEMP"]; //TempFolder;
                break;
            default:
                fn = "UnknownType[" + folderspec + "]";
                break;
        }
        var ret = fn + win32.sep;
        util_log(this._name + ".GetSpecialFolder(" + folderspec + ") => " + ret);
        return ret;
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/gettempname-method
    this.GetTempName = function () {
        var fn = "TempFile_" + this.id + ".tmp";
        util_log(this._name + ".GetTempName() => " + fn);
        return fn;
    }

    this.Move = function () {
        util_log(this._name + ".Move(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.MoveFile = function () {
        util_log(this._name + ".MoveFile(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.MoveFolder = function () {
        util_log(this._name + ".MoveFolder(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/openastextstream-method
    this.OpenAsTextStream = function () {
        util_log(this._name + ".OpenAsTextStream(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
        return _proxy(new TextStream());
    }

    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/opentextfile-method
    this.OpenTextFile = function (filename, iomode, create, format) {
        util_log(this._name + ".OpenTextFile(" + filename + ", " + iomode + ", " + create + ", " + format + ")");
        return _proxy(new TextStream(filename));
    }

    this.WriteLine = function () {
        util_log(this._name + ".WriteLine(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // Undocumented methods
    // https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/getfileversion-function
    this.GetFileVersion = function (f) {
        util_log(this._name + ".GetFileVersion(" + f + ")");
        return "1.0";
    }

    // Instance properties
    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/filesystemobject-object#properties

    // _defineSingleProperty(this, "Drives");
    this.Drives = this._drives;

    // _defineSingleProperty(this, "Name");
    this.Name = this._name;

    _defineSingleProperty(this, "Path");
    _defineSingleProperty(this, "Size");
    _defineSingleProperty(this, "Type");

    // Helper methods
    this.toString = function () {
        return this._name;
    }
});
FileSystemObject.toString = FileSystemObject.toJSON = () => {
    return "FileSystemObject"
}

// https://learn.microsoft.com/en-us/windows/win32/shell/folderitem
FolderItem = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "FolderItem[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "application");
    _defineSingleProperty(this, "getfolder");
    _defineSingleProperty(this, "getlink");
    _defineSingleProperty(this, "isbrowsable");
    _defineSingleProperty(this, "isfilesystem");
    _defineSingleProperty(this, "isfolder");
    _defineSingleProperty(this, "islink");
    _defineSingleProperty(this, "name", "_folder_name");
    _defineSingleProperty(this, "parent");
    _defineSingleProperty(this, "path");
    _defineSingleProperty(this, "size");
    _defineSingleProperty(this, "type");
    this.name = d;
    this.path = d;
    this.toString = () => {
        return this._name;
    }
});
FolderItem.toString = FolderItem.toJSON = () => {
    return "FolderItem";
}

// https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/folder-object
FolderObject = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "FolderObject[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "name", "_folder_name");
    _defineSingleProperty(this, "parentfolder");
    //_defineSingleProperty(this, "Files");
    //_defineSingleProperty(this, "SubFolders");
    _defineSingleProperty(this, "isrootfolder");
    _defineSingleProperty(this, "attributes");
    _defineSingleProperty(this, "datecreated");
    _defineSingleProperty(this, "datelastaccessed");
    _defineSingleProperty(this, "datelastmodified");
    _defineSingleProperty(this, "drive");
    _defineSingleProperty(this, "path");
    _defineSingleProperty(this, "shortname");
    _defineSingleProperty(this, "shortpath");
    this._shortpath = d;
    _defineSingleProperty(this, "size");
    _defineSingleProperty(this, "type");
    var a = win32.parse(d);

    this.name = d;
    this.parentfolder = win32.join(d, "..");
    Object.defineProperty(this, "files", {
        get: function () {
            var ret = [];
            var f = this.name;
            var abs = win32.isAbsolute(f);
            if (!abs)
                util_log("FIXME: " + this._name + ".Files.get() - relative path");
            var parts = win32.normalize(f).split(win32.sep);
            var t = FS;
            for (let p of parts) {
                if (p === "")
                    continue;
                t = t[p.toUpperCase()];
            }
            if (typeof t !== "undefined") {
                for (var p1 in t) {
                    ret[ret.length] = win32.join(this.Name, p1);
                }
            }
            util_log(this._name + ".Files.get() => (" + typeof ret + ") '" + _truncateOutput(ret) + "'");
            return ret;
        }
    });
    Object.defineProperty(this, "subfolders", {
        get: function () {
            var f = this.name;
            var ret = [];
            var abs = win32.isAbsolute(f);
            if (!abs)
                util_log("FIXME: " + this._name + ".Files.get() - relative path");
            var parts = win32.normalize(f).split(win32.sep);
            var t = FS;
            for (let p of parts) {
                if (p === "")
                    continue;
                t = t[p.toUpperCase()];
            }
            if (typeof t !== "undefined") {
                for (var p1 in t) {
                    ret[ret.length] = win32.join(this.name, p1);
                }
            }
            util_log(this._name + ".SubFolders.get() => (" + typeof ret + ") '" + _truncateOutput(ret) + "'");
            return ret;
        }
    });

    this.toString = function () {
        return this._name;
    }
});
FolderObject.toString = FolderObject.toJSON = () => {
    return "FolderObject"
}

// https://learn.microsoft.com/en-us/windows/win32/shell/folder2-object
Folder2 = _proxy(function (d) {
    this.id = _object_id++;
    this._name = "Folder2[" + this.id + "](" + d + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "self", "_self");
    _defineSingleProperty(this, "offlinestatus");
    this.self = new FolderItem(d);
    this.toString = () => {
        return this._name;
    }
});
Folder2.toString = Folder2.toJSON = () => {
    return "Folder2";
}

// https://learn.microsoft.com/en-us/office/vba/Language/Reference/user-interface-help/getobject-function
// a is either pathname or appname
// b is either class or objecttype
GetObject = function (a, b) {
    util_log("GetObject(" + a + ", " + b + ")");
    return new AutomationObject(a, b);
}
GetObject.toString = GetObject.toJSON = () => {
    return "GetObject"
}

// https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms759148(v=vs.85)
MSXML2_XMLHTTP = _proxy(function () {
    this.id = _object_id++;
    this._name = "MSXML2.XMLHTTP[" + this.id + "]";
    util_log("new " + this._name);
    var self = this;
    this._status = 0;
    this._headers = {};
    this._wscript_urls_index = null;
    this.toString = this.tostring = () => {
        return this._name
    }

    _defineSingleProperty(this, "allresponseheaders");
    // Workaround for new this[ActiveXObject ... called from onreadystatechange callback (TODO)
    _defineSingleProperty(this, "activexobject");
    this._activexobject = ActiveXObject;

    this.open = function (m, u, a) {
        u = u.replace(/\r|\n/g, "");
        util_log(this._name + ".open(" + m + "," + u + "," + a + ")");
        this.method = m;
        this.url = u;
        switch (("" + a).toLowerCase()) {
            case "false":
            case "no":
            case "0":
            case "":
            case "undefined":
            case null:
                this.async = false;
                break;
            default:
                this.async = true;
        }
        function containsURL(obj, list) {
            for (url of list) {
                if (JSON.stringify(obj) === JSON.stringify(url)) {
                    return true;
                }
            }
            return false;
        }
        this._wscript_urls_index = _wscript_urls.length
        let url_to_add = { "url": u, "method": m }
        if (!containsURL(url_to_add, _wscript_urls)) {
            _wscript_urls[this._wscript_urls_index] = url_to_add;
        }
    }
    this.close = function () {
        util_log(this._name + ".close()");
    }
    this.getallresponseheaders = function () {
        var ret = this.allresponseheaders;
        util_log(this._name + ".getAllResponseHeaders() => " + _inspect(ret));
        return ret;
    }
    this.send = function (a) {
        util_log(this._name + ".send(" + a + ")");
        if (_download === "Yes") {
            try {
                var res = _sync_request(this.method, this.url, {
                    'headers': this._headers
                });
                //util_log("Sync_req: " + _truncateOutput(res.getBody()));
                this.status = res.statusCode || 0;
                this.readystate = 4;
                this.statustext = "OK";
                this.responsebody = res.body || "";
                this.allresponseheaders = JSON.stringify(res.headers) || "";
            } catch (err) {
                util_log(this._name + ".send() Exception: " + _truncateOutput(_inspect(err)));
                this.status = err.statusCode || 0;
                this.readystate = 4;
                this.statustext = err.toString();
                this.responsebody = err.body || "";
                this.allresponseheaders = JSON.stringify(err.headers) || "";
            }
            if (this._wscript_urls_index != null) {
                _wscript_urls[this._wscript_urls_index]["status"] = this.status;
                _wscript_urls[this._wscript_urls_index]["response_headers"] = this.allresponseheaders;
                _wscript_urls[this._wscript_urls_index]["response_body"] = _truncateOutput(this.responsebody);
                _wscript_urls[this._wscript_urls_index]["request_body"] = a;
                _wscript_urls[this._wscript_urls_index]["statustext"] = this.statustext;
            }
            if (this.onreadystatechange) {
                util_log(this._name + ".onreadystatechange()");
                this.onreadystatechange();
            }
            return;
        } else if (_download === "No") {
            util_log(this._name + " Not sending data, if you want to interact with remote server, set --down");
            var s = 'MZ'
            for (var ii = 0; ii < 200; ii++) {
                s += 'Dummy content, use --down to download the real payload.\n';
            }
            this.responsebody = s;
            this.status = 200;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange() with dummy data");
                this.onreadystatechange();
            }
        } else if (_download === "Return HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange()");
                this.onreadystatechange();
            }
        } else if (_download === "Throw HTTP/404") {
            util_log(this._name + " Intentionally returning HTTP/404 & throwing exception");
            this.responsebody = "HTTP/404 Resource not found";
            this.status = 404;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange()");
                this.onreadystatechange();
            }
            throw new Error("MSXML2_XMLHTTP.send intentionally throwing exception");
        } else {
            util_log(">>> FIXME: MSXML2_XMLHTTP.send _download '" + _download + "' not handled");
            throw new TypeError(">>> FIXME: MSXML2_XMLHTTP.send _download '" + _download + "' not handled");
        }
        util_log(this._name + ".send(" + a + ") finished");
    }
    this.setrequestheader = function (a, b) {
        util_log(this._name + ".setRequestHeader(" + a + ", " + b + ")");
        this._headers[a] = b;
        if (this._wscript_urls_index != null) {
            _wscript_urls[this._wscript_urls_index]["request_headers"] = b;
        }
    }
    this.setoption = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".setOption(" + a + ")");
    }
    this.settimeouts = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments,
            0).join(","));
        util_log(this._name + ".setTimeouts(" + a + ")");
    }
    this._responseBody = [];
    _defineSingleProperty(this, "responsebody", "_responseBody");
    _defineSingleProperty(this, "url");
    _defineSingleProperty(this, "method");
    _defineSingleProperty(this, "status", "_status");
    _defineSingleProperty(this, "async");
    _defineSingleProperty(this, "readystate");
    _defineSingleProperty(this, "statustext");
    _defineSingleProperty(this, "onreadystatechange");
    this.onreadystatechange = undefined;
    Object.defineProperty(this, "responsetext", {
        get: function () {
            var ret = "" + this._responseBody;
            util_log(this._name + ".ResponseText.get() => (" + typeof ret + ") '" + _truncateOutput(ret) + "'");
            return ret;
        },
        set: function (v) {
            util_log(this._name + ".ResponseText = (" + typeof v + ") '" + _truncateOutput(v) + "'");
            this.responseBody = v;
        }
    });
});
MSXML2_XMLHTTP.toString = MSXML2_XMLHTTP.toJSON = () => {
    return "MSXML2_XMLHTTP"
}

// https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms756987(v=vs.85)
Msxml2_DOMDocument_6_0 = _proxy(function () {
    this.id = _object_id++;
    this._name = "Msxml2.DOMDocument.6.0[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms757047(v=vs.85)
    this.createelement = function (a) {
        util_log(this._name + ".createElement(" + a + ")");
        return new Element(a);
    }
});
Msxml2_DOMDocument_6_0.toString = Msxml2_DOMDocument_6_0.toJSON = () => {
    return "Msxml2_DOMDocument_6_0"
}

// https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process
Win32_Process = _proxy(function (d) {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Win32_Process[" + this.id + "](" + d + ")";
    util_log("new " + this._name);

    // Useful properties
    this.stdout = _proxy(new TextStream());
    this.stderr = _proxy(new TextStream());
    this.stdin = _proxy(new TextStream());

    // Instance methods first, then properties
    // https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process#methods

    this.AttachDebugger = function () {
        util_log(this._name + ".AttachDebugger(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.Create = function () {
        util_log(this._name + ".Create(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetAvailableVirtualSize = function () {
        util_log(this._name + ".GetAvailableVirtualSize(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetOwner = function () {
        util_log(this._name + ".GetOwner(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetOwnerSid = function () {
        util_log(this._name + ".GetOwnerSid(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.SetPriority = function () {
        util_log(this._name + ".SetPriority(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.Terminate = function () {
        util_log(this._name + ".Terminate(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process#properties

    _defineSingleProperty(this, "Caption");

    // _defineSingleProperty(this, "CommandLine");
    this.CommandLine = d;

    _defineSingleProperty(this, "CreationClassName");
    _defineSingleProperty(this, "CreationDate");
    _defineSingleProperty(this, "CSCreationClassName");
    _defineSingleProperty(this, "CSName");
    _defineSingleProperty(this, "Description");
    _defineSingleProperty(this, "ExecutablePath");
    _defineSingleProperty(this, "ExecutionState");
    _defineSingleProperty(this, "Handle");
    _defineSingleProperty(this, "HandleCount");
    _defineSingleProperty(this, "InstallDate");
    _defineSingleProperty(this, "KernelModeTime");
    _defineSingleProperty(this, "MaximumWorkingSetSize");
    _defineSingleProperty(this, "MinimumWorkingSetSize");

    // _defineSingleProperty(this, "Name");
    this.Name = d;

    _defineSingleProperty(this, "OSCreationClassName");
    _defineSingleProperty(this, "OSName");
    _defineSingleProperty(this, "OtherOperationCount");
    _defineSingleProperty(this, "OtherTransferCount");
    _defineSingleProperty(this, "PageFaults");
    _defineSingleProperty(this, "PageFileUsage");
    _defineSingleProperty(this, "ParentProcessId");
    _defineSingleProperty(this, "PeakPageFileUsage");
    _defineSingleProperty(this, "PeakVirtualSize");
    _defineSingleProperty(this, "PeakWorkingSetSize");
    _defineSingleProperty(this, "Priority");
    _defineSingleProperty(this, "PrivatePageCount");

    // _defineSingleProperty(this, "ProcessId");
    this.ProcessId = this.id;

    _defineSingleProperty(this, "QuotaNonPagedPoolUsage");
    _defineSingleProperty(this, "QuotaPagedPoolUsage");
    _defineSingleProperty(this, "QuotaPeakNonPagedPoolUsage");
    _defineSingleProperty(this, "QuotaPeakPagedPoolUsage");
    _defineSingleProperty(this, "ReadOperationCount");
    _defineSingleProperty(this, "ReadTransferCount");
    _defineSingleProperty(this, "SessionId");
    _defineSingleProperty(this, "Status");
    _defineSingleProperty(this, "TerminationDate");
    _defineSingleProperty(this, "ThreadCount");
    _defineSingleProperty(this, "UserModeTime");
    _defineSingleProperty(this, "VirtualSize");
    _defineSingleProperty(this, "WindowsVersion");
    _defineSingleProperty(this, "WorkingSetSize");
    _defineSingleProperty(this, "WriteOperationCount");
    _defineSingleProperty(this, "WriteTransferCount");

    _defineSingleProperty(this, "exitcode");
    _defineSingleProperty(this, "stdout");
    _defineSingleProperty(this, "stdin");
    _defineSingleProperty(this, "stderr");
    _defineSingleProperty(this, "name", "_processname");

    // Helper method
    this.toString = () => {
        return this._name;
    }
});
Win32_Process.toString = Win32_Process.toJSON = () => {
    return "Win32_Process";
}

// https://learn.microsoft.com/en-ca/office/vba/language/reference/user-interface-help/dictionary-object
Scripting_Dictionary = _proxy(function () {
    this.id = _object_id++;
    this._name = "Scripting.Dictionary[" + this.id + "]";
    util_log("new " + this._name);
    this._dict = {};
    this.add = function (a, b) {
        util_log(this._name + ".add(" + a + ", " + b + ")");
        this._dict[a] = b;
    }
    this.item = function (a) {
        if (!a)
            a = 0;
        util_log(this._name + ".Item(" + a + ")");
        return this._dict[a];
    }
    this.items = function () {
        util_log(this._name + ".Item()");
        return this._dict;
    }
    this.exists = function (a) {
        var ret;
        ret = (a in this._dict);
        util_log(this._name + ".Exists(" + a + ") => " + ret);
        return ret;
    }
});
Scripting_Dictionary.toString = Scripting_Dictionary.toJSON = () => {
    return "Scripting_Dictionary"
}

// https://ss64.com/vb/shell.html
Shell_Application = _proxy(function () {
    this.id = _object_id++;
    this._name = "Shell.Application[" + this.id + "]";
    util_log("new " + this._name);
    this.toString = function () {
        return this._name;
    }
    var nms = {
        0: "C:\\Users\\User\\Desktop",
        1: "::{871C5380-42A0-1069-A2EA-08002B30309D}",
        2: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs",
        3: "::{26EE0668-A00A-44D7-9371-BEB064C98683}\\0",
        4: "::{21EC2020-3AEA-1069-A2DD-08002B30309D}\\::{2227A280-3AEA-1069-A2DE-08002B30309D}",
        5: "C:\\Users\\User\\Documents",
        6: "C:\\Users\\User\\Favorites",
        7: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup",
        8: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Recent",
        9: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\SendTo",
        10: "::{645FF040-5081-101B-9F08-00AA002F954E}",
        11: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu",
        13: "C:\\Users\\User\\Music",
        14: "C:\\Users\\User\\Videos",
        16: "C:\\Users\\User\\Desktop",
        17: "::{20D04FE0-3AEA-1069-A2D8-08002B30309D}",
        18: "::{F02C1A0D-BE21-4350-88B0-7367FC96EF3C}",
        19: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Network Shortcuts",
        20: "C:\\Windows\\Fonts",
        21: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Templates",
        22: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu",
        23: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs",
        24: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp",
        25: "C:\\Users\\Public\\Desktop",
        26: "C:\\Users\\User\\AppData\\Roaming",
        27: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Printer Shortcuts",
        28: "C:\\Users\\User\\AppData\\Local",
        29: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup",
        30: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp",
        31: "C:\\Users\\User\\Favorites",
        32: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\INetCache",
        33: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\INetCookies",
        34: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\History",
        35: "C:\\ProgramData",
        36: "C:\\Windows",
        37: "C:\\Windows\\System32",
        38: "C:\\Program Files",
        39: "C:\\Users\\User\\Pictures",
        40: "C:\\Users\\User",
        41: "C:\\Windows\\SysWOW64",
        42: "C:\\Program Files (x86)",
        43: "C:\\Program Files\\Common Files",
        44: "C:\\Program Files (x86)\\Common Files",
        45: "C:\\ProgramData\\Microsoft\\Windows\\Templates",
        46: "C:\\Users\\Public\\Documents",
        47: "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Administrative Tools",
        48: "C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Administrative Tools",
        49: "::{21EC2020-3AEA-1069-A2DD-08002B30309D}\\::{7007ACC7-3202-11D1-AAD2-00805FC1270E}",
        53: "C:\\Users\\Public\\Music",
        54: "C:\\Users\\Public\\Pictures",
        55: "C:\\Users\\Public\\Videos",
        56: "C:\\Windows\\Resources",
        58: "C:\\ProgramData\\OEM Links",
        59: "C:\\Users\\User\\AppData\\Local\\Microsoft\\Windows\\Burn\\Burn",
        61: "::{F02C1A0D-BE21-4350-88B0-7367FC96EF3C}"

    }
    this.namespace = function (a) {
        var ret;
        if (typeof a === "string") {
            ret = new Folder2(a);
        } else {
            if (a in nms) {
                ret = new Folder2(nms[a]);
            } else {
                ret = null
            }
        }
        util_log(this._name + ".Namespace(" + a + ") => " + ret);
        return ret;
    }
    this.shellexecute = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".ShellExecute(" + a + ")");
    }
});
Shell_Application.toString = Shell_Application.toJSON = () => {
    return "Shell_Application"
}

// https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/textstream-object
TextStream = _proxy(function (filename) {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "TextStream[" + this.id + "]";

    // Useful private properties
    this._filename = filename;
    this._content = "";

    // Instance methods
    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/textstream-object

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/close-method-textstream-object
    this.Close = function () {
        util_log(this._name + ".Close()");
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/read-method
    this.Read = function (characters) {
        util_log(this._name + ".Read(" + characters + ")");
        return this._content.substring(0, characters);
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/readall-method
    this.ReadLine = function () {
        util_log(this._name + ".ReadLine()");
        return this._content.split("\r\n")[0];
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/readline-method
    this.ReadAll = function () {
        util_log(this._name + ".ReadAll()");
        return this._content;
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/skip-method
    this.Skip = function (characters) {
        util_log(this._name + ".Skip(" + characters + ")");
        return this._content;
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/skipline-method
    this.SkipLine = function () {
        util_log(this._name + ".SkipLine()");
        return this._content;
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/write-method
    this.Write = function (string) {
        util_log(this._name + ".Write(" + string + ")");
        this._content += string;
        _wscript_saved_files[this._filename] = this._content;
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/writeblanklines-method
    this.WriteBlankLines = function (lines) {
        util_log(this._name + ".WriteBlankLines(" + lines + ")");
        for (var i = 0; i < lines; i++) {
            this._content += "\r\n";
        }
    }

    // https://learn.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/writeline-method
    this.WriteLine = function (string) {
        util_log(this._name + ".WriteLine(" + _truncateOutput(string) + ")");
        this._content += string + '\r\n';
        _wscript_saved_files[this._filename] = this._content;
    }

    // Instance properties
    // https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/textstream-object#properties
    _defineSingleProperty(this, "AtEndOfLine");
    _defineSingleProperty(this, "AtEndOfStream");
    _defineSingleProperty(this, "Column");
    _defineSingleProperty(this, "Line");

    // Helper methods
    this.toString = function () {
        return this._name;
    }
    this.toJSON = function () {
        return this.toString();
    }
    this.inspect = function () {
        return this.toString();
    }
});
TextStream.toString = TextStream.toJSON = () => {
    return "TextStream"
}

// ?
MSScriptControl_ScriptControl = function () {
    this.id = _object_id++;
    this._name = "MSScriptControl.ScriptControl[" + this.id + "]";
    util_log("new " + this._name);
    _defineSingleProperty(this, "Language");
    _defineSingleProperty(this, "Timeout");
    this.addcode = function (a) {
        util_log(this._name + ".AddCode(" + a + ")");
    }
    this.addobject = function (a, b) {
        util_log(this._name + ".AddObject(" + a + ", " + b + ")");
    }
}
MSScriptControl_ScriptControl.toString = MSScriptControl_ScriptControl.toJSON = () => {
    return "MSScriptControl_ScriptControl"
}

// WScript

// https://admhelp.microfocus.com/uft/en/all/VBScript/Content/html/ff1bb4e8-9970-48e6-91d3-0bf0da59d835.htm

// https://learn.microsoft.com/en-us/previous-versions/ss1ysb2a(v=vs.85)
// WshArguments must be declared before WScript because WScript.arguments = WshArguments()
WshArguments = _proxy(function () {
    this.id = _object_id++;
    this._name = "WshArguments[" + this.id + "]";
    this._args = _proxy({});
    this.add = function (a) {
        util_log(this._name + ".add(" + a + ")");
        this._args[this._args.length] = a;
    }
    this.item = function (a) {
        if (!a)
            a = 0;
        util_log(this._name + ".Item(" + a + ")");
        return this._args[a];
    }
    this.items = function () {
        util_log(this._name + ".Items()");
        return this._args;
    }
    this.length = function () {
        util_log(this._name + ".Length()");
        return this._args.length;
    }
    this.toString = function () {
        return this._name;
    }
    this.named = new WshNamed(this._args);
    Object.defineProperty(this, "args", {
        get: function () {
            util_log(this._name + "." + name + ".get() => (" + typeof this._args + ") '" + _truncateOutput(this._args) + "'");
            return this[intvar];
        },
        set: function (v) {
            util_log(this._name + "." + name + " = (" + typeof v + ") '" + _truncateOutput(v) + "'");
            this._args = _proxy(v);
        }
    });
});
WshArguments.toString = WshArguments.toJSON = () => {
    return "WshArguments"
}

// https://learn.microsoft.com/en-us/previous-versions/d6y04sbb(v=vs.85)
// WshNamed must be declared before WScript because WScript.named = WshNamed()
WshNamed = _proxy(function () {
    this.id = _object_id++;
    this._name = "WshNamed[" + this.id + "]";
    this._args = _proxy({});
    // Fake to imply elevated permissions
    this._args["elevated"] = true;
    this.Exists = function (a) {
        if (!a)
            a = 0;
        util_log(this._name + ".Exists(" + a + ")");
        return this._args[a];
    };
});
WshNamed.toString = WshNamed.toJSON = () => {
    return "WshNamed"
}

// https://learn.microsoft.com/en-us/previous-versions/at5ydy31(v=vs.85)
WScript = _proxy(new function () {
    this._name = "WScript";
    this.createobject = function (a) {
        util_log(this._name + ".CreateObject(" + a + ")");
        return create_object(a);
    };
    this.sleep = function (a) {
        // This is our attempt at sleep-skipping
        util_log(this._name + ".Sleep(" + a + ")");
    };
    this.echo = function (a) {
        util_log(this._name + ".Echo(" + a + ")");
    };
    this.quit = function (a) {
        util_log(this._name + ".Quit(" + a + ")");
        throw {
            _source: "WScript.Quit"
        }
    };
    this.toString = function () {
        return "Windows Script Host";
    };
    this.toJSON = function () {
        return this.toString();
    }
    // _defineSingleProperty(this, "scriptname");
    this.scriptname = "ScriptName.js";
    _defineSingleProperty(this, "scriptfullname");
    this.scriptFullName = "C:\\Users\\User\\AppData\\Local\\Temp\\" + this.scriptname;
    // _defineSingleProperty(this, "version");
    this.version = "5.812";
    // _defineSingleProperty(this, "arguments");
    this.arguments = new WshArguments();
    // _defineSingleProperty(this, "path");
    this.path = ENV["SYSTEMDIRECTORY"];
    // _defineSingleProperty(this, "name", "_wsh_name");
    this.name = "Windows Script Host";
    // _defineSingleProperty(this, "interactive");
    this.interactive = true;
    // _defineSingleProperty(this, "stderr");
    this.stderr = _proxy(new TextStream());
    // _defineSingleProperty(this, "stdin");
    this.stdin = _proxy(new TextStream());
    // _defineSingleProperty(this, "stdout");
    this.stdout = _proxy(new TextStream());
});
WScript.toString = WScript.toJSON = () => {
    return "WScript"
}
WSH = WScript;

// https://learn.microsoft.com/en-us/previous-versions//6s7w15a0(v=vs.85)
WshEnvironment = _proxy(function (strType) {
    this._id = _object_id++;
    this._strType = strType.toUpperCase();
    this._name = "WshEnvironment[" + this._id + "](" + this._strType + ")";
    util_log("new " + this._name);
    for (const [key, value] of Object.entries(ENV)) {
        try {
            _defineSingleProperty(this, key);
            this.key = value;
        } catch {}
      }

    return this;
});
WshEnvironment.toString = WshEnvironment.toJSON = () => {
    return "WshEnvironment"
}

// https://ss64.com/vb/network.html
WScript_Network = _proxy(function () {
    this.id = _object_id++;
    this._name = "WScript.Network[" + this.id + "]";
    util_log("new " + this._name);
    this.toString = this.tostring = function () {
        return this._name;
    }
    _defineSingleProperty(this, "userdomain");
    this.userdomain = "MYDOM";
});
WScript_Network.toString = WScript_Network.toJSON = () => {
    return "WScript_Network"
}

// https://learn.microsoft.com/en-us/previous-versions//5ahda31z(v=vs.85)
WScript_Shell = _proxy(function () {
    this.id = _object_id++;
    this._name = "WScript.Shell[" + this.id + "]";
    util_log("new " + this._name);
    this.expandenvironmentstrings = function (a) {
        var ret = a;
        var regex;
        for (var key in ENV) {
            if (ENV.hasOwnProperty(key)) {
                regex = new RegExp("%" + key + "%", "ig");
                ret = ret.replace(regex, ENV[key]);
            }
        }
        util_log(this._name + ".ExpandEnvironmentStrings(" + a + ") => " + ret);
        return ret;
    };
    this.run = function (a, b, c) {
        util_log(this._name + ".Run(" + a + ", " + b + ", " + c + ")");
    }
    this.exec = function (a) {
        util_log(this._name + ".Exec(" + a + ")");
        // Prepend with a useful header to assist with batch identification
        a = "REM Batch extracted by Assemblyline\n" + a;
        _wscript_saved_files[this._name] = a;
        return new Win32_Process(a);
    }
    this.regwrite = function (a, b, c) {
        util_log(this._name + ".RegWrite(" + a + ", " + b + ", " + c + ")");
        REG[_reg_normalize(a)] = b;
    }
    this.regread = function (a) {
        var normalized_registry_key = _reg_normalize(a);
        // Remove trailing backwards slashes if they exist
        normalized_registry_key = normalized_registry_key.replace(/\\+$/, "");
        var ret = "" + REG[_reg_normalize(normalized_registry_key)];
        if (ret === "undefined") {
            util_log(">>> FIXME: " + this._name + ".RegRead(" + a + ") - unknown key");
        }
        util_log(this._name + ".RegRead(" + a + ") => " + ret);
        return ret;
    }
    // https://learn.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)
    this.environment = function (a) {
        var ret = WshEnvironment(a);
        util_log(this._name + ".Environment(" + a + ")");
        return ret;
    }
    this.specialfolders = function (a) {
        util_log("WScript.SpecialFolders(" + a + ")");
        return a + "/";
    }
    this.createshortcut = function (a) {
        a = _truncateOutput(a);
        util_log("WScript.CreateShortcut(" + a + ")");
        return new WshShortcut(a);
    }
    this.popup = function () {
        a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log("WScript.Popup(" + a + ")");
        return 1;
        // -1 The user did not click a button before nSecondsToWait seconds elapsed.
        // 1 OK button
        // 2 Cancel button
        // 3 Abort button
        // 4 Retry button
        // 5 Ignore button
        // 6 Yes button
        // 7 No button
        // 10 Try Again button
        // 11 Continue button
    }
    this.toString = this.tostring = function () {
        return this._name;
    }
});
WScript_Shell.toString = WScript_Shell.toJSON = () => {
    return "WScript_Shell"
}
Shell = WScript_Shell;
WshShell = WScript_Shell;

// https://admhelp.microfocus.com/uft/en/all/VBScript/Content/html/5ce04e4b-871a-4378-a192-caa644bd9c55.htm
WshShortcut = _proxy(function (a) {
    this.id = _object_id++;
    this._link = a;
    this._name = "WshShortcut[" + this.id + "](" + this._link + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "arguments");
    _defineSingleProperty(this, "fullname", "_link");
    _defineSingleProperty(this, "targetpath");
    _defineSingleProperty(this, "windowstyle");
    _defineSingleProperty(this, "hotkey");
    _defineSingleProperty(this, "iconlocation");
    _defineSingleProperty(this, "description");
    _defineSingleProperty(this, "workingdirectory");
    this.save = function () {
        util_log(this._name + ".save()");
    }
    //this[Symbol.unscopables] = _proxy({})
});
WshShortcut.toString = WshShortcut.toJSON = () => {
    return "WshShortcut"
}

// VBScript

// https://www.tutorialspoint.com/vbscript/vbscript_reg_expressions.htm
VBScript_RegExp = _proxy(function () {
    this.id = _object_id++;
    this._name = "VBScript.RegExp[" + this.id + "]";
    util_log("new " + this._name);
    this.toString = this.tostring = function () {
        return this._name;
    }
});
VBScript_RegExp.toString = VBScript_RegExp.toJSON = () => {
    return "VBScript_RegExp"
}

// Exposed objects from SQL

// https://learn.microsoft.com/en-us/office/client-developer/access/desktop-database-reference/field-object-ado
ADODB_Field = _proxy(function (father) {
    this.id = _object_id++;
    this._name = "ADODB.Field[" + this.id + "]";
    this._father = father;
    util_log("new " + this._name);
    this.toString = this.tostring = () => {
        return this._name
    }
    _defineSingleProperty(this, "name", "_fieldname");
    _defineSingleProperty(this, "value");
    _defineSingleProperty(this, "definedsize");
    this._value = "";
    this.appendchunk = function () {
        let fds = Array.prototype.slice.call(arguments, 0);
        let a = _truncateOutput(fds.join(","));
        util_log(this._name + ".AppendChunk(" + a + ")");
        this._value = fds[0]
    }
    this.toString = function () {
        return this._name;
    }
});
ADODB_Field.toString = ADODB_Field.toJSON = () => {
    return "ADODB.Field"
}

// https://learn.microsoft.com/en-us/sql/ado/reference/ado-api/fields-collection-ado?source=recommendations&view=sql-server-ver16
ADODB_Fields = _proxy(function (father) {
    this.id = _object_id++;
    this._name = "ADODB.Fields[" + this.id + "]";
    this._father = father;
    util_log("new " + this._name);
    this.toString = this.tostring = () => {
        return this._name
    }
    _defineSingleProperty(this, "item");
    _defineSingleProperty(this, "count");
    this._items = [];
    this._count = 0;
    this._item = function (i) {
        return this._items[i];
    }
    this.resync = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".Resync(" + a + ")");
    }
    this.append = function () {
        let fds = Array.prototype.slice.call(arguments, 0);
        let a = _truncateOutput(fds.join(","));
        util_log(this._name + ".Append(" + a + ")");
        var newfield = new ADODB_Field(this);
        if (fds.length > 0) {
            _defineSingleProperty(this._father, fds[0]);
            newfield.name = fds[0]
        }
        if (fds.length > 1)
            newfield.type = fds[1]
        if (fds.length > 2)
            newfield.definedsize = fds[2]
        this._father[fds[0]] = newfield;
        this._items[this._items.length] = newfield;
    }
    this.toString = function () {
        return this._name;
    }
});
ADODB_Fields.toString = ADODB_Fields.toJSON = () => {
    return "ADODB.Fields"
}

// https://learn.microsoft.com/en-us/office/vba/access/concepts/miscellaneous/recordset-ado-for-visual-c-plus-plus-syntax?source=recommendations
ADODB_Recordset = _proxy(function () {
    this.id = _object_id++;
    this._name = "ADODB.Recordset[" + this.id + "]";
    var father = this;
    util_log("new " + this._name);
    this.toString = this.tostring = () => {
        return this._name
    }
    this.close = function () {
        util_log(this._name + ".Close()");
    }
    this.open = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".Open(" + a + ")");
    }
    this.addnew = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".AddNew(" + a + ")");
        return {};
    }
    this.update = function () {
        let a = _truncateOutput(Array.prototype.slice.call(arguments, 0).join(","));
        util_log(this._name + ".Update(" + a + ")");
        return {};
    }
    _defineSingleProperty(this, "fields");
    _defineSingleProperty(this, "properties");
    this._properties = new Collection();
    this.fields = new ADODB_Fields(this);
});
ADODB_Recordset.toString = ADODB_Recordset.toJSON = () => {
    return "ADODB.Recordset"
}

// https://learn.microsoft.com/en-us/office/client-developer/access/desktop-database-reference/stream-object-ado-reference
ADODB_Stream = _proxy(function () {
    this.id = _object_id++;
    this._name = "ADODB.Stream[" + this.id + "]";
    util_log("new " + this._name);

    this.open = function () {
        util_log(this._name + ".Open()");
    }
    this._type = 2;
    this._position = 0;
    this._size = 0;
    this._content = '';
    this._charset = undefined;
    this.tostring = this.toString = () => {
        return this._name /*JSON.stringify(this)*/
    }

    this.write = function (a) {
        this.content = a;
        if (typeof a === 'undefined')
            util_log(this._name + ".Write(undefined) - Error ?");
        else {
            util_log(this._name + ".Write(str) - " + a.length + " bytes");
            this.size = a.length
        }
    }
    this.writetext = function (a) {
        var encoding = 'binary'
        if (typeof a === 'undefined')
            util_log(this._name + ".WriteText(undefined) - Error ?");
        else {
            if (this.type == 2 && typeof this.charset !== 'undefined') {
                this.content = _iconv.encode(a, this.charset);
                encoding = this.charset;
            } else {
                this.content = a;
            }
            util_log(this._name + ".WriteText(str) - " + a.length + " bytes, encoding: " + encoding);
            this.size = this.content.length
        }
    }

    // https://learn.microsoft.com/en-us/office/client-developer/access/desktop-database-reference/savetofile-method-ado
    this.SaveToFile = function (FileName, SaveOptions) {
        util_log(this._name + ".SaveToFile(" + FileName + ", " + SaveOptions + ")");
        _wscript_saved_files[FileName] = this.content;
        var abs = win32.isAbsolute(FileName);
        if (!abs)
            util_log("FIXME: " + this._name + ".SaveToFile(" + FileName + ") - relative path");
        var parts = win32.normalize(FileName).split(win32.sep);
        var t = FS;
        for (let p of parts) {
            if (p === "")
                continue;
            if (p.toUpperCase() in t)
                t = t[p.toUpperCase()];
            else {
                t = t[p.toUpperCase()] = {};
            };
            if (typeof t === "undefined")
                break;
        }
        util_log("Added '" + FileName + "' to the file system (FS) object");
    }

    this.loadfromfile = function (a) {
        var encoding = 'binary';
        //util_log(this._name + ".LoadFromFile(" + a + ")");
        if (this.type == 2 && typeof this.charset !== 'undefined') {
            this.content = _iconv.decode(Buffer.from(_wscript_saved_files[a]), this.charset);
            encoding = this.charset;
        } else {
            this.content = _wscript_saved_files[a];
        }
        util_log(this._name + ".LoadFromFile(" + a + ") " + this.content.length + " bytes, encoding: " + encoding);
        this.Position = 0;
    }
    // adReadAll -1 Default. Reads all bytes from the stream, from the current position onwards to the EOS marker.
    // This is the only valid StreamReadEnum value with binary streams (Type is adTypeBinary).
    // adReadLine -2 Reads the next line from the stream (designated by the LineSeparator property).
    this.readtext = function (a) {
        util_log(this._name + ".ReadText(" + a + ")");
        if (typeof a === "undefined" || a == adReadAll) {
            return this.content;
        } else if (a == adReadLine) {
            throw new Error("FIXME: " + this._name + ".ReadText(" + a + ") not implemented.");
        } else if (a > 0) {
            return this.content.slice(this.Position, this.Position + a);
        } else {
            return this.content;
        }
    }
    this.read = function (a) {
        util_log(this._name + ".Read(" + a + ")");
        if (typeof a === "undefined" || a == adReadAll) {
            return this.content;
        } else if (a == adReadLine) {
            throw new Error("FIXME: " + this._name + ".Read(" + a + ") not implemented.");
        } else if (a > 0) {
            return this.content.slice(this.Position, this.Position + a);
        } else {
            return this.content;
        }
    }
    this.close = function () {
        util_log(this._name + ".Close()");
    }
    this.copyto = function (t) {
        util_log(this._name + ".CopyTo(" + t + ")");
        t._type = this._type;
        t._position = this._position;
        t._size = this._size;
        t._content = this._content;
        t._charset = this._charset;
    }
    _defineSingleProperty(this, "charset", "_charset");
    //_defineSingleProperty(this, "readtext", "_content");
    //_defineSingleProperty(this, "read", "_content");
    _defineSingleProperty(this, "content", "_content");
    // adTypeBinary 1 Indicates binary data.
    // adTypeText 2 Default. Indicates text data, which is in the character set specified by Charset.
    _defineSingleProperty(this, "type", "_type");
    _defineSingleProperty(this, "position", "_position");
    _defineSingleProperty(this, "size", "_size");
});
ADODB_Stream.toString = ADODB_Stream.toJSON = () => {
    return "ADODB.Stream"
}

// .NET Objects

// https://learn.microsoft.com/en-us/dotnet/api/system.activator?view=net-7.0
Activator = _proxy(function () {
    this.id = _object_id++;
    this._name = "Activator[" + this.id + "]()";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.activator.createinstance?view=net-7.0
    this.CreateInstance = function (assemblyName, typeName, ignoreCase, bindingAttr) {
        util_log(this._name + ".CreateInstance(" + _truncateOutput(assemblyName) + ")");
        if (assemblyName.toLowerCase() === "program"){
            return new WorkProgram();
        }
    }
});
Activator.toString = Activator.toJSON = () => {
    return "Activator"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.delegate?view=net-7.0
Delegate = _proxy(function (target, method) {
    this.id = _object_id++;
    this._name = "Delegate[" + this.id + "](" + target + ", " + method + ")";
    this._target = target;
    this._method = method;
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.delegate.dynamicinvoke?view=net-7.0
    this.DynamicInvoke = function (args) {
        util_log(this._name + ".DynamicInvoke(" + _truncateOutput(args) + ")");
        // Might as well try to save this array as a blob
        if (typeof args === "object" && args[0] !== undefined) {
            let blob_content = new Uint8Array(args);
            let blob = new Blob([blob_content]);
        }
        return new Activator();
    }
    // This is assumed to be the target buffer
    Object.defineProperty(this, "0", {
        get: function () {
            util_log(this._name + "[0]");
            return this._target._buffer;
        }
    });
});
Delegate.toString = Delegate.toJSON = () => {
    return "Delegate"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=net-7.0
System_Collections_ArrayList = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Collections.ArrayList[" + this.id + "]";
    this._list = [];
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist.add?view=net-7.0
    this.Add = function (value) {
        util_log(this._name + ".Add(" + _truncateOutput(value) + ") of type '" + typeof value + "'");
        if (typeof value === "object") {
            this._list.push(...value);
        } else {
            this._list.push(value);
        }
    }
    // https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist.toarray?view=net-7.0
    this.ToArray = function () {
        return this._list;
    }
});
System_Collections_ArrayList.toString = System_Collections_ArrayList.toJSON = () => {
    return "System_Collections_ArrayList"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream?view=net-7.0
System_IO_MemoryStream = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.IO.MemoryStream[" + this.id + "]";
    this._buffer = null;

    // https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream.position?view=net-7.0
    this.Position = 0;

    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream.write?view=net-7.0
    this.write = function (buffer, offset, count) {
        util_log(this._name + ".write(" + _truncateOutput(buffer) + ", " + offset + ", " + count + ")");
        this._buffer = buffer;
    }
    // https://learn.microsoft.com/en-us/dotnet/api/system.io.memorystream.writebyte?view=net-7.0
    this.writebyte = function (value) {
        if (this._buffer === null) {
            util_log(this._name + ".WriteByte()");
            this._buffer = []
        }
        this._buffer.push(value);
        this.Position += 1;
    }
});
System_IO_MemoryStream.toString = System_IO_MemoryStream.toJSON = () => {
    return "System_IO_MemoryStream"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter?view=net-7.0
System_Runtime_Serialization_Formatters_Binary_Binaryformatter = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Runtime.Serialization.Formatters.Binary.Binaryformatter[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter.deserialize?view=net-7.0
    this.Deserialize_2 = function (stream) {
        util_log(this._name + ".Deserialize_2(" + stream._name + ")");
        return new Delegate(stream);
    }
});
System_Runtime_Serialization_Formatters_Binary_Binaryformatter.toString = System_Runtime_Serialization_Formatters_Binary_Binaryformatter.toJSON = () => {
    return "System_Runtime_Serialization_Formatters_Binary_Binaryformatter"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.frombase64transform?view=net-7.0
System_Security_Cryptography_FromBase64Transform = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Security.Cryptography.FromBase64Transform[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.frombase64transform.transformfinalblock?view=net-7.0
    this.TransformFinalBlock = function (inputBuffer, inputOffset, inputCount) {
        let byte_str = new Buffer.from(inputBuffer).toString('ascii');
        let transformed_str = Buffer.from(byte_str, "base64");

        // We want this extracted
        _wscript_saved_files[this._name] = transformed_str;

        let transformed_bytes = Array.from(Buffer.from(transformed_str, 'ascii'));
        util_log(this._name + ".TransformFinalBlock(" + _truncateOutput(inputBuffer) + ", " + inputOffset + ", " + inputCount + ") => " + _truncateOutput(transformed_bytes));
        return transformed_bytes
    }
});
System_Security_Cryptography_FromBase64Transform.toString = System_Security_Cryptography_FromBase64Transform.toJSON = () => {
    return "System_Security_Cryptography_FromBase64Transform"
}

// https://learn.microsoft.com/en-us/dotnet/api/system.text.asciiencoding?view=net-7.0
System_Text_ASCIIEncoding = _proxy(function () {
    this.id = _object_id++;
    this._name = "System.Text.ASCIIEncoding[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/dotnet/api/system.text.asciiencoding.getbytecount?view=net-7.0
    this.GetByteCount_2 = function (chars, index, count) {
        let byte_count = Array.from(Buffer.from(chars, 'ascii')).length
        util_log(this._name + ".GetByteCount_2(" + _truncateOutput(chars) + ") => " + byte_count + " bytes");
        return byte_count;
    }
    // https://learn.microsoft.com/en-us/dotnet/api/system.text.asciiencoding.getbytes?view=net-7.0
    this.GetBytes_4 = function (chars, bytes) {
        let chars_as_bytes = Array.from(Buffer.from(chars, 'ascii'));
        util_log(this._name + ".GetBytes_4(" + _truncateOutput(chars) + ") => " + _truncateOutput(chars_as_bytes));
        return chars_as_bytes;
    }
});
System_Text_ASCIIEncoding.toString = System_Text_ASCIIEncoding.toJSON = () => {
    return "System_Text_ASCIIEncoding"
}

// This is a placeholder method until we can determine what this is actually a reference to
WorkProgram = _proxy(function () {
    this.id = _object_id++;
    this._name = "WorkProgram[" + this.id + "]()";
    util_log("new " + this._name);
    this.Work = function (url) {
        if (this._name === undefined) {
            util_log("WorkProgram => Work(" + url + ")");
        } else {
            util_log(this._name + " => Work(" + url + ")");
        }
        var ret = new XMLHttpRequest();
        ret.open("get", url);
        ret.send();
    }
});
WorkProgram.toString = WorkProgram.toJSON = () => {
    return "WorkProgram"
}

// Internet-Explorer API

// https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752049(v=vs.85)
InternetExplorer_Application = _proxy(function () {
    this.id = _object_id++;
    this._name = "InternetExplorer.Application[" + this.id + "]";
    this.document = document;
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752093(v=vs.85)
    this.Navigate = function (url, Flags, TargetFrameName) {
        util_log(this._name + ".Navigate(" + url + ")");
        var ret = new XMLHttpRequest();
        ret.open("get", url);
        ret.send();
        this.Busy = false;
        this.readystate = 4;
        return "S_OK"
    }
});
InternetExplorer_Application.toString = InternetExplorer_Application.toJSON = () => {
    return "InternetExplorer_Application"
}

// Win32 objects

// https://learn.microsoft.com/en-us/windows/win32/msi/installer-object
WindowsInstaller_Installer = _proxy(function () {
    this.id = _object_id++;
    this._name = "WindowsInstaller.Installer[" + this.id + "]";
    util_log("new " + this._name);
    // https://learn.microsoft.com/en-us/windows/win32/msi/installer-installproduct
    this.InstallProduct = function (packagePath, propertyValues) {
        util_log(this._name + ".InstallProduct(" + packagePath + ", " + propertyValues + ")");
        var ret = new XMLHttpRequest();
        ret.open("get", packagePath);
        ret.send();
    }
});
WindowsInstaller_Installer.toString = WindowsInstaller_Installer.toJSON = () => {
    return "WindowsInstaller_Installer"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/action
Action = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Action[" + this.id + "]";
    util_log("new " + this._name);

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/action#properties

    // _defineSingleProperty(this, "Id");

    _defineSingleProperty(this, "Type");
});
Action.toString = Action.toJSON = () => {
    return "Action"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/execaction
ExecAction = _proxy(function () {
    // Inheriting Action
    Action.call(this);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "ExecAction[" + this.id + "]";
    util_log("new " + this._name);

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/execaction#properties

    _defineSingleProperty(this, "Arguments");
    _defineSingleProperty(this, "Path");
    _defineSingleProperty(this, "WorkingDirectory");
});
ExecAction.toString = ExecAction.toJSON = () => {
    return "ExecAction"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/comhandleraction
ComHandlerAction = _proxy(function () {
    // Inheriting Action
    Action.call(this);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "ComHandlerAction[" + this.id + "]";
    util_log("new " + this._name);

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/comhandleraction#properties

    _defineSingleProperty(this, "ClassId");
    _defineSingleProperty(this, "Data");
});
ComHandlerAction.toString = ComHandlerAction.toJSON = () => {
    return "ComHandlerAction"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/emailaction
EmailAction = _proxy(function () {
    // Inheriting Action
    Action.call(this);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "EmailAction[" + this.id + "]";
    util_log("new " + this._name);

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/emailaction#properties

    _defineSingleProperty(this, "Attachments");
    _defineSingleProperty(this, "Bcc");
    _defineSingleProperty(this, "Body");
    _defineSingleProperty(this, "Cc");
    _defineSingleProperty(this, "From");
    _defineSingleProperty(this, "HeaderFields");
    _defineSingleProperty(this, "ReplyTo");
    _defineSingleProperty(this, "Server");
    _defineSingleProperty(this, "Subject");
    _defineSingleProperty(this, "To");
});
EmailAction.toString = EmailAction.toJSON = () => {
    return "EmailAction"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/showmessageaction
ShowMessageAction = _proxy(function () {
    // Inheriting Action
    Action.call(this);

    // Key properties for MalwareJail
    this.id = _object_id;
    this._name = "ShowMessageAction[" + this.id + "]";
    util_log("new " + this._name);

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/showmessageaction#properties

    _defineSingleProperty(this, "MessageBody");
    _defineSingleProperty(this, "Title");
});
ShowMessageAction.toString = ShowMessageAction.toJSON = () => {
    return "ShowMessageAction"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/actioncollection
ActionCollection = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "ActionCollection[" + this.id + "]";
    util_log("new " + this._name);

    // Instance methods
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/actioncollection#methods

    this.Clear = function () {
        util_log(this._name + ".Clear(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/actioncollection-create
    this.Create = function (type) {
        util_log(this._name + ".Create(" + type + ")");

        switch (type) {
            case 0:
                return _proxy(new ExecAction());
            case 5:
                return _proxy(new ComHandlerAction());
            case 6:
                return _proxy(new EmailAction());
            case 7:
                return _proxy(new ShowMessageAction());
        }
    }

    this.Remove = function () {
        util_log(this._name + ".Remove(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/actioncollection#properties

    _defineSingleProperty(this, "Context");
    _defineSingleProperty(this, "Count");
    _defineSingleProperty(this, "Item");
    _defineSingleProperty(this, "XmlText");
});
ActionCollection.toString = ActionCollection.toJSON = () => {
    return "ActionCollection"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/trigger
Trigger = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Trigger[" + this.id + "]";
    util_log("new " + this._name);

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/trigger#properties

    _defineSingleProperty(this, "Enabled");
    _defineSingleProperty(this, "EndBoundary");
    _defineSingleProperty(this, "ExecutionTimeLimit");
    _defineSingleProperty(this, "Id");
    _defineSingleProperty(this, "Repetition");
    _defineSingleProperty(this, "StartBoundary");
    _defineSingleProperty(this, "Type");
});
Trigger.toString = Trigger.toJSON = () => {
    return "Trigger"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/triggercollection
TriggerCollection = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "TriggerCollection[" + this.id + "]";
    util_log("new " + this._name);

    // Instance methods
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/triggercollection#methods

    this.Clear = function () {
        util_log(this._name + ".Clear(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/triggercollection-create
    this.Create = function (type) {
        util_log(this._name + ".Create(" + type + ")");
        return _proxy(new Trigger());
    }

    this.Remove = function () {
        util_log(this._name + ".Remove(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/triggercollection#properties

    _defineSingleProperty(this, "Count");
    _defineSingleProperty(this, "Item");
});
TriggerCollection.toString = TriggerCollection.toJSON = () => {
    return "TriggerCollection"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/taskdefinition
TaskDefinition = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "TaskDefinition[" + this.id + "]";
    util_log("new " + this._name);

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskdefinition#properties

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskdefinition-actions
    // _defineSingleProperty(this, "Actions");
    this.Actions = _proxy(new ActionCollection());

    _defineSingleProperty(this, "Data");
    _defineSingleProperty(this, "Principal");
    _defineSingleProperty(this, "RegistrationInfo");
    _defineSingleProperty(this, "Settings");

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/triggercollection
    // _defineSingleProperty(this, "Triggers");
    this.Triggers = _proxy(new TriggerCollection());

    _defineSingleProperty(this, "XmlText");
});
TaskDefinition.toString = TaskDefinition.toJSON = () => {
    return "TaskDefinition"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/taskfolder
TaskFolder = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "TaskFolder[" + this.id + "]";
    util_log("new " + this._name);

    // Instance methods
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskfolder#methods

    this.CreateFolder = function () {
        util_log(this._name + ".CreateFolder(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.DeleteFolder = function () {
        util_log(this._name + ".DeleteFolder(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.DeleteTask = function () {
        util_log(this._name + ".DeleteTask(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetFolder = function () {
        util_log(this._name + ".GetFolder(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetFolders = function () {
        util_log(this._name + ".GetFolders(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetSecurityDescriptor = function () {
        util_log(this._name + ".GetSecurityDescriptor(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetTask = function () {
        util_log(this._name + ".GetTask(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.GetTasks = function () {
        util_log(this._name + ".GetTasks(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.Name = function () {
        util_log(this._name + ".Name(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.Path = function () {
        util_log(this._name + ".Path(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }
    this.RegisterTask = function () {
        util_log(this._name + ".RegisterTask(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskfolder-registertaskdefinition
    this.RegisterTaskDefinition = function (path, definition, flags, userId, password, logonType, sddl, task) {
        util_log(this._name + ".RegisterTaskDefinition(" + path + ", " + definition + ", " + flags + ", " + userId + ", " + password + ", " + logonType + ", " + sddl + ", " + task + ")");
    }

    this.SetSecurityDescriptor = function () {
        util_log(this._name + ".SetSecurityDescriptor(" + _truncateOutput(Array.prototype.slice.call(arguments, 0).join(",")) + ")");
    }

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskfolder#properties

    // _defineSingleProperty(this, "Name");
    this.Name = this._name;

    _defineSingleProperty(this, "Path");
});
TaskFolder.toString = TaskFolder.toJSON = () => {
    return "TaskFolder"
}

// https://learn.microsoft.com/en-us/windows/win32/taskschd/taskservice
Schedule_Service = _proxy(function () {
    // Key properties for MalwareJail
    this.id = _object_id++;
    this._name = "Schedule.Service[" + this.id + "]";
    util_log("new " + this._name);

    // Instance methods
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskservice#methods

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskservice-connect
    this.Connect = function (serverName, user, domain, password) {
       util_log(this._name + ".Connect(" + serverName + ", " + user + ", " + domain + ", " + password + ")");
    }

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskservice-getfolder
    this.GetFolder = function (path) {
        d1 = win32.normalize(path);
        util_log(this._name + ".GetFolder(" + path + ") => " + d1);
        return new TaskFolder(d1);
    }

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskservice-getrunningtasks
    this.GetRunningTasks = function (flags) {
       util_log(this._name + ".GetRunningTasks(" + flags + ")");
       return new Collection([new Win32_Process("app.exe")]);
    }

    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskservice-newtask
    this.NewTask = function (flags) {
       util_log(this._name + ".NewTask(" + flags + ")");
       return _proxy(new TaskDefinition());
    }

    // Instance properties
    // https://learn.microsoft.com/en-us/windows/win32/taskschd/taskservice#properties

    _defineSingleProperty(this, "Connected");
    _defineSingleProperty(this, "ConnectedDomain");
    _defineSingleProperty(this, "ConnectedUser");
    _defineSingleProperty(this, "HighestVersion");
    _defineSingleProperty(this, "TargetServer");

});
Schedule_Service.toString = Schedule_Service.toJSON = () => {
    return "Schedule_Service"
}

// Overriding these methods from third-party libs

// Basic implementation of https://github.com/eligrey/FileSaver.js
saveAs = async function (content, filename) {
    util_log("saveAs(" + content + ", " + filename + ")")

    // Assign the blob contents to the _wscript_saved_files global which will be
    // written to disk after execution
    if (content.constructor.name == "Blob") {
        content = Buffer.from(await content.arrayBuffer());
    }
    _wscript_saved_files[filename] = content;
}

// No idea what _WidgetManager or _WidgetInfo is
_WidgetManager = function () {
    util_log("new _WidgetManager object");
}
_WidgetManager._Init = function () {
    util_log("_WidgetManager._Init(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
_WidgetManager._SetDataContext = function () {
    util_log("_WidgetManager._SetDataContext(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
_WidgetManager._RegisterWidget = function () {
    util_log("_WidgetManager._RegisterWidget(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
_WidgetInfo = function (n) {
    util_log("new _WidgetInfo " + n);
}

// Google Analytics somehow
ga = function () {
    util_log("ga(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
}
