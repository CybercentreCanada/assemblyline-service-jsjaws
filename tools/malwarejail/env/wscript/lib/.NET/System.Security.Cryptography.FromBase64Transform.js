'use strict';


// https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.frombase64transform?view=net-7.0
class SystemSecurityCryptographyFromBase64Transform {
    constructor() {
        // bool CanReuseTransform {get;}
        this.CanReuseTransform = undefined;

        // bool CanTransformMultipleBlocks {get;}
        this.CanTransformMultipleBlocks = undefined;

        // int InputBlockSize {get;}
        this.InputBlockSize = undefined;

        // int OutputBlockSize {get;}
        this.OutputBlockSize = undefined;

        // Custom properties
        this._id = _object_id++;
        this._name = "System.Security.Cryptography.FromBase64Transform[" + this._id + "]";
    }

    // void Clear()
    Clear() {}

    // void Dispose(), void IDisposable.Dispose()
    Dispose() {}

    // bool Equals(System.Object obj)
    Equals() {}

    // int GetHashCode()
    GetHashCode() {}

    // type GetType()
    GetType() {}

    // string ToString()
    ToString() {
        return this._name;
    }

    // int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[]...
    TransformBlock() {}

    // https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.frombase64transform.transformfinalblock?view=net-7.0
    TransformFinalBlock(inputBuffer, inputOffset, inputCount) {
        let byte_str = new Buffer.from(inputBuffer).toString('ascii');
        let transformed_str = Buffer.from(byte_str, "base64");

        // We want this extracted
        _wscript_saved_files[this._name] = transformed_str;

        let transformed_bytes = Array.from(Buffer.from(transformed_str, 'ascii'));
        return transformed_bytes
    }
}

System_Security_Cryptography_FromBase64Transform = new ProxyGenerator(SystemSecurityCryptographyFromBase64Transform);
