'use strict';


// https://learn.microsoft.com/en-us/office/vba/language/glossary/vbe-glossary#automation-object
class AutomationObject extends Win32_Process {
    constructor(a, b) {

        // Inheriting Win32_Process
        super();

        // Custom for MalwareJail
        this._name = "AutomationObject[" + this._id + "](" + a + ", " + b + ")";
    }

    ExecQuery = function () {
        var ret = "Unknown";
        var a = Array.prototype.slice.call(arguments, 0).join(",");
        var qry = arguments[0].toUpperCase();
        if (qry === "SELECT * FROM WIN32_OPERATINGSYSTEM") {
            ret = [{
                "BootDevice": "\\Device\\HarddiskVolume1",
                "BuildNumber": "14393",
                "BuildType": "Multiprocessor Free",
                "Caption": "Microsoft Windows 10 Pro",
                "CodeSet": "1250",
                "CountryCode": "420",
                "CreationClassName": "Win32_OperatingSystem",
                "CSCreationClassName": "Win32_ComputerSystem",
                "CSDVersion": "null",
                "CSName": "CARBON",
                "CurrentTimeZone": "60",
                "DataExecutionPrevention_32BitApplications": "true",
                "DataExecutionPrevention_Available": "true",
                "DataExecutionPrevention_Drivers": "true",
                "DataExecutionPrevention_SupportPolicy": "2",
                "Debug": "false",
                "Description": "Carbon",
                "Distributed": "false",
                "EncryptionLevel": "256",
                "ForegroundApplicationBoost": "2",
                "FreePhysicalMemory": "4095708",
                "FreeSpaceInPagingFiles": "1192496",
                "FreeVirtualMemory": "4011584",
                "InstallDate": "9/4/2016 03:00:28",
                "LargeSystemCache": "null",
                "LastBootUpTime": "10/30/2016 00:06:03",
                "LocalDateTime": "11/1/2016 00:30:15",
                "Locale": "0405",
                "Manufacturer": "Microsoft Corporation",
                "MaxNumberOfProcesses": "-1",
                "MaxProcessMemorySize": "137438953344",
                "Name": "Microsoft Windows 10 Pro|C:\\WINDOWS|\\Device\\Harddisk0\\Partition2",
                "NumberOfLicensedUsers": "null",
                "NumberOfProcesses": "153",
                "NumberOfUsers": "2",
                "Organization": "",
                "OSLanguage": "0409",
                /* "1033", */
                "OSProductSuite": "256",
                "OSType": "18",
                "OtherTypeDescription": "null",
                "PlusProductID": "null",
                "PlusVersionNumber": "null",
                "Primary": "true",
                "ProductType": "1",
                "QuantumLength": "undefined",
                "QuantumType": "undefined",
                "RegisteredUser": "Uzivatel",
                "SerialNumber": "00330-80000-00000-AA676",
                "ServicePackMajorVersion": "0",
                "ServicePackMinorVersion": "0",
                "SizeStoredInPagingFiles": "1245184",
                "Status": "OK",
                "SuiteMask": "272",
                "SystemDevice": "\\Device\\HarddiskVolume2",
                "SystemDirectory": "C:\\WINDOWS\\system32",
                "SystemDrive": "C:",
                "TotalSwapSpaceSize": "null",
                "TotalVirtualMemorySize": "9306340",
                "TotalVisibleMemorySize": "8061156",
                "Version": "10.0.14393",
                "WindowsDirectory": "C:\\WINDOWS"
            }];
        }
        else if (qry.indexOf("SELECT * FROM WIN32_PROCESS") >= 0) {
            //FIXME: parse query to get the process name
            ret = new Collection([new Win32_Process("app.exe")]);
        }
        else if (qry === "SELECT * FROM WIN32_LOGICALDISK") {
            ret = [{
                "Access": "0",
                "Availability": "",
                "BlockSize": "",
                "Caption": "C:",
                "Compressed": "FALSE",
                "ConfigManagerErrorCode": "",
                "ConfigManagerUserConfig": "",
                "CreationClassName": "Win32_LogicalDisk",
                "Description": "Local Fixed Disk",
                "DeviceID": "C:",
                "DriveType": "3",
                "ErrorCleared": "",
                "ErrorDescription": "",
                "ErrorMethodology": "",
                "FileSystem": "NTFS",
                "FreeSpace": "611749265408",
                "InstallDate": "",
                "LastErrorCode": "",
                "MaximumComponentLength": "255",
                "MediaType": "12",
                "Name": "C:",
                "NumberOfBlocks": "",
                "PNPDeviceID": "",
                "PowerManagementCapabilities": "",
                "PowerManagementSupported": "",
                "ProviderName": "",
                "Purpose": "",
                "QuotasDisabled": "",
                "QuotasIncomplete": "",
                "QuotasRebuilding": "",
                "Size": "1013309239296",
                "Status": "",
                "StatusInfo": "",
                "SupportsDiskQuotas": "FALSE",
                "SupportsFileBasedCompression": "TRUE",
                "SystemCreationClassName": "Win32_ComputerSystem",
                "SystemName": "BLAH-BLAH8l44",
                "VolumeDirty": "",
                "VolumeName": "Windows",
                "VolumeSerialNumber": "BLAHBLAH",
            }];
        }
        else if (qry.indexOf("SELECT * FROM ANTIVIRUSPRODUCT") >= 0) {
            ret = [{
                "DisplayName": "INSECURE_AS_HECK"
            }];
        }
        else if (qry.indexOf("SELECT DISPLAYNAME, PRODUCTSTATE FROM ANTIVIRUSPRODUCT") >= 0) {
            ret = [{
                "displayName": "INSECURE_AS_HECK",
                "productState": "INSECURE_AS_HECK"
            }];
        }
        _wscript_wmis[_wscript_wmis.length] = { "arguments": arguments, "return": ret }
        util_log(this._name + ".ExecQuery(" + a + ") => " + _truncateOutput(_inspect(ret)));
        return ret;
    }
    InstancesOf = function (thing) {
        util_log(thing);
        if (thing.toLowerCase() == "win32_logicaldisk") {
            return this.execquery("SELECT * FROM WIN32_LOGICALDISK");
        }
        else if (thing.toLowerCase() == "win32_operatingsystem") {
            return this.execquery("SELECT * FROM WIN32_OPERATINGSYSTEM");
        }
        else if (thing.toLowerCase() == "win32_process") {
            return this.execquery("SELECT * FROM WIN32_PROCESS");
        }
        else if (thing.toLowerCase() == "antivirusproduct") {
            return this.execquery("SELECT * FROM ANTIVIRUSPRODUCT");
        }
    }

    // https://learn.microsoft.com/en-us/previous-versions/windows/desktop/regprov/setdwordvalue-method-in-class-stdregprov
    SetDwordValue = function (hDefKey, sSubKeyName, sValueName, uValue) {
        util_log(this._name + ".SetDwordValue(" + hDefKey + ", " + sSubKeyName + ", " + sValueName + ", " + uValue + ")");
        let absolute_key_path = REGDEFKEY_MAP[hDefKey] + "\\" + sSubKeyName + "\\" + sValueName;
        let normalized_key_path = _reg_normalize(absolute_key_path);
        REG[normalized_key_path] = uValue;
    }

    // Helper method
    toString() {
        return this._name;
    }
    toJSON() {
        return this._name;
    }

};

AutomationObject.toString = AutomationObject.toJSON = () => {
    return "AutomationObject";
}
