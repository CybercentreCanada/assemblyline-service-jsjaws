class System_Security_Cryptography_DSACryptoServiceProvider {
    constructor() {
        // System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo {get;}
        this.CspKeyContainerInfo = undefined;

        // string KeyExchangeAlgorithm {get;}
        this.KeyExchangeAlgorithm = undefined;

        // int KeySize {get;}
        this.KeySize = undefined;

        // System.Security.Cryptography.KeySizes[] LegalKeySizes {get;}
        this.LegalKeySizes = undefined;

        // bool PersistKeyInCsp {get;set;}
        this.PersistKeyInCsp = undefined;

        // bool PublicOnly {get;}
        this.PublicOnly = undefined;

        // string SignatureAlgorithm {get;}
        this.SignatureAlgorithm = undefined;

    }

    // void Clear()
    Clear() {

    }

    // byte[] CreateSignature(byte[] rgbHash)
    CreateSignature() {

    }

    // void Dispose(), void IDisposable.Dispose()
    Dispose() {

    }

    // bool Equals(System.Object obj)
    Equals() {

    }

    // byte[] ExportCspBlob(bool includePrivateParameters), byte[] ICspAsymmetricAlgorithm....
    ExportCspBlob() {

    }

    // System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParam...
    ExportParameters() {

    }

    // void FromXmlString(string xmlString)
    FromXmlString() {

    }

    // int GetHashCode()
    GetHashCode() {

    }

    // type GetType()
    GetType() {

    }

    // void ImportCspBlob(byte[] keyBlob), void ICspAsymmetricAlgorithm.ImportCspBlob(byte[...
    ImportCspBlob() {

    }

    // void ImportParameters(System.Security.Cryptography.DSAParameters parameters)
    ImportParameters() {

    }

    // byte[] SignData(System.IO.Stream inputStream), byte[] SignData(byte[] buffer), byte[...
    SignData() {

    }

    // byte[] SignHash(byte[] rgbHash, string str)
    SignHash() {

    }

    // string ToString()
    ToString() {

    }

    // string ToXmlString(bool includePrivateParameters)
    ToXmlString() {

    }

    // bool VerifyData(byte[] rgbData, byte[] rgbSignature), bool VerifyData(byte[] data, b...
    VerifyData() {

    }

    // bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature)
    VerifyHash() {

    }

    // bool VerifySignature(byte[] rgbHash, byte[] rgbSignature)
    VerifySignature() {

    }

}

System_Security_Cryptography_DSACryptoServiceProvider = new ProxyGenerator(System_Security_Cryptography_DSACryptoServiceProvider);
