'use strict';


class WinHTTPRequest {
    constructor(strProgId) {
        // Properties
        // https://learn.microsoft.com/en-us/windows/win32/winhttp/winhttprequest#properties

        // Variant Option (WinHttpRequestOption) {get} {set}
        this.Parameterized = null;
        this._parameterized = null;

        // Variant ResponseBody () {get}
        this.ResponseBody = null;
        this._responseBody = null;

        // Variant ResponseStream () {get}
        this.ResponseStream = null;
        this._responseStream = null;

        // string ResponseText () {get}
        this.ResponseText = null;
        this._responseText = null;

        // int Status () {get}
        this.Status = null;
        this._status = 200;

        // string StatusText () {get}
        this.StatusText = null;
        this._statusText = "OK";

        // Getters & setters
        Object.defineProperties(this, {
            'ResponseBody': {
                get: function () {
                    return this._responseBody;
                },
                set: throwInvalidAssignmentError
            },
            'ResponseStream': {
                get: function () {
                    return this._responseStream;
                },
                set: throwInvalidAssignmentError
            },
            'ResponseText': {
                get: function () {
                    return this._responseText;
                },
                set: throwInvalidAssignmentError
            },
            'Status': {
                get: function () {
                    return this._status;
                },
                set: throwInvalidAssignmentError
            },
            'StatusText': {
                get: function () {
                    return this._statusText;
                },
                set: throwInvalidAssignmentError
            }
        });

        // // Custom properties
        this._wscript_urls_index = null;
        this._id = _object_id++;
        this._name = "WinHTTP.WinHTTPRequest[" + this._id + "]";
    }

    // Default methods
    // https://learn.microsoft.com/en-us/windows/win32/winhttp/winhttprequest#methods


    // void Abort ()
    Abort() {

    }

    // string GetAllResponseHeaders ()
    GetAllResponseHeaders() {

    }

    // string GetResponseHeader (string)
    GetResponseHeader(string) {

    }

    // https://learn.microsoft.com/en-us/windows/win32/winhttp/iwinhttprequest-open
    Open(bstrMethod, bstrUrl, Async) {
        function containsURL(obj, list) {
            for (let url of list) {
                if (JSON.stringify(obj) === JSON.stringify(url)) {
                    return true;
                }
            }
            return false;
        }
        let url_to_add = { "url": bstrUrl, "method": bstrMethod }
        if (!containsURL(url_to_add, _wscript_urls)) {
            this._wscript_urls_index = _wscript_urls.length;
            _wscript_urls[this._wscript_urls_index] = url_to_add;
        }
    }

    // https://learn.microsoft.com/en-us/windows/win32/winhttp/iwinhttprequest-send
    Send(varBody) {
        var s = 'MZ'
        for (var ii = 0; ii < 200; ii++) {
            s += 'Dummy content, use --down to download the real payload.\n';
        }
        this._responseBody = s;
        this._responseText = s;

        if (this._wscript_urls_index != null) {
            _wscript_urls[this._wscript_urls_index]["request_body"] = varBody;
        }

    }

    // void SetAutoLogonPolicy (WinHttpRequestAutoLogonPolicy)
    SetAutoLogonPolicy(WinHttpRequestAutoLogonPolicy) {

    }

    // void SetClientCertificate (string)
    SetClientCertificate(string) {

    }

    // void SetCredentials (string1, string2, HTTPREQUEST_SETCREDENTIALS_FLAGS)
    SetCredentials(string1, string2, HTTPREQUEST_SETCREDENTIALS_FLAGS) {

    }

    // void SetProxy (HTTPREQUEST_PROXY_SETTING, Variant1, Variant2)
    SetProxy(HTTPREQUEST_PROXY_SETTING, Variant1, Variant2) {

    }

    // void SetRequestHeader (string1, string2)
    SetRequestHeader(string1, string2) {

    }

    // void SetTimeouts (int1, int2, int3, int4)
    SetTimeouts(int1, int2, int3, int4) {

    }

    // https://learn.microsoft.com/en-us/windows/win32/winhttp/iwinhttprequest-waitforresponse
    WaitForResponse(varTimeout, varSucceeded) {

    }

    // Helper method
    toString() {
        return this._name;
    }
}

WinHTTPRequest = new ProxyGenerator(WinHTTPRequest);
